[
  {
    "url": "https://www.python.org/Algorithms",
    "title": "Welcome to Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. We couldn’t find what you were looking for. This error has been reported and we will look into it shortly. For now, Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/Natural_language_processing",
    "title": "Welcome to Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. We couldn’t find what you were looking for. This error has been reported and we will look into it shortly. For now, Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/WebReact",
    "title": "ð¤·ð½ââï¸ Page not found | Page not found | MDN",
    "content": "Web technology reference for developers Structure of content on the web Code used to describe document style General-purpose scripting language Protocol for transmitting web resources Interfaces for building web applications Developing extensions for web browsers Build web projects usable for all Web technology reference for developers Learn web development Learn web development Learn to structure web content with HTML Learn to style content using CSS Learn to run scripts in the browser Learn to make the web accessible to all A customized MDN experience Get real-time assistance and support All browser compatibility updates at a glance Learn how to use MDN Plus Frequently asked questions about MDN Plus Write, test and share your code Scan a website for free Get real-time assistance and support Go back to the home page Your blueprint for a better internet. Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2025 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://www.bbc.com/newsSoftware_engineering",
    "title": "BBC - 404: Not Found",
    "content": "404\n              \n                Not Found Check the page address or search for it below. BBC Homepage Copyright © BBC.\n              \n              The BBC is not responsible for the content of external sites.\n              \n                Read about our approach to external\n                linking."
  },
  {
    "url": "https://www.bbc.com/newsLinux",
    "title": "BBC - 404: Not Found",
    "content": "404\n              \n                Not Found Check the page address or search for it below. BBC Homepage Copyright © BBC.\n              \n              The BBC is not responsible for the content of external sites.\n              \n                Read about our approach to external\n                linking."
  },
  {
    "url": "https://www.python.org/Flask",
    "title": "Welcome to Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. We couldn’t find what you were looking for. This error has been reported and we will look into it shortly. For now, Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://towardsdatascience.com/JavaScript",
    "title": "JavaScript for Data Analysis | Towards Data Science",
    "content": "Publish AI, ML & data-science insights to a global community of data professionals. With the web opening new frontiers in collaboration, the web's native language of JavaScript is the best choice for thinking with data. On the demise of cameras in favor of camera-equipped mobile phones, Chase Jarvis once quipped, \"The best camera is the one that’s with you.\" In other words, portability and convenience outweigh technical differences in resolution, color, bokeh, etc. If you want to take a picture, a camera in your hand is better than a camera left at home. I think of this when asked about JavaScript versus Python, R, or Julia for data analysis. Those other languages are all great. They have powerful features such as operator overloading and multidimensional arrays, robust open-source libraries for math and visualization, and active communities. It’s easy to argue why any of them might be better suited than JavaScript for data analysis. Yet in my view, the language differences are beside the point. In part this is because JavaScript – the language, the web platform, and the open-source ecosystem – grows more capable every year. A tremendous amount of work goes into JavaScript by browser vendors, standards groups, researchers, and a vast population of global contributors. When we say JavaScript is fast, it isn’t by luck; it’s because people made it fast. We all benefit from this consolidated effort. And because JavaScript is the language of the web, it runs everywhere. Like the camera phone in your pocket, nearly everyone has a browser that runs JavaScript – the very browser you’re using to read this article. JavaScript enables interactive visualizations, explorable explanations, live analyses, model simulations, computational art, games, quizzes, you name it… When someone shares an analysis implemented in JavaScript, you’re not just seeing a static snapshot of their work; you’re running it live in your browser. You can go beyond passive reading by querying data, tweaking assumptions, and asking questions. JavaScript is the richest medium we’ve ever had for communication, but thanks to the open nature of the web it’s also something more: a medium amenable to inspection and tinkering, for learning and collaboration. Browser developer tools allow you to view, step into, and even modify, running code. The web got me hooked on programming. I first learned JavaScript through View Source: if a web page did something cool, I’d view its source and tinker with it to understand how it worked and to see if I could repurpose it to make something interesting. The immediacy and accessibility of JavaScript – and the endless possibilities – made it intoxicating. What has motivated me to keep building software over the last twenty-odd years is the idea that when you build something on the web, you’re teaching others how to build something too. We’re all swimming in this primordial soup of ideas, giving and receiving creative inspiration. Collaboration and communication are why the web exists. The web is how we work. It’s how we learn. It’s how we share ideas. It’s the web what makes JavaScript great for data analysis (and much else besides). On the web, we can edit and run code together in realtime, share exploratory views of data to answer questions, and explain concepts, with little friction. We can do almost anything we can imagine. So I admire the many powerful features and libraries available in other languages, but JavaScript is my first choice for its portability and convenience. It’s the easiest way to share live code anyone can edit. Of course, there’s still much to do. JavaScript may not have been conceived as a language for data analysis, but the language can be extended to better support it. I’m optimistic. JavaScript has improved dramatically over the last ten years, adding async/await, arrow functions, promises, iterators, generators, and more. Thanks to ES modules and services like Skypack, we may finally see easier library interoperability between Node.js and browsers (or at least fewer headaches with bundlers, transpilers, and loaders). With WebGPU, WebAssembly, and other standards under development, JavaScript’s future is bright. (See Ben Schmidt’s JavaScript and the next decade of data programming for more.) We also need new libraries and abstractions that let us spend more time thinking with data and less wrestling with the intricacies of programming. Open-source efforts such as Apache Arrow, Arquero, tidy.js, Observable Plot (which I contribute to), and Vega-Lite are helping. As the author of D3.js, another open-source JavaScript library for visualization, I’ve heard from folks who were inspired to learn visualization by the work others shared openly on the web. Some of these folks even made it a career. I’m hopeful that with better tools – and specifically tools that embrace collaboration on the web – even more folks can unlock the power of thinking with data, together. Written By Share This Article Towards Data Science is a community publication. Submit your insights to reach our global audience and earn through the TDS Author Payment Program. This article explores the relationship between a movie’s dialogue and its genre, leveraging domain-driven data… How to build a modern, scalable data platform to power your analytics and data science… How to make graphs using Matplotlib, Pandas and Seaborn Create Visualizations at the Level of Leading Newspapers To what extent are countries adopting data policies and systems for the public good? From Urban Collisions to Global Connections: Unveiling the Full Spectrum of Geo-Visual Storytelling with Observable… From Haunted Locales to Political Patterns: A Mapping Journey Through Data and Design with Observable… Your home for data science and Al. The world’s leading publication for data science, data analytics, data engineering, machine learning, and artificial intelligence professionals."
  },
  {
    "url": "https://www.bbc.com/newsGitHub",
    "title": "BBC - 404: Not Found",
    "content": "404\n              \n                Not Found Check the page address or search for it below. BBC Homepage Copyright © BBC.\n              \n              The BBC is not responsible for the content of external sites.\n              \n                Read about our approach to external\n                linking."
  },
  {
    "url": "https://www.bbc.com/newsDjango",
    "title": "BBC - 404: Not Found",
    "content": "404\n              \n                Not Found Check the page address or search for it below. BBC Homepage Copyright © BBC.\n              \n              The BBC is not responsible for the content of external sites.\n              \n                Read about our approach to external\n                linking."
  },
  {
    "url": "https://en.wikipedia.org/wiki/Deep_learning",
    "title": "Deep learning - Wikipedia",
    "content": "In machine learning, deep learning focuses on utilizing multilayered neural networks to perform tasks such as classification, regression, and representation learning. The field takes inspiration from biological neuroscience and is centered around stacking artificial neurons into layers and \"training\" them to process data. The adjective \"deep\" refers to the use of multiple layers (ranging from three to several hundred or thousands) in the network. Methods used can be supervised, semi-supervised or unsupervised.[2] Some common deep learning network architectures include fully connected networks, deep belief networks, recurrent neural networks, convolutional neural networks, generative adversarial networks, transformers, and neural radiance fields. These architectures have been applied to fields including computer vision, speech recognition, natural language processing, machine translation, bioinformatics, drug design, medical image analysis, climate science, material inspection and board game programs, where they have produced results comparable to and in some cases surpassing human expert performance.[3][4][5] Early forms of neural networks were inspired by information processing and distributed communication nodes in biological systems, particularly the human brain. However, current neural networks do not intend to model the brain function of organisms, and are generally seen as low-quality models for that purpose.[6] Most modern deep learning models are based on multi-layered neural networks such as convolutional neural networks and transformers, although they can also include propositional formulas or latent variables organized layer-wise in deep generative models such as the nodes in deep belief networks and deep Boltzmann machines.[7] Fundamentally, deep learning refers to a class of machine learning algorithms in which a hierarchy of layers is used to transform input data into a progressively more abstract and composite representation. For example, in an image recognition model, the raw input may be an image (represented as a tensor of pixels). The first representational layer may attempt to identify basic shapes such as lines and circles, the second layer may compose and encode arrangements of edges, the third layer may encode a nose and eyes, and the fourth layer may recognize that the image contains a face. Importantly, a deep learning process can learn which features to optimally place at which level on its own. Prior to deep learning, machine learning techniques often involved hand-crafted feature engineering to transform the data into a more suitable representation for a classification algorithm to operate on. In the deep learning approach, features are not hand-crafted and the model discovers useful feature representations from the data automatically. This does not eliminate the need for hand-tuning; for example, varying numbers of layers and layer sizes can provide different degrees of abstraction.[8][2] The word \"deep\" in \"deep learning\" refers to the number of layers through which the data is transformed. More precisely, deep learning systems have a substantial credit assignment path (CAP) depth. The CAP is the chain of transformations from input to output. CAPs describe potentially causal connections between input and output. For a feedforward neural network, the depth of the CAPs is that of the network and is the number of hidden layers plus one (as the output layer is also parameterized). For recurrent neural networks, in which a signal may propagate through a layer more than once, the CAP depth is potentially unlimited.[9] No universally agreed-upon threshold of depth divides shallow learning from deep learning, but most researchers agree that deep learning involves CAP depth higher than two. CAP of depth two has been shown to be a universal approximator in the sense that it can emulate any function.[10] Beyond that, more layers do not add to the function approximator ability of the network. Deep models (CAP > two) are able to extract better features than shallow models and hence, extra layers help in learning the features effectively. Deep learning architectures can be constructed with a greedy layer-by-layer method.[11] Deep learning helps to disentangle these abstractions and pick out which features improve performance.[8] Deep learning algorithms can be applied to unsupervised learning tasks. This is an important benefit because unlabeled data is more abundant than the labeled data. Examples of deep structures that can be trained in an unsupervised manner are deep belief networks.[8][12] The term deep learning was introduced to the machine learning community by Rina Dechter in 1986,[13] and to artificial neural networks by Igor Aizenberg and colleagues in 2000, in the context of Boolean threshold neurons.[14][15] Although the history of its appearance is apparently more complicated.[16] Deep neural networks are generally interpreted in terms of the universal approximation theorem[17][18][19][20][21] or probabilistic inference.[22][23][8][9][24] The classic universal approximation theorem concerns the capacity of feedforward neural networks with a single hidden layer of finite size to approximate continuous functions.[17][18][19][20] In 1989, the first proof was published by George Cybenko for sigmoid activation functions[17] and was generalised to feed-forward multi-layer architectures in 1991 by Kurt Hornik.[18] Recent work also showed that universal approximation also holds for non-bounded activation functions such as Kunihiko Fukushima's rectified linear unit.[25][26] The universal approximation theorem for deep neural networks concerns the capacity of networks with bounded width but the depth is allowed to grow. Lu et al.[21] proved that if the width of a deep neural network with ReLU activation is strictly larger than the input dimension, then the network can approximate any Lebesgue integrable function; if the width is smaller or equal to the input dimension, then a deep neural network is not a universal approximator. The probabilistic interpretation[24] derives from the field of machine learning. It features inference,[23][7][8][9][12][24] as well as the optimization concepts of training and testing, related to fitting and generalization, respectively. More specifically, the probabilistic interpretation considers the activation nonlinearity as a cumulative distribution function.[24] The probabilistic interpretation led to the introduction of dropout as regularizer in neural networks. The probabilistic interpretation was introduced by researchers including Hopfield, Widrow and Narendra and popularized in surveys such as the one by Bishop.[27] There are two types of artificial neural network (ANN): feedforward neural network (FNN) or multilayer perceptron (MLP) and recurrent neural networks (RNN). RNNs have cycles in their connectivity structure, FNNs don't. In the 1920s, Wilhelm Lenz and Ernst Ising created the Ising model[28][29] which is essentially a non-learning RNN architecture consisting of neuron-like threshold elements. In 1972, Shun'ichi Amari made this architecture adaptive.[30][31] His learning RNN was republished by John Hopfield in 1982.[32] Other early recurrent neural networks were published by Kaoru Nakano in 1971.[33][34] Already in 1948, Alan Turing produced work on \"Intelligent Machinery\"  that was not published in his lifetime,[35] containing \"ideas related to artificial evolution and learning RNNs\".[31] Frank Rosenblatt (1958)[36] proposed the perceptron, an MLP with 3 layers: an input layer, a hidden layer with randomized weights that did not learn, and an output layer. He later published a 1962 book that also introduced variants and computer experiments, including a version with four-layer perceptrons \"with adaptive preterminal networks\" where the last two layers have learned weights (here he credits H. D. Block and B. W. Knight).[37]: section 16  The book cites an earlier network by R. D. Joseph (1960)[38] \"functionally equivalent to a variation of\" this four-layer system (the book mentions Joseph over 30 times). Should Joseph therefore be considered the originator of proper adaptive multilayer perceptrons with learning hidden units? Unfortunately, the learning algorithm was not a functional one, and fell into oblivion. The first working deep learning algorithm was the Group method of data handling, a method to train arbitrarily deep neural networks, published by Alexey Ivakhnenko and Lapa in 1965. They regarded it as a form of polynomial regression,[39] or a generalization of Rosenblatt's perceptron to handle more complex, nonlinear, and hierarchical relationships.[40] A 1971 paper described a deep network with eight layers trained by this method,[41] which is based on layer by layer training through regression analysis. Superfluous hidden units are pruned using a separate validation set. Since the activation functions of the nodes are Kolmogorov-Gabor polynomials, these were also the first deep networks with multiplicative units or \"gates\".[31] The first deep learning multilayer perceptron trained by stochastic gradient descent[42] was published in 1967 by Shun'ichi Amari.[43] In computer experiments conducted by Amari's student Saito, a five layer MLP with two modifiable layers learned  internal representations to classify non-linearily separable pattern classes.[31] Subsequent developments in hardware and hyperparameter tunings have made end-to-end stochastic gradient descent the currently dominant training technique. In 1969, Kunihiko Fukushima introduced the ReLU (rectified linear unit) activation function.[25][31] The rectifier has become the most popular activation function for deep learning.[44] Deep learning architectures for convolutional neural networks (CNNs) with convolutional layers and downsampling layers began with the Neocognitron introduced by Kunihiko Fukushima in 1979, though not trained by backpropagation.[45][46] Backpropagation is an efficient application of the chain rule derived by Gottfried Wilhelm Leibniz in 1673[47] to networks of differentiable nodes. The terminology \"back-propagating errors\" was actually introduced in 1962 by Rosenblatt,[37] but he did not know how to implement this, although Henry J. Kelley had a continuous precursor of backpropagation in 1960 in the context of control theory.[48] The modern form of backpropagation was first published in Seppo Linnainmaa's master thesis (1970).[49][50][31] G.M. Ostrovski et al. republished it in 1971.[51][52] Paul Werbos applied backpropagation to neural networks in 1982[53] (his 1974 PhD thesis, reprinted in a 1994 book,[54] did not yet describe the algorithm[52]). In 1986, David E. Rumelhart et al. popularised backpropagation but did not cite the original work.[55][56] The time delay neural network (TDNN) was introduced in 1987 by Alex Waibel to apply CNN to phoneme recognition. It used convolutions, weight sharing, and backpropagation.[57][58]  In 1988, Wei Zhang applied a backpropagation-trained CNN to alphabet recognition.[59] \nIn 1989, Yann LeCun et al. created a CNN called LeNet for recognizing handwritten ZIP codes on mail. Training required 3 days.[60] In 1990, Wei Zhang implemented a CNN on optical computing hardware.[61] In 1991, a CNN was applied to medical image object segmentation[62] and breast cancer detection in mammograms.[63] LeNet-5 (1998), a 7-level CNN by Yann LeCun et al., that classifies digits, was applied by several banks to recognize hand-written numbers on checks  digitized in 32x32 pixel images.[64] Recurrent neural networks (RNN)[28][30] were further developed in the 1980s. Recurrence is used for sequence processing, and when a recurrent network is unrolled, it mathematically resembles a deep feedforward layer. Consequently, they have similar properties and issues, and their developments had mutual influences. In RNN, two early influential works were the Jordan network (1986)[65] and the Elman network (1990),[66] which applied RNN to study problems in cognitive psychology. In the 1980s, backpropagation did not work well for deep learning with long credit assignment paths. To overcome this problem, in 1991, Jürgen Schmidhuber proposed a hierarchy of RNNs pre-trained one level at a time by self-supervised learning where each RNN tries to predict its own next input, which is the next unexpected input of the RNN below.[67][68] This \"neural history compressor\" uses predictive coding  to learn internal representations at multiple self-organizing time scales. This can substantially facilitate downstream deep learning. The RNN hierarchy can be collapsed into a single RNN, by  distilling a higher level chunker network into a lower level automatizer network.[67][68][31] In 1993, a neural history compressor solved a \"Very Deep Learning\" task that required more than 1000 subsequent layers in an RNN unfolded in time.[69] The \"P\" in ChatGPT refers to such pre-training. Sepp Hochreiter's diploma thesis (1991)[70] implemented the neural history compressor,[67] and identified and analyzed the vanishing gradient problem.[70][71]  Hochreiter proposed recurrent residual connections to solve the vanishing gradient problem. This led to the long short-term memory (LSTM), published in 1995.[72] LSTM can learn \"very deep learning\" tasks[9] with long credit assignment paths that require memories of events that happened thousands of discrete time steps before. That LSTM was not yet the modern architecture, which required a \"forget gate\", introduced in 1999,[73] which became the standard RNN architecture. In 1991, Jürgen Schmidhuber also published adversarial neural networks that contest with each other in the form of a zero-sum game, where one network's gain is the other network's loss.[74][75] The first network is a generative model that models a probability distribution over output patterns. The second network learns by gradient descent to predict the reactions of the environment to these patterns. This was called \"artificial curiosity\". In 2014, this principle was used in generative adversarial networks (GANs).[76] During 1985–1995, inspired by statistical mechanics, several architectures and methods were developed by Terry Sejnowski, Peter Dayan, Geoffrey Hinton, etc., including the Boltzmann machine,[77] restricted Boltzmann machine,[78] Helmholtz machine,[79] and the wake-sleep algorithm.[80] These were designed for unsupervised learning of deep generative models. However, those were more computationally expensive compared to backpropagation. Boltzmann machine learning algorithm, published in 1985, was briefly popular before being eclipsed by the backpropagation algorithm in 1986. (p. 112 [81]). A 1988 network became state of the art in protein structure prediction, an early application of deep learning to bioinformatics.[82] Both shallow and deep learning (e.g., recurrent nets) of ANNs for speech recognition have been explored for many years.[83][84][85] These methods never outperformed non-uniform internal-handcrafting Gaussian mixture model/Hidden Markov model (GMM-HMM) technology based on generative models of speech trained discriminatively.[86] Key difficulties have been analyzed, including gradient diminishing[70] and weak temporal correlation structure in neural predictive models.[87][88] Additional difficulties were the lack of training data and limited computing power. Most speech recognition researchers moved away from neural nets to pursue generative modeling. An exception was at SRI International in the late 1990s. Funded by the US government's NSA and DARPA, SRI researched in speech and speaker recognition. The speaker recognition team led by Larry Heck reported significant success with deep neural networks in speech processing in the 1998 NIST Speaker Recognition benchmark.[89][90] It was deployed in the Nuance Verifier, representing the first major industrial application of deep learning.[91] The principle of elevating \"raw\" features over hand-crafted optimization was first explored successfully in the architecture of deep autoencoder on the \"raw\" spectrogram or linear filter-bank features in the late 1990s,[90] showing its superiority over the Mel-Cepstral features that contain stages of fixed transformation from spectrograms. The raw features of speech, waveforms, later produced excellent larger-scale results.[92] Neural networks entered a lull, and simpler models that use task-specific handcrafted features such as Gabor filters and support vector machines (SVMs) became the preferred choices in the 1990s and 2000s, because of artificial neural networks' computational cost and a lack of understanding of how the brain wires its biological networks.[citation needed] In 2003, LSTM became competitive with traditional speech recognizers on certain tasks.[93] In 2006, Alex Graves, Santiago Fernández, Faustino Gomez, and Schmidhuber combined it with connectionist temporal classification (CTC)[94] in stacks of LSTMs.[95] In 2009, it became the first RNN to win a pattern recognition contest, in connected handwriting recognition.[96][9] In 2006, publications by Geoff Hinton, Ruslan Salakhutdinov, Osindero and Teh[97][98] deep belief networks were developed for generative modeling. They are trained by training one restricted Boltzmann machine, then freezing it and training another one on top of the first one, and so on, then optionally fine-tuned using supervised backpropagation.[99] They could model high-dimensional probability distributions, such as the distribution of MNIST images, but convergence was slow.[100][101][102] The impact of deep learning in industry began in the early 2000s, when CNNs already processed an estimated 10% to 20% of all the checks written in the US, according to Yann LeCun.[103] Industrial applications of deep learning to large-scale speech recognition started around 2010. The 2009 NIPS Workshop on Deep Learning for Speech Recognition was motivated by the limitations of deep generative models of speech, and the possibility that given more capable hardware and large-scale data sets that deep neural nets might become practical. It was believed that pre-training DNNs using generative models of deep belief nets (DBN) would overcome the main difficulties of neural nets. However, it was discovered that replacing pre-training with large amounts of training data for straightforward backpropagation when using DNNs with large, context-dependent output layers produced error rates dramatically lower than then-state-of-the-art Gaussian mixture model (GMM)/Hidden Markov Model (HMM) and also than more-advanced generative model-based systems.[104] The nature of the recognition errors produced by the two types of systems was characteristically different,[105] offering technical insights into how to integrate deep learning into the existing highly efficient, run-time speech decoding system deployed by all major speech recognition systems.[23][106][107] Analysis around 2009–2010, contrasting the GMM (and other generative speech models) vs. DNN models, stimulated early industrial investment in deep learning for speech recognition.[105]  That analysis was done with comparable performance (less than 1.5% in error rate) between discriminative DNNs and generative models.[104][105][108]\nIn 2010, researchers extended deep learning from TIMIT to large vocabulary speech recognition, by adopting large output layers of the DNN based on context-dependent HMM states constructed by decision trees.[109][110][111][106] The deep learning revolution started around CNN- and GPU-based computer vision. Although CNNs trained by backpropagation had been around for decades and GPU implementations of NNs for years,[112] including CNNs,[113] faster implementations of CNNs on GPUs were needed to progress on computer vision. Later, as deep learning becomes widespread, specialized hardware and algorithm optimizations were developed specifically for deep learning.[114] A key advance for the deep learning revolution was hardware advances, especially GPU. Some early work dated back to 2004.[112][113] In 2009, Raina, Madhavan, and Andrew Ng reported a 100M deep belief network trained on 30 Nvidia GeForce GTX 280 GPUs, an early demonstration of GPU-based deep learning. They reported up to 70 times faster training.[115] In 2011, a CNN named DanNet[116][117] by Dan Ciresan, Ueli Meier, Jonathan Masci, Luca Maria Gambardella, and Jürgen Schmidhuber achieved for the first time superhuman performance in a visual pattern recognition contest, outperforming traditional methods by a factor of 3.[9] It then won more contests.[118][119] They also showed how max-pooling CNNs on GPU improved performance significantly.[3] In 2012, Andrew Ng and Jeff Dean created an FNN that learned to recognize higher-level concepts, such as cats, only from watching unlabeled images taken from YouTube videos.[120] In October 2012, AlexNet by Alex Krizhevsky, Ilya Sutskever, and Geoffrey Hinton[4] won the large-scale ImageNet competition by a significant margin over shallow machine learning methods. Further incremental improvements included the VGG-16 network by Karen Simonyan and Andrew Zisserman[121] and Google's Inceptionv3.[122] The success in image classification was then extended to the more challenging task of generating descriptions (captions) for images, often as a combination of CNNs and LSTMs.[123][124][125] In 2014, the state of the art was training “very deep neural network” with 20 to 30 layers.[126] Stacking too many layers led to a steep reduction in training accuracy,[127] known as the \"degradation\" problem.[128] In 2015, two techniques were developed to train very deep networks: the Highway Network was published in May 2015, and the residual neural network (ResNet)[129] in Dec 2015. ResNet behaves like an open-gated Highway Net. Around the same time, deep learning started impacting the field of art. Early examples included Google DeepDream (2015), and neural style transfer (2015),[130] both of which were based on pretrained image classification neural networks, such as VGG-19. Generative adversarial network (GAN) by (Ian Goodfellow et al., 2014)[131] (based on  Jürgen Schmidhuber's principle of artificial curiosity[74][76])\nbecame state of the art in generative modeling during 2014-2018 period. Excellent image quality is achieved by Nvidia's StyleGAN (2018)[132] based on the Progressive GAN by Tero Karras et al.[133] Here the GAN generator is grown from small to large scale in a pyramidal fashion. Image generation by GAN reached popular success, and provoked discussions concerning deepfakes.[134] Diffusion models (2015)[135] eclipsed GANs in generative modeling since then, with systems such as DALL·E 2 (2022) and Stable Diffusion (2022). In 2015, Google's speech recognition improved by 49% by an LSTM-based model, which they made available through Google Voice Search on smartphone.[136][137] Deep learning is part of state-of-the-art systems in various disciplines, particularly computer vision and automatic speech recognition (ASR). Results on commonly used evaluation sets such as TIMIT (ASR) and MNIST (image classification), as well as a range of large-vocabulary speech recognition tasks have steadily improved.[104][138] Convolutional neural networks were superseded for ASR by LSTM.[137][139][140][141] but are more successful in computer vision. Yoshua Bengio, Geoffrey Hinton and Yann LeCun were awarded the 2018 Turing Award for \"conceptual and engineering breakthroughs that have made deep neural networks a critical component of computing\".[142] Artificial neural networks (ANNs) or connectionist systems are computing systems inspired by the biological neural networks that constitute animal brains. Such systems learn (progressively improve their ability) to do tasks by considering examples, generally without task-specific programming. For example, in image recognition, they might learn to identify images that contain cats by analyzing example images that have been manually labeled as \"cat\" or \"no cat\" and using the analytic results to identify cats in other images. They have found most use in applications difficult to express with a traditional computer algorithm using rule-based programming. An ANN is based on a collection of connected units called artificial neurons, (analogous to biological neurons in a biological brain). Each connection (synapse) between neurons can transmit a signal to another neuron. The receiving (postsynaptic) neuron can process the signal(s) and then signal downstream neurons connected to it. Neurons may have state, generally represented by real numbers, typically between 0 and 1. Neurons and synapses may also have a weight that varies as learning proceeds, which can increase or decrease the strength of the signal that it sends downstream. Typically, neurons are organized in layers. Different layers may perform different kinds of transformations on their inputs. Signals travel from the first (input), to the last (output) layer, possibly after traversing the layers multiple times. The original goal of the neural network approach was to solve problems in the same way that a human brain would. Over time, attention focused on matching specific mental abilities, leading to deviations from biology such as backpropagation, or passing information in the reverse direction and adjusting the network to reflect that information. Neural networks have been used on a variety of tasks, including computer vision, speech recognition, machine translation, social network filtering, playing board and video games and medical diagnosis. As of 2017, neural networks typically have a few thousand to a few million units and millions of connections. Despite this number being several order of magnitude less than the number of neurons on a human brain, these networks can perform many tasks at a level beyond that of humans (e.g., recognizing faces, or playing \"Go\"[144]). A deep neural network (DNN) is an artificial neural network with multiple layers between the input and output layers.[7][9] There are different types of neural networks but they always consist of the same components: neurons, synapses, weights, biases, and functions.[145] These components as a whole function in a way that mimics functions of the human brain, and can be trained like any other ML algorithm.[citation needed] For example, a DNN that is trained to recognize dog breeds will go over the given image and calculate the probability that the dog in the image is a certain breed. The user can review the results and select which probabilities the network should display (above a certain threshold, etc.) and return the proposed label. Each mathematical manipulation as such is considered a layer, [146] and complex DNN have many layers, hence the name \"deep\" networks. DNNs can model complex non-linear relationships. DNN architectures generate compositional models where the object is expressed as a layered composition of primitives.[147] The extra layers enable composition of features from lower layers, potentially modeling complex data with fewer units than a similarly performing shallow network.[7] For instance, it was proved that sparse multivariate polynomials are exponentially easier to approximate with DNNs than with shallow networks.[148] Deep architectures include many variants of a few basic approaches. Each architecture has found success in specific domains. It is not always possible to compare the performance of multiple architectures, unless they have been evaluated on the same data sets.[146] DNNs are typically feedforward networks in which data flows from the input layer to the output layer without looping back. At first, the DNN creates a map of virtual neurons and assigns random numerical values, or \"weights\", to connections between them. The weights and inputs are multiplied and return an output between 0 and 1. If the network did not accurately recognize a particular pattern, an algorithm would adjust the weights.[149] That way the algorithm can make certain parameters more influential, until it determines the correct mathematical manipulation to fully process the data. Recurrent neural networks, in which data can flow in any direction, are used for applications such as language modeling.[150][151][152][153][154] Long short-term memory is particularly effective for this use.[155][156] Convolutional neural networks (CNNs) are used in computer vision.[157] CNNs also have been applied to acoustic modeling for automatic speech recognition (ASR).[158] As with ANNs, many issues can arise with naively trained DNNs. Two common issues are overfitting and computation time. DNNs are prone to overfitting because of the added layers of abstraction, which allow them to model rare dependencies in the training data. Regularization methods such as Ivakhnenko's unit pruning[41] or weight decay (\n\n\n\n\nℓ\n\n2\n\n\n\n\n{\\displaystyle \\ell _{2}}\n\n-regularization) or sparsity (\n\n\n\n\nℓ\n\n1\n\n\n\n\n{\\displaystyle \\ell _{1}}\n\n-regularization) can be applied during training to combat overfitting.[159] Alternatively dropout regularization randomly omits units from the hidden layers during training. This helps to exclude rare dependencies.[160] Another interesting recent development is research into models of just enough complexity through an estimation of the intrinsic complexity of the task being modelled. This approach has been successfully applied for multivariate time series prediction tasks such as traffic prediction.[161] Finally, data can be augmented via methods such as cropping and rotating such that smaller training sets can be increased in size to reduce the chances of overfitting.[162] DNNs must consider many training parameters, such as the size (number of layers and number of units per layer), the learning rate, and initial weights. Sweeping through the parameter space for optimal parameters may not be feasible due to the cost in time and computational resources. Various tricks, such as batching (computing the gradient on several training examples at once rather than individual examples)[163] speed up computation. Large processing capabilities of many-core architectures (such as GPUs or the Intel Xeon Phi) have produced significant speedups in training, because of the suitability of such processing architectures for the matrix and vector computations.[164][165] Alternatively, engineers may look for other types of neural networks with more straightforward and convergent training algorithms. CMAC (cerebellar model articulation controller) is one such kind of neural network. It doesn't require learning rates or randomized initial weights. The training process can be guaranteed to converge in one step with a new batch of data, and the computational complexity of the training algorithm is linear with respect to the number of neurons involved.[166][167] Since the 2010s, advances in both machine learning algorithms and computer hardware have led to more efficient methods for training deep neural networks that contain many layers of non-linear hidden units and a very large output layer.[168] By 2019, graphics processing units (GPUs), often with AI-specific enhancements, had displaced CPUs as the dominant method for training large-scale commercial cloud AI .[169] OpenAI estimated the hardware computation used in the largest deep learning projects from AlexNet (2012) to AlphaZero (2017) and found a 300,000-fold increase in the amount of computation required, with a doubling-time trendline of 3.4 months.[170][171] Special electronic circuits called deep learning processors were designed to speed up deep learning algorithms. Deep learning processors include neural processing units (NPUs) in Huawei cellphones[172] and cloud computing servers such as tensor processing units (TPU) in the Google Cloud Platform.[173] Cerebras Systems has also built a dedicated system to handle large deep learning models, the CS-2, based on the largest processor in the industry, the second-generation Wafer Scale Engine (WSE-2).[174][175] Atomically thin semiconductors are considered promising for energy-efficient deep learning hardware where the same basic device structure is used for both logic operations and data storage.\nIn 2020, Marega et al. published experiments with a large-area active channel material for developing logic-in-memory devices and circuits based on floating-gate field-effect transistors (FGFETs).[176] In 2021, J. Feldmann et al. proposed an integrated photonic hardware accelerator for parallel convolutional processing.[177] The authors identify two key advantages of integrated photonics over its electronic counterparts: (1) massively parallel data transfer through wavelength division multiplexing in conjunction with frequency combs, and (2) extremely high data modulation speeds.[177] Their system can execute trillions of multiply-accumulate operations per second, indicating the potential of integrated photonics in data-heavy AI applications.[177] Large-scale automatic speech recognition is the first and most convincing successful case of deep learning. LSTM RNNs can learn \"Very Deep Learning\" tasks[9] that involve multi-second intervals containing speech events separated by thousands of discrete time steps, where one time step corresponds to about 10 ms. LSTM with forget gates[156] is competitive with traditional speech recognizers on certain tasks.[93] The initial success in speech recognition was based on small-scale recognition tasks based on TIMIT. The data set contains 630 speakers from eight major dialects of American English, where each speaker reads 10 sentences.[178] Its small size lets many configurations be tried. More importantly, the TIMIT task concerns phone-sequence recognition, which, unlike word-sequence recognition, allows weak phone bigram language models. This lets the strength of the acoustic modeling aspects of speech recognition be more easily analyzed. The error rates listed below, including these early results and measured as percent phone error rates (PER), have been summarized since 1991. The debut of DNNs for speaker recognition in the late 1990s and speech recognition around 2009-2011 and of LSTM around 2003–2007, accelerated progress in eight major areas:[23][108][106] More recent speech recognition models use Transformers or Temporal Convolution Networks with significant success and widespread applications.[183][184][185] All major commercial speech recognition systems (e.g., Microsoft Cortana, Xbox, Skype Translator, Amazon Alexa, Google Now, Apple Siri, Baidu and iFlyTek voice search, and a range of Nuance speech products, etc.) are based on deep learning.[23][186][187] A common evaluation set for image classification is the MNIST database data set. MNIST is composed of handwritten digits and includes 60,000 training examples and 10,000 test examples. As with TIMIT, its small size lets users test multiple configurations. A comprehensive list of results on this set is available.[188] Deep learning-based image recognition has become \"superhuman\", producing more accurate results than human contestants. This first occurred in 2011 in recognition of traffic signs, and in 2014, with recognition of human faces.[189][190] Deep learning-trained vehicles now interpret 360° camera views.[191] Another example is Facial Dysmorphology Novel Analysis (FDNA) used to analyze cases of human malformation connected to a large database of genetic syndromes. Closely related to the progress that has been made in image recognition is the increasing application of deep learning techniques to various visual art tasks. DNNs have proven themselves capable, for example, of Neural networks have been used for implementing language models since the early 2000s.[150] LSTM helped to improve machine translation and language modeling.[151][152][153] Other key techniques in this field are negative sampling[194] and word embedding. Word embedding, such as word2vec, can be thought of as a representational layer in a deep learning architecture that transforms an atomic word into a positional representation of the word relative to other words in the dataset; the position is represented as a point in a vector space. Using word embedding as an RNN input layer allows the network to parse sentences and phrases using an effective compositional vector grammar. A compositional vector grammar can be thought of as probabilistic context free grammar (PCFG) implemented by an RNN.[195] Recursive auto-encoders built atop word embeddings can assess sentence similarity and detect paraphrasing.[195] Deep neural architectures provide the best results for constituency parsing,[196] sentiment analysis,[197] information retrieval,[198][199] spoken language understanding,[200] machine translation,[151][201] contextual entity linking,[201] writing style recognition,[202] named-entity recognition (token classification),[203] text classification, and others.[204] Recent developments generalize word embedding to sentence embedding. Google Translate (GT) uses a large end-to-end long short-term memory (LSTM) network.[205][206][207][208] Google Neural Machine Translation (GNMT) uses an example-based machine translation method in which the system \"learns from millions of examples\".[206] It translates \"whole sentences at a time, rather than pieces\". Google Translate supports over one hundred languages.[206] The network encodes the \"semantics of the sentence rather than simply memorizing phrase-to-phrase translations\".[206][209] GT uses English as an intermediate between most language pairs.[209] A large percentage of candidate drugs fail to win regulatory approval. These failures are caused by insufficient efficacy (on-target effect), undesired interactions (off-target effects), or unanticipated toxic effects.[210][211] Research has explored use of deep learning to predict the biomolecular targets,[212][213] off-targets, and toxic effects of environmental chemicals in nutrients, household products and drugs.[214][215][216] AtomNet is a deep learning system for structure-based rational drug design.[217] AtomNet was used to predict novel candidate biomolecules for disease targets such as the Ebola virus[218] and multiple sclerosis.[219][218] In 2017 graph neural networks were used for the first time to predict various properties of molecules in a large toxicology data set.[220] In 2019, generative neural networks were used to produce molecules that were validated experimentally all the way into mice.[221][222] Deep reinforcement learning has been used to approximate the value of possible direct marketing actions, defined in terms of RFM variables. The estimated value function was shown to have a natural interpretation as customer lifetime value.[223] Recommendation systems have used deep learning to extract meaningful features for a latent factor model for content-based music and journal recommendations.[224][225] Multi-view deep learning has been applied for learning user preferences from multiple domains.[226] The model uses a hybrid collaborative and content-based approach and enhances recommendations in multiple tasks. An autoencoder ANN was used in bioinformatics, to predict gene ontology annotations and gene-function relationships.[227] In medical informatics, deep learning was used to predict sleep quality based on data from wearables[228] and predictions of health complications from electronic health record data.[229] Deep neural networks have shown unparalleled performance in predicting protein structure, according to the sequence of the amino acids that make it up. In 2020, AlphaFold, a deep-learning based system, achieved a level of accuracy significantly higher than all previous computational methods.[230][231] Deep neural networks can be used to estimate the entropy of a stochastic process and called Neural Joint Entropy Estimator (NJEE).[232] Such an estimation provides insights on the effects of input random variables on an independent random variable. Practically, the DNN is trained as a classifier that maps an input vector or matrix X to an output probability distribution over the possible classes of random variable Y, given input X. For example, in image classification tasks, the NJEE maps a vector of pixels' color values to probabilities over possible image classes. In practice, the probability distribution of Y is obtained by a Softmax layer with number of nodes that is equal to the alphabet size of Y. NJEE uses continuously differentiable activation functions, such that the conditions for the universal approximation theorem holds. It is shown that this method provides a strongly consistent estimator and outperforms other methods in case of large alphabet sizes.[232] Deep learning has been shown to produce competitive results in medical application such as cancer cell classification, lesion detection, organ segmentation and image enhancement.[233][234] Modern deep learning tools demonstrate the high accuracy of detecting various diseases and the helpfulness of their use by specialists to improve the diagnosis efficiency.[235][236] Finding the appropriate mobile audience for mobile advertising is always challenging, since many data points must be considered and analyzed before a target segment can be created and used in ad serving by any ad server.[237] Deep learning has been used to interpret large, many-dimensioned advertising datasets. Many data points are collected during the request/serve/click internet advertising cycle. This information can form the basis of machine learning to improve ad selection. Deep learning has been successfully applied to inverse problems such as denoising, super-resolution, inpainting, and film colorization.[238] These applications include learning methods such as \"Shrinkage Fields for Effective Image Restoration\"[239] which trains on an image dataset, and Deep Image Prior, which trains on the image that needs restoration. Deep learning is being successfully applied to financial fraud detection, tax evasion detection,[240] and anti-money laundering.[241] In November 2023, researchers at Google DeepMind and Lawrence Berkeley National Laboratory announced that they had developed an AI system known as GNoME. This system has contributed to materials science by discovering over 2 million new materials within a relatively short timeframe. GNoME employs deep learning techniques to efficiently explore potential material structures, achieving a significant increase in the identification of stable inorganic crystal structures. The system's predictions were validated through autonomous robotic experiments, demonstrating a noteworthy success rate of 71%. The data of newly discovered materials is publicly available through the Materials Project database, offering researchers the opportunity to identify materials with desired properties for various applications. This development has implications for the future of scientific discovery and the integration of AI in material science research, potentially expediting material innovation and reducing costs in product development. The use of AI and deep learning suggests the possibility of minimizing or eliminating manual lab experiments and allowing scientists to focus more on the design and analysis of unique compounds.[242][243][244] The United States Department of Defense applied deep learning to train robots in new tasks through observation.[245] Physics informed neural networks have been used to solve partial differential equations in both forward and inverse problems in a data driven manner.[246] One example is the reconstructing fluid flow governed by the Navier-Stokes equations. Using physics informed neural networks does not require the often expensive mesh generation that conventional CFD methods rely on.[247][248] Deep backward stochastic differential equation method is a numerical method that combines deep learning with Backward stochastic differential equation (BSDE). This method is particularly useful for solving high-dimensional problems in financial mathematics. By leveraging the powerful function approximation capabilities of deep neural networks, deep BSDE addresses the computational challenges faced by traditional numerical methods in high-dimensional settings. Specifically, traditional methods like finite difference methods or Monte Carlo simulations often struggle with the curse of dimensionality, where computational cost increases exponentially with the number of dimensions. Deep BSDE methods, however, employ deep neural networks to approximate solutions of high-dimensional partial differential equations (PDEs), effectively reducing the computational burden.[249] In addition, the integration of Physics-informed neural networks (PINNs) into the deep BSDE framework enhances its capability by embedding the underlying physical laws directly into the neural network architecture. This ensures that the solutions not only fit the data but also adhere to the governing stochastic differential equations. PINNs leverage the power of deep learning while respecting the constraints imposed by the physical models, resulting in more accurate and reliable solutions for financial mathematics problems. Image reconstruction is the reconstruction of the underlying images from the image-related measurements. Several works showed the better and superior performance of the deep learning methods compared to analytical methods for various applications, e.g., spectral imaging [250] and ultrasound imaging.[251] Traditional weather prediction systems solve a very complex system of partial differential equations. GraphCast is a deep learning based model, trained on a long history of weather data to predict how weather patterns change over time. It is able to  predict weather conditions for up to 10 days globally, at a very detailed level, and in under a minute, with precision similar to state of the art systems.[252][253] An epigenetic clock is a biochemical test that can be used to measure age. Galkin et al. used deep neural networks to train an epigenetic aging clock of unprecedented accuracy using >6,000 blood samples.[254] The clock uses information from 1000 CpG sites and predicts people with certain conditions older than healthy controls: IBD, frontotemporal dementia, ovarian cancer, obesity. The aging clock was planned to be released for public use in 2021 by an Insilico Medicine spinoff company Deep Longevity. Deep learning is closely related to a class of theories of brain development (specifically, neocortical development) proposed by cognitive neuroscientists in the early 1990s.[255][256][257][258] These developmental theories were instantiated in computational models, making them predecessors of deep learning systems. These developmental models share the property that various proposed learning dynamics in the brain (e.g., a wave of nerve growth factor) support the self-organization somewhat analogous to the neural networks utilized in deep learning models. Like the neocortex, neural networks employ a hierarchy of layered filters in which each layer considers information from a prior layer (or the operating environment), and then passes its output (and possibly the original input), to other layers. This process yields a self-organizing stack of transducers, well-tuned to their operating environment. A 1995 description stated, \"...the infant's brain seems to organize itself under the influence of waves of so-called trophic-factors ... different regions of the brain become connected sequentially, with one layer of tissue maturing before another and so on until the whole brain is mature\".[259] A variety of approaches have been used to investigate the plausibility of deep learning models from a neurobiological perspective. On the one hand, several variants of the backpropagation algorithm have been proposed in order to increase its processing realism.[260][261] Other researchers have argued that unsupervised forms of deep learning, such as those based on hierarchical generative models and deep belief networks, may be closer to biological reality.[262][263] In this respect, generative neural network models have been related to neurobiological evidence about sampling-based processing in the cerebral cortex.[264] Although a systematic comparison between the human brain organization and the neuronal encoding in deep networks has not yet been established, several analogies have been reported. For example, the computations performed by deep learning units could be similar to those of actual neurons[265] and neural populations.[266] Similarly, the representations developed by deep learning models are similar to those measured in the primate visual system[267] both at the single-unit[268] and at the population[269] levels. Facebook's AI lab performs tasks such as automatically tagging uploaded pictures with the names of the people in them.[270] Google's DeepMind Technologies developed a system capable of learning how to play Atari video games using only pixels as data input. In 2015 they demonstrated their AlphaGo system, which learned the game of Go well enough to beat a professional Go player.[271][272][273] Google Translate uses a neural network to translate between more than 100 languages. In 2017, Covariant.ai was launched, which focuses on integrating deep learning into factories.[274] As of 2008,[275] researchers at The University of Texas at Austin (UT) developed a machine learning framework called Training an Agent Manually via Evaluative Reinforcement, or TAMER, which proposed new methods for robots or computer programs to learn how to perform tasks by interacting with a human instructor.[245] First developed as TAMER, a new algorithm called Deep TAMER was later introduced in 2018 during a collaboration between U.S. Army Research Laboratory (ARL) and UT researchers. Deep TAMER used deep learning to provide a robot with the ability to learn new tasks through observation.[245] Using Deep TAMER, a robot learned a task with a human trainer, watching video streams or observing a human perform a task in-person. The robot later practiced the task with the help of some coaching from the trainer, who provided feedback such as \"good job\" and \"bad job\".[276] Deep learning has attracted both criticism and comment, in some cases from outside the field of computer science. A main criticism concerns the lack of theory surrounding some methods.[277] Learning in the most common deep architectures is implemented using well-understood gradient descent. However, the theory surrounding other algorithms, such as contrastive divergence is less clear.[citation needed] (e.g., Does it converge? If so, how fast? What is it approximating?) Deep learning methods are often looked at as a black box, with most confirmations done empirically, rather than theoretically.[278] In further reference to the idea that artistic sensitivity might be inherent in relatively low levels of the cognitive hierarchy, a published series of graphic representations of the internal states of deep (20-30 layers) neural networks attempting to discern within essentially random data the images on which they were trained[279] demonstrate a visual appeal: the original research notice received well over 1,000 comments, and was the subject of what was for a time the most frequently accessed article on The Guardian's[280] website. Furthermore, some researchers have argued that standard loss functions and differentiable architectures in deep learning may limit the discovery of deeper causal or generative mechanisms.[281] Building on Algorithmic information theory (AIT), Hernández-Orozco et al. (2021)[282] proposed an algorithmic loss function to measure the discrepancy between predicted and observed system behavior. Their approach integrates AIT with Machine learning to formulate a framework for learning generative rules in non-differentiable spaces, bridging discrete algorithmic theory with continuous optimization techniques. This framework provides a new perspective on generalization and model interpretability by grounding learning dynamics in algorithmic complexity. [283] [284] Some deep learning architectures display problematic behaviors,[285] such as confidently classifying unrecognizable images as belonging to a familiar category of ordinary images (2014)[286] and misclassifying minuscule perturbations of correctly classified images (2013).[287] Goertzel hypothesized that these behaviors are due to limitations in their internal representations and that these limitations would inhibit integration into heterogeneous multi-component artificial general intelligence (AGI) architectures.[285] These issues may possibly be addressed by deep learning architectures that internally form states homologous to image-grammar[288] decompositions of observed entities and events.[285] Learning a grammar (visual or linguistic) from training data would be equivalent to restricting the system to commonsense reasoning that operates on concepts in terms of grammatical production rules and is a basic goal of both human language acquisition[289] and artificial intelligence (AI).[290] As deep learning moves from the lab into the world, research and experience show that artificial neural networks are vulnerable to hacks and deception.[291] By identifying patterns that these systems use to function, attackers can modify inputs to ANNs in such a way that the ANN finds a match that human observers would not recognize. For example, an attacker can make subtle changes to an image such that the ANN finds a match even though the image looks to a human nothing like the search target. Such manipulation is termed an \"adversarial attack\".[292] In 2016 researchers used one ANN to doctor images in trial and error fashion, identify another's focal points, and thereby generate images that deceived it. The modified images looked no different to human eyes. Another group showed that printouts of doctored images then photographed successfully tricked an image classification system.[293] One defense is reverse image search, in which a possible fake image is submitted to a site such as TinEye that can then find other instances of it. A refinement is to search using only parts of the image, to identify images from which that piece may have been taken.[294] Another group showed that certain psychedelic spectacles could fool a facial recognition system into thinking ordinary people were celebrities, potentially allowing one person to impersonate another. In 2017 researchers added stickers to stop signs and caused an ANN to misclassify them.[293] ANNs can however be further trained to detect attempts at deception, potentially leading attackers and defenders into an arms race similar to the kind that already defines the malware defense industry. ANNs have been trained to defeat ANN-based anti-malware software by repeatedly attacking a defense with malware that was continually altered by a genetic algorithm until it tricked the anti-malware while retaining its ability to damage the target.[293] In 2016, another group demonstrated that certain sounds could make the Google Now voice command system open a particular web address, and hypothesized that this could \"serve as a stepping stone for further attacks (e.g., opening a web page hosting drive-by malware)\".[293] In \"data poisoning\", false data is continually smuggled into a machine learning system's training set to prevent it from achieving mastery.[293] The deep learning systems that are trained using supervised learning often rely on data that is created or annotated by humans, or both.[295] It has been argued that not only low-paid clickwork (such as on Amazon Mechanical Turk) is regularly deployed for this purpose, but also implicit forms of human microwork that are often not recognized as such.[296] The philosopher Rainer Mühlhoff distinguishes five types of \"machinic capture\" of human microwork to generate training data: (1) gamification (the embedding of annotation or computation tasks in the flow of a game), (2) \"trapping and tracking\" (e.g. CAPTCHAs for image recognition or click-tracking on Google search results pages), (3) exploitation of social motivations (e.g. tagging faces on Facebook to obtain labeled facial images), (4) information mining (e.g. by leveraging quantified-self devices such as activity trackers) and (5) clickwork.[296]"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/WebUbuntu",
    "title": "ð¤·ð½ââï¸ Page not found | Page not found | MDN",
    "content": "Web technology reference for developers Structure of content on the web Code used to describe document style General-purpose scripting language Protocol for transmitting web resources Interfaces for building web applications Developing extensions for web browsers Build web projects usable for all Web technology reference for developers Learn web development Learn web development Learn to structure web content with HTML Learn to style content using CSS Learn to run scripts in the browser Learn to make the web accessible to all A customized MDN experience Get real-time assistance and support All browser compatibility updates at a glance Learn how to use MDN Plus Frequently asked questions about MDN Plus Write, test and share your code Scan a website for free Get real-time assistance and support Go back to the home page Your blueprint for a better internet. Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2025 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://en.wikipedia.org/wiki/Algorithms",
    "title": "Algorithm - Wikipedia",
    "content": "In mathematics and computer science, an algorithm (/ˈælɡərɪðəm/ ⓘ) is a finite sequence of mathematically rigorous instructions, typically used to solve a class of specific problems or to perform a computation.[1] Algorithms are used as specifications for performing calculations and data processing. More advanced algorithms can use conditionals to divert the code execution through various routes (referred to as automated decision-making) and deduce valid inferences (referred to as automated reasoning). In contrast, a heuristic is an approach to solving problems without well-defined correct or optimal results.[2] For example, although social media recommender systems are commonly called \"algorithms\", they actually rely on heuristics as there is no truly \"correct\" recommendation. As an effective method, an algorithm can be expressed within a finite amount of space and time[3] and in a well-defined formal language[4] for calculating a function.[5] Starting from an initial state and initial input (perhaps empty),[6] the instructions describe a computation that, when executed, proceeds through a finite[7] number of well-defined successive states, eventually producing \"output\"[8] and terminating at a final ending state. The transition from one state to the next is not necessarily deterministic; some algorithms, known as randomized algorithms, incorporate random input.[9] Around 825 AD, Persian scientist and polymath Muḥammad ibn Mūsā al-Khwārizmī wrote kitāb al-ḥisāb al-hindī (\"Book of Indian computation\") and kitab al-jam' wa'l-tafriq al-ḥisāb al-hindī (\"Addition and subtraction in Indian arithmetic\"). In the early 12th century, Latin translations of these texts involving the Hindu–Arabic numeral system and arithmetic appeared, for example Liber Alghoarismi de practica arismetrice, attributed to John of Seville, and Liber Algorismi de numero Indorum, attributed to Adelard of Bath.[10] Here, alghoarismi or algorismi is the Latinization of Al-Khwarizmi's name;[1] the text starts with the phrase Dixit Algorismi, or \"Thus spoke Al-Khwarizmi\".[2] The word algorism in English came to mean the use of place-value notation in calculations; it occurs in the Ancrene Wisse from circa 1225.[11] By the time Geoffrey Chaucer wrote The Canterbury Tales in the late 14th century, he used a variant of the same word in describing augrym stones, stones used for place-value calculation.[12][13] In the 15th century, under the influence of the Greek word ἀριθμός (arithmos, \"number\"; cf. \"arithmetic\"), the Latin word was altered to algorithmus.[14] By 1596, this form of the word was used in English, as algorithm, by Thomas Hood.[15] One informal definition is \"a set of rules that precisely defines a sequence of operations\",[16] which would include all computer programs (including programs that do not perform numeric calculations), and any prescribed bureaucratic procedure[17]\nor cook-book recipe.[18] In general, a program is an algorithm only if it stops eventually[19]—even though infinite loops may sometimes prove desirable. Boolos, Jeffrey & 1974, 1999 define an algorithm to be an explicit set of instructions for determining an output, that can be followed by a computing machine or a human who could only carry out specific elementary operations on symbols.[20] Most algorithms are intended to be implemented as computer programs. However, algorithms are also implemented by other means, such as in a biological neural network (for example, the human brain performing arithmetic or an insect looking for food), in an electrical circuit, or a mechanical device. Step-by-step procedures for solving mathematical problems have been recorded since antiquity. This includes in Babylonian mathematics (around 2500 BC),[21] Egyptian mathematics (around 1550 BC),[21] Indian mathematics (around 800 BC and later),[22][23] the Ifa Oracle (around 500 BC),[24] Greek mathematics (around 240 BC),[25] Chinese mathematics (around 200 BC and later),[26] and Arabic mathematics (around 800 AD).[27] The earliest evidence of algorithms is found in ancient Mesopotamian mathematics. A Sumerian clay tablet found in Shuruppak near Baghdad and dated to c. 2500 BC describes the earliest division algorithm.[21] During the Hammurabi dynasty c. 1800 – c. 1600 BC, Babylonian clay tablets described algorithms for computing formulas.[28] Algorithms were also used in Babylonian astronomy. Babylonian clay tablets describe and employ algorithmic procedures to compute the time and place of significant astronomical events.[29] Algorithms for arithmetic are also found in ancient Egyptian mathematics, dating back to the Rhind Mathematical Papyrus c. 1550 BC.[21] Algorithms were later used in ancient Hellenistic mathematics. Two examples are the Sieve of Eratosthenes, which was described in the Introduction to Arithmetic by Nicomachus,[30][25]: Ch 9.2  and the Euclidean algorithm, which was first described in Euclid's Elements (c. 300 BC).[25]: Ch 9.1 Examples of ancient Indian mathematics included the Shulba Sutras, the Kerala School, and the Brāhmasphuṭasiddhānta.[22] The first cryptographic algorithm for deciphering encrypted code was developed by Al-Kindi, a 9th-century Arab mathematician, in A Manuscript On Deciphering Cryptographic Messages. He gave the first description of cryptanalysis by frequency analysis, the earliest codebreaking algorithm.[27] Bolter credits the invention of the weight-driven clock as \"the key invention [of Europe in the Middle Ages],\" specifically the verge escapement mechanism[31] producing the tick and tock of a mechanical clock. \"The accurate automatic machine\"[32] led immediately to \"mechanical automata\" in the 13th century and \"computational machines\"—the difference and analytical engines of Charles Babbage and Ada Lovelace in the mid-19th century.[33] Lovelace designed the first algorithm intended for processing on a computer, Babbage's analytical engine, which is the first device considered a real Turing-complete computer instead of just a calculator. Although the full implementation of Babbage's second device was not realized for decades after her lifetime, Lovelace has been called \"history's first programmer\". Bell and Newell (1971) write that the Jacquard loom, a precursor to Hollerith cards (punch cards), and \"telephone switching technologies\" led to the development of the first computers.[34] By the mid-19th century, the telegraph, the precursor of the telephone, was in use throughout the world. By the late 19th century, the ticker tape (c. 1870s) was in use, as were Hollerith cards (c. 1890). Then came the teleprinter (c. 1910) with its punched-paper use of Baudot code on tape. Telephone-switching networks of electromechanical relays were invented in 1835. These led to the invention of the digital adding device by George Stibitz in 1937. While working in Bell Laboratories, he observed the \"burdensome\" use of mechanical calculators with gears. \"He went home one evening in 1937 intending to test his idea... When the tinkering was over, Stibitz had constructed a binary adding device\".[35][36] In 1928, a partial formalization of the modern concept of algorithms began with attempts to solve the Entscheidungsproblem (decision problem) posed by David Hilbert. Later formalizations were framed as attempts to define \"effective calculability\"[37] or \"effective method\".[38] Those formalizations included the Gödel–Herbrand–Kleene recursive functions of 1930, 1934 and 1935, Alonzo Church's lambda calculus of 1936, Emil Post's Formulation 1 of 1936, and Alan Turing's Turing machines of 1936–37 and 1939. Algorithms can be expressed in many kinds of notation, including natural languages, pseudocode, flowcharts, drakon-charts, programming languages or control tables (processed by interpreters). Natural language expressions of algorithms tend to be verbose and ambiguous and are rarely used for complex or technical algorithms. Pseudocode, flowcharts, drakon-charts, and control tables are structured expressions of algorithms that avoid common ambiguities of natural language. Programming languages are primarily for expressing algorithms in a computer-executable form but are also used to define or document algorithms. There are many possible representations and Turing machine programs can be expressed as a sequence of machine tables (see finite-state machine, state-transition table, and control table for more), as flowcharts and drakon-charts (see state diagram for more), as a form of rudimentary machine code or assembly code called \"sets of quadruples\", and more. Algorithm representations can also be classified into three accepted levels of Turing machine description: high-level description, implementation description, and formal description.[39] A high-level description describes the qualities of the algorithm itself, ignoring how it is implemented on the Turing machine.[39] An implementation description describes the general manner in which the machine moves its head and stores data to carry out the algorithm, but does not give exact states.[39] In the most detail, a formal description gives the exact state table and list of transitions of the Turing machine.[39] The graphical aid called a flowchart offers a way to describe and document an algorithm (and a computer program corresponding to it). It has four primary symbols: arrows showing program flow, rectangles (SEQUENCE, GOTO), diamonds (IF-THEN-ELSE), and dots (OR-tie). Sub-structures can \"nest\" in rectangles, but only if a single exit occurs from the superstructure. It is often important to know how much time, storage, or other cost an algorithm may require. Methods have been developed for the analysis of algorithms to obtain such quantitative answers (estimates); for example, an algorithm that adds up the elements of a list of n numbers would have a time requirement of ⁠\n\n\n\nO\n(\nn\n)\n\n\n{\\displaystyle O(n)}\n\n⁠, using big O notation. The algorithm only needs to remember two values: the sum of all the elements so far, and its current position in the input list. If the space required to store the input numbers is not counted, it has a space requirement of ⁠\n\n\n\nO\n(\n1\n)\n\n\n{\\displaystyle O(1)}\n\n⁠, otherwise ⁠\n\n\n\nO\n(\nn\n)\n\n\n{\\displaystyle O(n)}\n\n⁠ is required. Different algorithms may complete the same task with a different set of instructions in less or more time, space, or 'effort' than others. For example, a binary search algorithm (with cost ⁠\n\n\n\nO\n(\nlog\n⁡\nn\n)\n\n\n{\\displaystyle O(\\log n)}\n\n⁠) outperforms a sequential search (cost ⁠\n\n\n\nO\n(\nn\n)\n\n\n{\\displaystyle O(n)}\n\n⁠ ) when used for table lookups on sorted lists or arrays. The analysis, and study of algorithms is a discipline of computer science. Algorithms are often studied abstractly, without referencing any specific programming language or implementation. Algorithm analysis resembles other mathematical disciplines as it focuses on the algorithm's properties, not implementation. Pseudocode is typical for analysis as it is a simple and general representation. Most algorithms are implemented on particular hardware/software platforms and their algorithmic efficiency is tested using real code. The efficiency of a particular algorithm may be insignificant for many \"one-off\" problems but it may be critical for algorithms designed for fast interactive, commercial, or long-life scientific usage. Scaling from small n to large n frequently exposes inefficient algorithms that are otherwise benign. Empirical testing is useful for uncovering unexpected interactions that affect performance. Benchmarks may be used to compare before/after potential improvements to an algorithm after program optimization.\nEmpirical tests cannot replace formal analysis, though, and are non-trivial to perform fairly.[40] To illustrate the potential improvements possible even in well-established algorithms, a recent significant innovation, relating to FFT algorithms (used heavily in the field of image processing), can decrease processing time up to 1,000 times for applications like medical imaging.[41] In general, speed improvements depend on special properties of the problem, which are very common in practical applications.[42] Speedups of this magnitude enable computing devices that make extensive use of image processing (like digital cameras and medical equipment) to consume less power. The best case of an algorithm refers to the scenario or input for which the algorithm or data structure takes the least time and resources to complete its tasks.[43]  The worst case of an algorithm is the case that causes the algorithm or data structure to consume the maximum period of time and computational resources.[44] Algorithm design is a method or mathematical process for problem-solving and engineering algorithms. The design of algorithms is part of many solution theories, such as divide-and-conquer or dynamic programming within operation research. Techniques for designing and implementing algorithm designs are also called algorithm design patterns,[45] with examples including the template method pattern and the decorator pattern. One of the most important aspects of algorithm design is resource (run-time, memory usage) efficiency; the big O notation is used to describe e.g., an algorithm's run-time growth as the size of its input increases.[46] Per the Church–Turing thesis, any algorithm can be computed by any Turing complete model. Turing completeness only requires four instruction types—conditional GOTO, unconditional GOTO, assignment, HALT. However, Kemeny and Kurtz observe that, while \"undisciplined\" use of unconditional GOTOs and conditional IF-THEN GOTOs can result in \"spaghetti code\", a programmer can write structured programs using only these instructions; on the other hand \"it is also possible, and not too hard, to write badly structured programs in a structured language\".[47] Tausworthe augments the three Böhm-Jacopini canonical structures:[48] SEQUENCE, IF-THEN-ELSE, and WHILE-DO, with two more: DO-WHILE and CASE.[49] An additional benefit of a structured program is that it lends itself to proofs of correctness using mathematical induction.[50] By themselves, algorithms are not usually patentable. In the United States, a claim consisting solely of simple manipulations of abstract concepts, numbers, or signals does not constitute \"processes\" (USPTO 2006), so algorithms are not patentable (as in Gottschalk v. Benson). However practical applications of algorithms are sometimes patentable. For example, in Diamond v. Diehr, the application of a simple feedback algorithm to aid in the curing of synthetic rubber was deemed patentable. The patenting of software is controversial,[51] and there are criticized patents involving algorithms, especially data compression algorithms, such as Unisys's LZW patent. Additionally, some cryptographic algorithms have export restrictions (see export of cryptography). Another way of classifying algorithms is by their design methodology or paradigm. Some common paradigms are: For optimization problems there is a more specific classification of algorithms; an algorithm for such problems may fall into one or more of the general categories described above as well as into one of the following: One of the simplest algorithms finds the largest number in a list of numbers of random order. Finding the solution requires looking at every number in the list. From this follows a simple algorithm, which can be described in plain English as: High-level description: (Quasi-)formal description:\nWritten in prose but much closer to the high-level language of a computer program, the following is the more formal coding of the algorithm in pseudocode or pidgin code:"
  },
  {
    "url": "https://en.wikipedia.org/wiki/HTML",
    "title": "HTML - Wikipedia",
    "content": "Hypertext Markup Language (HTML) is the standard markup language[a] for documents designed to be displayed in a web browser. It defines the content and structure of web content. It is often assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript. Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for its appearance. HTML elements are the building blocks of HTML pages. With HTML constructs, images and other objects such as interactive forms may be embedded into the rendered page. HTML provides a means to create structured documents by denoting structural semantics for text such as headings, paragraphs, lists, links, quotes, and other items. HTML elements are delineated by tags, written using angle brackets. Tags such as <img> and <input> directly introduce content into the page. Other tags such as <p> and </p> surround and provide information about document text and may include sub-element tags. Browsers do not display the HTML tags, but use them to interpret the content of the page. HTML can embed programs written in a scripting language such as JavaScript, which affects the behavior and content of web pages. The inclusion of CSS defines the look and layout of content. The World Wide Web Consortium (W3C), former maintainer of the HTML and current maintainer of the CSS standards, has encouraged the use of CSS over explicit presentational HTML since 1997.[update][3] A form of HTML, known as HTML5, is used to display video and audio, primarily using the <canvas> element, together with JavaScript. In 1980, physicist Tim Berners-Lee, a contractor at CERN, proposed and prototyped ENQUIRE, a system for CERN researchers to use and share documents. In 1989, Berners-Lee wrote a memo proposing an Internet-based hypertext system.[4] Berners-Lee specified HTML and wrote the browser and server software in late 1990. That year, Berners-Lee and CERN data systems engineer Robert Cailliau collaborated on a joint request for funding, but the project was not formally adopted by CERN. In his personal notes of 1990, Berners-Lee listed \"some of the many areas in which hypertext is used\"; an encyclopedia is the first entry.[5] The first publicly available description of HTML was a document called \"HTML Tags\",[6] first mentioned on the Internet by Tim Berners-Lee in late 1991.[7][8] It describes 18 elements comprising the initial, relatively simple design of HTML. Except for the hyperlink tag, these were strongly influenced by CERN SGML, an in-house Standard Generalized Markup Language (SGML)-based documentation format at CERN. Eleven of these elements still exist in HTML 4.[9] HTML is a markup language that web browsers use to interpret and compose text, images, and other material into visible or audible web pages. Default characteristics for every item of HTML markup are defined in the browser, and these characteristics can be altered or enhanced by the web page designer's additional use of CSS. Many of the text elements are mentioned in the 1988 ISO technical report TR 9537 Techniques for using SGML, which describes the features of early text formatting languages such as that used by the RUNOFF command developed in the early 1960s for the CTSS (Compatible Time-Sharing System) operating system. These formatting commands were derived from the commands used by typesetters to manually format documents. However, the SGML concept of generalized markup is based on elements (nested annotated ranges with attributes) rather than merely print effects, with separate structure and markup. HTML has been progressively moved in this direction with CSS. Berners-Lee considered HTML to be an application of SGML. It was formally defined as such by the Internet Engineering Task Force (IETF) with the mid-1993 publication of the first proposal for an HTML specification, the \"Hypertext Markup Language (HTML)\" Internet Draft by Berners-Lee and Dan Connolly, which included an SGML Document type definition to define the syntax.[10][11] The draft expired after six months, but was notable for its acknowledgment of the NCSA Mosaic browser's custom tag for embedding in-line images, reflecting the IETF's philosophy of basing standards on successful prototypes. Similarly, Dave Raggett's competing Internet Draft, \"HTML+ (Hypertext Markup Format)\", from late 1993, suggested standardizing already-implemented features like tables and fill-out forms.[12] After the HTML and HTML+ drafts expired in early 1994, the IETF created an HTML Working Group. In 1995, this working group completed \"HTML 2.0\", the first HTML specification intended to be treated as a standard against which future implementations should be based.[13] Further development under the auspices of the IETF was stalled by competing interests. Since 1996,[update] the HTML specifications have been maintained, with input from commercial software vendors, by the World Wide Web Consortium (W3C).[14] In 2000, HTML became an international standard (ISO/IEC 15445:2000). HTML 4.01 was published in late 1999, with further errata published through 2001. In 2004, development began on HTML5 in the Web Hypertext Application Technology Working Group (WHATWG), which became a joint deliverable with the W3C in 2008, and was completed and standardized on 28 October 2014.[15] XHTML is a separate language that began as a reformulation of HTML 4.01 using XML 1.0. It is now referred to as the XML syntax for HTML and is no longer being developed as a separate standard.[59] On 28 May 2019, the W3C announced that WHATWG would be the sole publisher of the HTML and DOM standards.[66][67][68][69] The W3C and WHATWG had been publishing competing standards since 2012. While the W3C standard was identical to the WHATWG in 2007 the standards have since progressively diverged due to different design decisions.[70] The WHATWG \"Living Standard\" had been the de facto web standard for some time.[71] HTML markup consists of several key components, including those called tags (and their attributes), character-based data types, character references and entity references. HTML tags most commonly come in pairs like <h1> and </h1>, although some represent empty elements and so are unpaired, for example <img>. The first tag in such a pair is the start tag, and the second is the end tag (they are also called opening tags and closing tags). Another important component is the HTML document type declaration, which triggers standards mode rendering. The following is an example of the classic \"Hello, World!\" program: The text between <html> and </html> describes the web page, and the text between <body> and </body> is the visible page content. The markup text <title>This is a title</title> defines the browser page title shown on browser tabs and window titles and the tag <div> defines a division of the page used for easy styling. Between <head> and </head>, a <meta> element can be used to define webpage metadata. The Document Type Declaration <!DOCTYPE html> is for HTML5. If a declaration is not included, various browsers will revert to \"quirks mode\" for rendering.[72] HTML documents imply a structure of nested HTML elements. These are indicated in the document by HTML tags, enclosed in angle brackets.[73][better source needed] In the simple, general case, the extent of an element is indicated by a pair of tags: a \"start tag\" <p> and \"end tag\" </p>. The text content of the element, if any, is placed between these tags. Tags may also enclose further tag markup between the start and end, including a mixture of tags and text. This indicates further (nested) elements, as children of the parent element. The start tag may also include the element's attributes within the tag. These indicate other information, such as identifiers for sections within the document, identifiers used to bind style information to the presentation of the document, and for some tags such as the <img> used to embed images, the reference to the image resource in the format like this: <img src=\"example.com/example.jpg\"> Some elements, such as the line break <br> do not permit any embedded content, either text or further tags. These require only a single empty tag (akin to a start tag) and do not use an end tag. Many tags, particularly the closing end tag for the very commonly used paragraph element <p>, are optional. An HTML browser or other agent can infer the closure for the end of an element from the context and the structural rules defined by the HTML standard. These rules are complex and not widely understood by most HTML authors. The general form of an HTML element is therefore: <tag attribute1=\"value1\" attribute2=\"value2\">''content''</tag>. Some HTML elements are defined as empty elements and take the form <tag attribute1=\"value1\" attribute2=\"value2\">. Empty elements may enclose no content, for instance, the <br> tag or the inline <img> tag.\nThe name of an HTML element is the name used in the tags.\nThe end tag's name is preceded by a slash character /. If a tag has no content, an end tag is not allowed. If attributes are not mentioned, default values are used in each case. Header of the HTML document: <head>...</head>. The title is included in the head, for example: HTML headings are defined with the <h1> to <h6> tags with H1 being the highest (or most important) level and H6 the least: The effects are: CSS can substantially change the rendering. Paragraphs: <br>. The difference between <br> and <p> is that <br> breaks a line without altering the semantic structure of the page, whereas <p> sections the page into paragraphs. The element <br> is an empty element in that, although it may have attributes, it can take no content and it must not have an end tag. This is a link in HTML. To create a link the <a> tag is used. The href attribute holds the URL address of the link. There are many possible ways a user can give inputs like: Comments: Comments can help in the understanding of the markup and do not display in the webpage. There are several types of markup elements used in HTML: Most of the attributes of an element are name–value pairs, separated by = and written within the start tag of an element after the element's name. The value may be enclosed in single or double quotes, although values consisting of certain characters can be left unquoted in HTML (but not XHTML).[75][76] Leaving attribute values unquoted is considered unsafe.[77] In contrast with name-value pair attributes, there are some attributes that affect the element simply by their presence in the start tag of the element,[7] like the ismap attribute for the img element.[78] There are several common attributes that may appear in many elements : The abbreviation element, abbr, can be used to demonstrate some of these attributes: This example displays as HTML; in most browsers, pointing the cursor at the abbreviation should display the title text \"Hypertext Markup Language.\" Most elements take the language-related attribute dir to specify text direction, such as with \"rtl\" for right-to-left text in, for example, Arabic, Persian or Hebrew.[79] As of version 4.0, HTML defines a set of 252 character entity references and a set of 1,114,050 numeric character references, both of which allow individual characters to be written via simple markup, rather than literally. A literal character and its markup counterpart are considered equivalent and are rendered identically. The ability to \"escape\" characters in this way allows for the characters < and & (when written as &lt; and &amp;, respectively) to be interpreted as character data, rather than markup. For example, a literal < normally indicates the start of a tag, and & normally indicates the start of a character entity reference or numeric character reference; writing it as &amp; or &#x26; or &#38; allows & to be included in the content of an element or in the value of an attribute. The double-quote character (\"), when not used to quote an attribute value, must also be escaped as &quot; or &#x22; or &#34; when it appears within the attribute value itself. Equivalently, the single-quote character ('), when not used to quote an attribute value, must also be escaped as &#x27; or &#39; (or as &apos; in HTML5 or XHTML documents[80][81]) when it appears within the attribute value itself. If document authors overlook the need to escape such characters, some browsers can be very forgiving and try to use context to guess their intent. The result is still invalid markup, which makes the document less accessible to other browsers and to other user agents that may try to parse the document for search and indexing purposes for example. Escaping also allows for characters that are not easily typed, or that are not available in the document's character encoding, to be represented within the element and attribute content. For example, the acute-accented e (é), a character typically found only on Western European and South American keyboards, can be written in any HTML document as the entity reference &eacute; or as the numeric references &#xE9; or &#233;, using characters that are available on all keyboards and are supported in all character encodings. Unicode character encodings such as UTF-8 are compatible with all modern browsers and allow direct access to almost all the characters of the world's writing systems.[82] HTML defines several data types for element content, such as script data and stylesheet data, and a plethora of types for attribute values, including IDs, names, URIs, numbers, units of length, languages, media descriptors, colors, character encodings, dates and times, and so on. All of these data types are specializations of character data. HTML documents are required to start with a document type declaration (informally, a \"doctype\"). In browsers, the doctype helps to define the rendering mode—particularly whether to use quirks mode. The original purpose of the doctype was to enable the parsing and validation of HTML documents by SGML tools based on the document type definition (DTD). The DTD to which the DOCTYPE refers contains a machine-readable grammar specifying the permitted and prohibited content for a document conforming to such a DTD. Browsers, on the other hand, do not implement HTML as an application of SGML and as consequence do not read the DTD. HTML5 does not define a DTD; therefore, in HTML5 the doctype declaration is simpler and shorter:[83] An example of an HTML 4 doctype This declaration references the DTD for the \"strict\" version of HTML 4.01. SGML-based validators read the DTD in order to properly parse the document and to perform validation. In modern browsers, a valid doctype activates standards mode as opposed to quirks mode. In addition, HTML 4.01 provides Transitional and Frameset DTDs, as explained below. The transitional type is the most inclusive, incorporating current tags as well as older or \"deprecated\" tags, with the Strict DTD excluding deprecated tags. The frameset has all tags necessary to make frames on a page along with the tags included in transitional type.[84] Semantic HTML is a way of writing HTML that emphasizes the meaning of the encoded information over its presentation (look). HTML has included semantic markup from its inception,[85] but has also included presentational markup, such as <font>, <i> and <center> tags. There are also the semantically neutral div and span tags. Since the late 1990s, when Cascading Style Sheets were beginning to work in most browsers, web authors have been encouraged to avoid the use of presentational HTML markup with a view to the separation of content and presentation.[86] In a 2001 discussion of the Semantic Web, Tim Berners-Lee and others gave examples of ways in which intelligent software \"agents\" may one day automatically crawl the web and find, filter, and correlate previously unrelated, published facts for the benefit of human users.[87] Such agents are not commonplace even now, but some of the ideas of Web 2.0, mashups and price comparison websites may be coming close[citation needed]. The main difference between these web application hybrids and Berners-Lee's semantic agents lies in the fact that the current aggregation and hybridization of information is usually designed by web developers, who already know the web locations and the API semantics of the specific data they wish to mash, compare and combine. An important type of web agent that does crawl and read web pages automatically, without prior knowledge of what it might find, is the web crawler or search-engine spider. These software agents are dependent on the semantic clarity of web pages they find as they use various techniques and algorithms to read and index millions of web pages a day and provide web users with search facilities without which the World Wide Web's usefulness would be greatly reduced. In order for search engine spiders to be able to rate the significance of pieces of text they find in HTML documents, and also for those creating mashups and other hybrids as well as for more automated agents as they are developed, the semantic structures that exist in HTML need to be widely and uniformly applied to bring out the meaning of the published text.[88] Presentational markup tags are deprecated in current HTML and XHTML recommendations. The majority of presentational features from previous versions of HTML are no longer allowed as they lead to poorer accessibility, higher cost of site maintenance, and larger document sizes.[89] Good semantic HTML also improves the accessibility of web documents (see also Web Content Accessibility Guidelines). For example, when a screen reader or audio browser can correctly ascertain the structure of a document, it will not waste the visually impaired user's time by reading out repeated or irrelevant information when it has been marked up correctly. HTML documents can be delivered by the same means as any other computer file. However, they are most often delivered either by HTTP from a web server or by email. The World Wide Web is composed primarily of HTML documents transmitted from web servers to web browsers using the Hypertext Transfer Protocol (HTTP). However, HTTP is used to serve images, sound, and other content, in addition to HTML. To allow the web browser to know how to handle each document it receives, other information is transmitted along with the document. This meta data usually includes the MIME type (e.g., text/html or application/xhtml+xml) and the character encoding (see Character encodings in HTML). In modern browsers, the MIME type that is sent with the HTML document may affect how the document is initially interpreted. A document sent with the XHTML MIME type is expected to be well-formed XML; syntax errors may cause the browser to fail to render it. The same document sent with the HTML MIME type might be displayed successfully since some browsers are more lenient with HTML. The W3C recommendations state that XHTML 1.0 documents that follow guidelines set forth in the recommendation's Appendix C may be labeled with either MIME Type.[90] XHTML 1.1 also states that XHTML 1.1 documents should[91] be labeled with either MIME type.[92] Most graphical email clients allow the use of a subset of HTML (often ill-defined) to provide formatting and semantic markup not available with plain text. This may include typographic information like colored headings, emphasized and quoted text, inline images and diagrams. Many such clients include both a GUI editor for composing HTML e-mail messages and a rendering engine for displaying them. Use of HTML in e-mail is criticized by some because of compatibility issues, because it can help disguise phishing attacks, because of accessibility issues for blind or visually impaired people, because it can confuse spam filters and because the message size is larger than plain text. The most common filename extension for files containing HTML is .html. A common abbreviation of this is .htm, which originated because some early operating systems and file systems, such as DOS and the limitations imposed by FAT data structure, limited file extensions to three letters.[93] An HTML Application (HTA; file extension .hta) is a Microsoft Windows application that uses HTML and Dynamic HTML in a browser to provide the application's graphical interface. A regular HTML file is confined to the security model of the web browser's security, communicating only to web servers and manipulating only web page objects and site cookies. An HTA runs as a fully trusted application and therefore has more privileges, like creation/editing/removal of files and Windows Registry entries. Because they operate outside the browser's security model, HTAs cannot be executed via HTTP, but must be downloaded (just like an EXE file) and executed from local file system. Since its inception, HTML and its associated protocols gained acceptance relatively quickly. However, no clear standards existed in the early years of the language. Though its creators originally conceived of HTML as a semantic language devoid of presentation details,[94] practical uses pushed many presentational elements and attributes into the language, driven largely by the various browser vendors. The latest standards surrounding HTML reflect efforts to overcome the sometimes chaotic development of the language[95] and to create a rational foundation for building both meaningful and well-presented documents. To return HTML to its role as a semantic language, the W3C has developed style languages such as CSS and XSL to shoulder the burden of presentation. In conjunction, the HTML specification has slowly reined in the presentational elements. There are two axes differentiating various variations of HTML as currently specified: SGML-based HTML versus XML-based HTML (referred to as XHTML) on one axis, and strict versus transitional (loose) versus frameset on the other axis. One difference in the latest[when?] HTML specifications lies in the distinction between the SGML-based specification and the XML-based specification. The XML-based specification is usually called XHTML to distinguish it clearly from the more traditional definition. However, the root element name continues to be \"html\" even in the XHTML-specified HTML. The W3C intended XHTML 1.0 to be identical to HTML 4.01 except where limitations of XML over the more complex SGML require workarounds. Because XHTML and HTML are closely related, they are sometimes documented in parallel. In such circumstances, some authors conflate the two names as (X)HTML or X(HTML). Like HTML 4.01, XHTML 1.0 has three sub-specifications: strict, transitional, and frameset. Aside from the different opening declarations for a document, the differences between an HTML 4.01 and XHTML 1.0 document—in each of the corresponding DTDs—are largely syntactic. The underlying syntax of HTML allows many shortcuts that XHTML does not, such as elements with optional opening or closing tags, and even empty elements which must not have an end tag. By contrast, XHTML requires all elements to have an opening tag and a closing tag. XHTML, however, also introduces a new shortcut: an XHTML tag may be opened and closed within the same tag, by including a slash before the end of the tag like this: <br/>. The introduction of this shorthand, which is not used in the SGML declaration for HTML 4.01, may confuse earlier software unfamiliar with this new convention. A fix for this is remove the slash preceding the closing angle bracket, as such: <br>.[96] To understand the subtle differences between HTML and XHTML, consider the transformation of a valid and well-formed XHTML 1.0 document that adheres to Appendix C (see below) into a valid HTML 4.01 document. Making this translation requires the following steps: Those are the main changes necessary to translate a document from XHTML 1.0 to HTML 4.01. To translate from HTML to XHTML would also require the addition of any omitted opening or closing tags. Whether coding in HTML or XHTML it may just be best to always include the optional tags within an HTML document rather than remembering which tags can be omitted. A well-formed XHTML document adheres to all the syntax requirements of XML. A valid document adheres to the content specification for XHTML, which describes the document structure. The W3C recommends several conventions to ensure an easy migration between HTML and XHTML (see HTML Compatibility Guidelines). The following steps can be applied to XHTML 1.0 documents only: By carefully following the W3C's compatibility guidelines, a user agent should be able to interpret the document equally as HTML or XHTML. For documents that are XHTML 1.0 and have been made compatible in this way, the W3C permits them to be served either as HTML (with a text/html MIME type), or as XHTML (with an application/xhtml+xml or application/xml MIME type). When delivered as XHTML, browsers should use an XML parser, which adheres strictly to the XML specifications for parsing the document's contents. HTML 4 defined three different versions of the language: Strict, Transitional (once called Loose), and Frameset. The Strict version is intended for new documents and is considered best practice, while the Transitional and Frameset versions were developed to make it easier to transition documents that conformed to older HTML specifications or did not conform to any specification to a version of HTML 4. The Transitional and Frameset versions allow for presentational markup, which is omitted in the Strict version. Instead, cascading style sheets are encouraged to improve the presentation of HTML documents. Because XHTML 1 only defines an XML syntax for the language defined by HTML 4, the same differences apply to XHTML 1 as well. The Transitional version allows the following parts of the vocabulary, which are not included in the Strict version: The Frameset version includes everything in the Transitional version, as well as the frameset element (used instead of body) and the frame element. In addition to the above transitional differences, the frameset specifications (whether XHTML 1.0 or HTML 4.01) specify a different content model, with frameset replacing body, that contains either frame elements, or optionally noframes with a body. As this list demonstrates, the loose versions of the specification are maintained for legacy support. However, contrary to popular misconceptions, the move to XHTML does not imply a removal of this legacy support. Rather the X in XML stands for extensible and the W3C is modularizing the entire specification and opens it up to independent extensions. The primary achievement in the move from XHTML 1.0 to XHTML 1.1 is the modularization of the entire specification. The strict version of HTML is deployed in XHTML 1.1 through a set of modular extensions to the base XHTML 1.1 specification. Likewise, someone looking for the loose (transitional) or frameset specifications will find similar extended XHTML 1.1 support (much of it is contained in the legacy or frame modules). Modularization also allows for separate features to develop on their own timetable. So for example, XHTML 1.1 will allow quicker migration to emerging XML standards such as MathML (a presentational and semantic math language based on XML) and XForms—a new highly advanced web-form technology to replace the existing HTML forms. In summary, the HTML 4 specification primarily reined in all the various HTML implementations into a single clearly written specification based on SGML. XHTML 1.0, ported this specification, as is, to the new XML-defined specification. Next, XHTML 1.1 takes advantage of the extensible nature of XML and modularizes the whole specification. XHTML 2.0 was intended to be the first step in adding new features to the specification in a standards-body-based approach. The HTML Living Standard, which is developed by WHATWG, is the official version, while W3C HTML5 is no longer separate from WHATWG. There are some WYSIWYG editors (what you see is what you get), in which the user lays out everything as it is to appear in the HTML document using a graphical user interface (GUI), often similar to word processors. The editor renders the document rather than showing the code, so authors do not require extensive knowledge of HTML. The WYSIWYG editing model has been criticized,[97][98] primarily because of the low quality of the generated code; there are voices[who?] advocating a change to the WYSIWYM model (what you see is what you mean). WYSIWYG editors remain a controversial topic because of their perceived flaws such as:"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/WebRobotics",
    "title": "ð¤·ð½ââï¸ Page not found | Page not found | MDN",
    "content": "Web technology reference for developers Structure of content on the web Code used to describe document style General-purpose scripting language Protocol for transmitting web resources Interfaces for building web applications Developing extensions for web browsers Build web projects usable for all Web technology reference for developers Learn web development Learn web development Learn to structure web content with HTML Learn to style content using CSS Learn to run scripts in the browser Learn to make the web accessible to all A customized MDN experience Get real-time assistance and support All browser compatibility updates at a glance Learn how to use MDN Plus Frequently asked questions about MDN Plus Write, test and share your code Scan a website for free Get real-time assistance and support Go back to the home page Your blueprint for a better internet. Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2025 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://www.bbc.com/newsUbuntu",
    "title": "BBC - 404: Not Found",
    "content": "404\n              \n                Not Found Check the page address or search for it below. BBC Homepage Copyright © BBC.\n              \n              The BBC is not responsible for the content of external sites.\n              \n                Read about our approach to external\n                linking."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/WebMachine_learning",
    "title": "ð¤·ð½ââï¸ Page not found | Page not found | MDN",
    "content": "Web technology reference for developers Structure of content on the web Code used to describe document style General-purpose scripting language Protocol for transmitting web resources Interfaces for building web applications Developing extensions for web browsers Build web projects usable for all Web technology reference for developers Learn web development Learn web development Learn to structure web content with HTML Learn to style content using CSS Learn to run scripts in the browser Learn to make the web accessible to all A customized MDN experience Get real-time assistance and support All browser compatibility updates at a glance Learn how to use MDN Plus Frequently asked questions about MDN Plus Write, test and share your code Scan a website for free Get real-time assistance and support Go back to the home page Your blueprint for a better internet. Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2025 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://www.python.org/Robotics",
    "title": "Welcome to Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. We couldn’t find what you were looking for. This error has been reported and we will look into it shortly. For now, Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://towardsdatascience.com/React",
    "title": "React & D3: Adding A Bar Chart | Towards Data Science",
    "content": "Publish AI, ML & data-science insights to a global community of data professionals. So the last component to refactor in Streetball Mecca is the bar chart. In my last article, React & D3: Preparing The Data With D3.Nest, I… So the last component to refactor in Streetball Mecca is the bar chart. In my last article, React & D3: Preparing The Data With D3.Nest, I discussed how the data for the chart was organized and formatted using d3.nest. This **** involved grouping the parks based on their neighborhood location and calculating the overall average of all parks associated with that neighborhood. Here is the current working version used in this article and the CodeSandbox as well. As I started to contemplate how best to refactor the D3 bar chart code into the React ecosystem, I leveraged the lessons learned from all the previous refactoring. One of the most important changes was to allow React to manage state, render/update DOM elements, and then allow D3 to do what it does best, such as creating scales and nesting data. For this refactor I decided to take it one step further and opted to take a non-svg approach to rendering the bar and circle elements. This decision was born initially from many previous frustrations having to manually position g elements. It was also influenced by the fact that I just taught a class on Flexbox and as part of that prep I came across a bookmark I saved over a year ago to the article \"Making Data Vis Without SVG Using D3 & Flexbox\" by Amber Thomas. I felt like the stars had aligned and all the signs pointed to Flexbox. Initially, I had ported over the D3 code and refactored it just slightly to work within a single React BarChart component. This D3 within React approach was meant as a first step to understanding how to coerce D3 to work within React. I also kept much of the D3 code intact in order to get something up and running. It however ended up being close to 200 lines of code and started to feel unmanageable. Now that I was ready to move forward with the second refactor and take a \"D3 for the math and React for everything else\" approach, the first thing I needed to plan out was the component hierarchy. I used an app called excalidraw to draw out the initial mockup and help work through the though and design process. The BarChart is the first component in this hierarchy so it makes sense to start there. Since both the XAxis and Neighborhoods components would require the same D3 scale, I decided to create it here and then pass it down to both as a prop. D3 has several methods that can be used for creating scales. Scales take an input (usually a number, date, or category) and return a value (such as a coordinate, color, length, or radius). They come in several categories that range from continuous input/output (d3.scaleLinear()) to discrete input/output (d3.scaleOridinal()) and somewhere in-between (d3.scaleQuantize()). Scales themselves could be an entire lecture in their own right so if you’re interested in learning more I highly suggest you read d3indepth.com. The scale I needed for this chart would be a dynamic, continuous input/output scale so I went with d3.scaleLinear(). All ** D3 scales require that you define a .domain() and .range(). The domain of values used for this scale is based on the overall rating of the parks. They could potentially be in total disrepair and assigned 0 (lowest value possible) or the creme de la creme of parks with a rating of 100 (highest value possible). Here, for example, is the 100% Playground park located in Canarsi**e Brooklyn which falls somewhere in between with an overall rating of 56. The average of those parks was also needed as this would be assigned to the parent neighborhood and I had used D3.nest() to rollup those values as seen in the example below. If you’re curious about working with d3.nest (which I hope you are), you can read more about how I nested the data in my previous article: Preparing The Data With D3.Nest. The .range() is based on the pixel space provided to the .bar-group element which is assigned a width of 1100px. I did need to subtract 25px in order to provide a bit of margin between both, the last tick value(100) and the circle and the right border of the .bar-group element. As you continue to examine more and more D3 code in general, you will see a common pattern of defining a set of margins that are used to define this additional space which is then referenced by the scale but quite possibly throughout the code in key places. Almost any D3 tutorial on scales will provide a similar visual in order to convey the relationship between the domain and range so I thought I’d do the same as well. A Little Bit About Axes If you have ever worked with D3 in the past, using it to create any one of the more standard chart types such as bar, line, or scatterplot, then it’s safe to say you have some familiarity with adding an axis. If, however, you are new to D3, then know that axes require the following steps: Creating a scale (we did so using d3.scaleLinear()) Setting its orientation: the orientation of an axis is fixed, however, it can be changed using one of the ** four orientation methods – .axisBottom(), .axisTop(), .axisLeft(), and .axisRight()**. Appending the Axis: once the axis has been created it is then appended using .call(xAxis). The axis also has additional configurations for setting tick values, sizes, and format. Being that I’ll be using React for the DOM and D3 for where it’s best suited, I decided that for this refactor I would only make use of d3.scaleLinear() and **** render the ticks using React. The only prop being passed to the XAxis component was the xScale so I’ll just object de-structure that value to make it clear that this is all that the component needs as it pertains to props. For much of the XAxis refactor I had used as a reference a beautifully written tutorial on React & D3 by Amelia Wattenberger, She wrote the article in order to promote her recent book \"Full Stack D3 and Data Visualization\". I was, at one point, tempted to buy it and would have done so had I not already owned the following books on D3: In Amelia’s article she looped over the array of individual ticks (0, 10, 20, etc.) using .ticks() and assigned each of them an xOffset value based on the returned value from the xScale. It’s been a while since I’ve worked on such a low level with scales and forgot that they included a .ticks() method that **** returns an array of the ticks. For the axis I decided to stay in line with Amelia’s article rendering an svg that uses a nested g element to position the axis to the right 200px. It then maps over the ticks array and positions each one of those g elements which, itself, renders the tick value. Side Note: I was able to render the ticks as divs using Flexbox, but that solution required creating an additional xScale and removing not only an additional 200px but also another 8px for half the font size. Since I felt only one scale was need, I opted to put that solution on the shelf for now. This component is responsible for mapping over the nestedData array and rendering individual Neighborhood components. It passes down several props to the child component, including the dispatch function which will be passed as an action and which the useReducer uses to update state. If you’re curious about useReducer, take a look at this previous article I wrote: Managing Complex State Transitions With useReducer. This component is responsible for rendering the following elements: It also makes use of the following hooks: The next step is to map over the parks array and create a Circle component. One thing to note is that the element determines how many pixels it should position itself left using the xScale but it also needs to subtract 5px. These additional pixels were needed in order to move the circle left, to center it directly under the axis value. Let’s break down the return statement in the map of the Neighborhood component as there are a few things happening here. First, the neighborhood element will reference the activeNeighborhood value in state to determine if it needs to highlight its background color in order to indicate it is the active neighborhood as seen below. I opted to allow the user to click anywhere in on the element in order to trigger the onClick event which calls the dispatch function and passes it an object containing a type and payload as required by useReducer. You can read more about working with useReducer and actions in this article: React: Managing Complex State Transitions With useReducer. Next, we have to render the neighborhood title and assign it a specific color based on which borough it belongs to. And finally, the Bars and Circles needed to be rendered. The Bar component requires the width value ** which was calculated using the xScale** along with the entire neighborhood object as key data points are needed by the tooltip. Flexbox was enabled on the This component would require the logic needed to render a tooltip when the user hovered over the colored bar. That logic involves adding both onMouseMove and onMouseOut event listeners and updating a local version of state in order to trigger the re-render. The first step to take was create the following state values: Now we add the handler functions for the event listeners. For this I had to do a bit of research as the standard event object’s e.pageY, e.clientY, and e.screenY were returning values that were much greater than the actual position of the mouse. I ended up using e.nativeEvent.offsetX and e.nativeEvent.offsetY and pulled some of that insight right from the React docs themselves: If you find that you need the underlying browser event for some reason, simply use the nativeEvent attribute to get it. The synthetic events are different from, and do not map directly to, the browser’s native events. For example in onMouseLeave event.nativeEvent will point to a mouseout event. All that was left was to return the DOM elements configured, assign the event listeners and add some conditional logic to render the tooltip only when isActive was true. This component required a much of the same logic for the tooltip as was needed for the Bar component along with one additional onClick event listener that filtered the map for the selected park. The handleClick function required the use of e.stopPropagation() in order ** to prevent the event from bubbling up to the Neighborhood component where an additional onClick event was configured. I found that without e.stopPropagation(**), all parks, from that neighborhood, would be rendered within the map instead of just that single park. I had looked forward to using fancy Flexbox properties for this particular layout but it turned out it was only needed enable it on the neighborhood and title elements. Here are is the actual html layout of the .neighborhood element and its children. Those elements, along with their corresponding CSS rendered as follows: As for Flexbox I first enabled it on the .neighborhood element which positioned the title and bar-group horizontally to one another. The .title element was also assigned a display of flex and used align-items to to vertically center the title text This is the 7th article of my Streetball Mecca series, where I document refactoring the project from its humble beginnings as a D3 visualization over to a React build to manage state and the DOM and use D3 for its unique helper functions. Thus far, I’ve replaced all instances of D3’s Enter/Update/Exit with either React’s useReducer or useState hooks. useReducer is being used to manage the global state and overall business logic of the app, and useState is used for more localized state as in the tooltips. Although React took the reins here, D3 was used for what it does best; creating scales (d3.scaleLinear), rendering geo-projections (d3.geoMercator/d3.geoPath), and nesting data (d3.nest). This project has certainly helped validate my opinion that React is by far the better choice for managing state and the overall flow of the application logic. Besides all the native React hooks used, such as useReducer, useState, useRef, and useCallback, I also leveraged a few custom hooks such as useDataApi, useOnClickOutside, and useLocalStorage. My favorite part of the refactor has been working with the React-Spring animation library **** in order to replace all the D3 transitions. A close runner up was building a bar chart using DIV’s and Flexbox instead of SVGs and G elements, something I’ve wanted to try for some time. I certainly have a new appreciation for both libraries and look forward to building more interactive dashboards. Written By Share This Article Towards Data Science is a community publication. Submit your insights to reach our global audience and earn through the TDS Author Payment Program. This article explores the relationship between a movie’s dialogue and its genre, leveraging domain-driven data… How to build a modern, scalable data platform to power your analytics and data science… How to make graphs using Matplotlib, Pandas and Seaborn Create Visualizations at the Level of Leading Newspapers To what extent are countries adopting data policies and systems for the public good? From Urban Collisions to Global Connections: Unveiling the Full Spectrum of Geo-Visual Storytelling with Observable… From Haunted Locales to Political Patterns: A Mapping Journey Through Data and Design with Observable… Your home for data science and Al. The world’s leading publication for data science, data analytics, data engineering, machine learning, and artificial intelligence professionals."
  },
  {
    "url": "https://www.python.org/Cloud_computing",
    "title": "Welcome to Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. We couldn’t find what you were looking for. This error has been reported and we will look into it shortly. For now, Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/WebLinux",
    "title": "ð¤·ð½ââï¸ Page not found | Page not found | MDN",
    "content": "Web technology reference for developers Structure of content on the web Code used to describe document style General-purpose scripting language Protocol for transmitting web resources Interfaces for building web applications Developing extensions for web browsers Build web projects usable for all Web technology reference for developers Learn web development Learn web development Learn to structure web content with HTML Learn to style content using CSS Learn to run scripts in the browser Learn to make the web accessible to all A customized MDN experience Get real-time assistance and support All browser compatibility updates at a glance Learn how to use MDN Plus Frequently asked questions about MDN Plus Write, test and share your code Scan a website for free Get real-time assistance and support Go back to the home page Your blueprint for a better internet. Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2025 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://en.wikipedia.org/wiki/Data_science",
    "title": "Data science - Wikipedia",
    "content": "Data science is an interdisciplinary academic field[1] that uses statistics, scientific computing, scientific methods, processing, scientific visualization, algorithms and systems to extract or extrapolate knowledge from potentially noisy, structured, or unstructured data.[2] Data science also integrates domain knowledge from the underlying application domain (e.g., natural sciences, information technology, and medicine).[3] Data science is multifaceted and can be described as a science, a research paradigm, a research method, a discipline, a workflow, and a profession.[4] Data science is \"a concept to unify statistics, data analysis, informatics, and their related methods\" to \"understand and analyze actual phenomena\" with data.[5] It uses techniques and theories drawn from many fields within the context of mathematics, statistics, computer science, information science, and domain knowledge.[6] However, data science is different from computer science and information science. Turing Award winner Jim Gray imagined data science as a \"fourth paradigm\" of science (empirical, theoretical, computational, and now data-driven) and asserted that \"everything about science is changing because of the impact of information technology\" and the data deluge.[7][8] A data scientist is a professional who creates programming code and combines it with statistical knowledge to summarize data.[9] Data science is an interdisciplinary field[10] focused on extracting knowledge from typically large data sets and applying the knowledge from that data to solve problems in other application domains. The field encompasses preparing data for analysis, formulating data science problems, analyzing data, and summarizing these findings. As such, it incorporates skills from computer science, mathematics, data visualization, graphic design, communication, and business.[11] Vasant Dhar writes that statistics emphasizes quantitative data and description. In contrast, data science deals with quantitative and qualitative data (e.g., from images, text, sensors, transactions, customer information, etc.) and emphasizes prediction and action.[12] Andrew Gelman of Columbia University has described statistics as a non-essential part of data science.[13] Stanford professor David Donoho writes that data science is not distinguished from statistics by the size of datasets or use of computing and that many graduate programs misleadingly advertise their analytics and statistics training as the essence of a data-science program. He describes data science as an applied field growing out of traditional statistics.[14] In 1962, John Tukey described a field he called \"data analysis\", which resembles modern data science.[14] In 1985, in a lecture given to the Chinese Academy of Sciences in Beijing, C. F. Jeff Wu used the term \"data science\" for the first time as an alternative name for statistics.[15] Later, attendees at a 1992 statistics symposium at the University of Montpellier  II acknowledged the emergence of a new discipline focused on data of various origins and forms, combining established concepts and principles of statistics and data analysis with computing.[16][17] The term \"data science\" has been traced back to 1974, when Peter Naur proposed it as an alternative name to computer science.[6] In 1996, the International Federation of Classification Societies became the first conference to specifically feature data science as a topic.[6] However, the definition was still in flux. After the 1985 lecture at the Chinese Academy of Sciences in Beijing, in 1997 C. F. Jeff Wu again suggested that statistics should be renamed data science. He reasoned that a new name would help statistics shed inaccurate stereotypes, such as being synonymous with accounting or limited to describing data.[18] In 1998, Hayashi Chikio argued for data science as a new, interdisciplinary concept, with three aspects: data design, collection, and analysis.[17] In 2012, technologists Thomas H. Davenport and DJ Patil declared \"Data Scientist: The Sexiest Job of the 21st Century\",[19] a catchphrase that was picked up even by major-city newspapers like the New York Times[20] and the Boston Globe.[21] A decade later, they reaffirmed it, stating that \"the job is more in demand than ever with employers\".[22] The modern conception of data science as an independent discipline is sometimes attributed to William S. Cleveland.[23] In 2014, the American Statistical Association's Section on Statistical Learning and Data Mining changed its name to the Section on Statistical Learning and Data Science, reflecting the ascendant popularity of data science.[24] The professional title of \"data scientist\" has been attributed to DJ Patil and Jeff Hammerbacher in 2008.[25] Though it was used by the National Science Board in their 2005 report \"Long-Lived Digital Data Collections: Enabling Research and Education in the 21st Century\", it referred broadly to any key role in managing a digital data collection.[26] Data analysis typically involves working with structured datasets to answer specific questions or solve specific problems. This can involve tasks such as data cleaning and data visualization to summarize data and develop hypotheses about relationships between variables. Data analysts typically use statistical methods to test these hypotheses and draw conclusions from the data.[27] Data science involves working with larger datasets that often require advanced computational and statistical methods to analyze. Data scientists often work with unstructured data such as text or images and use machine learning algorithms to build predictive models. Data science often uses statistical analysis, data preprocessing, and supervised learning.[28][29] Cloud computing can offer access to large amounts of computational power and storage.[30] In big data, where volumes of information are continually generated and processed, these platforms can be used to handle complex and resource-intensive analytical tasks.[31] Some distributed computing frameworks are designed to handle big data workloads. These frameworks can enable data scientists to process and analyze large datasets in parallel, which can reduce processing times.[32] Data science involves collecting, processing, and analyzing data which often includes personal and sensitive information. Ethical concerns include potential privacy violations, bias perpetuation, and negative societal impacts.[33][34] Machine learning models can amplify existing biases present in training data, leading to discriminatory or unfair outcomes.[35][36]"
  },
  {
    "url": "https://www.python.org/",
    "title": "Welcome to Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. The core of extensible programming is defining functions. Python allows mandatory and optional arguments, keyword arguments, and even arbitrary argument lists. More about defining functions in Python 3 Lists (known as arrays in other languages) are one of the compound data types that Python understands. Lists can be indexed, sliced and manipulated with other built-in functions. More about lists in Python 3 Calculations are simple with Python, and expression syntax is straightforward: the operators +, -, * and / work as expected; parentheses () can be used for grouping. More about simple math functions in Python 3. Python knows the usual control flow statements that other languages speak — if, for, while and range — with some of its own twists, of course. More control flow tools in Python 3 Experienced programmers in any other language can pick up Python very quickly, and beginners find the clean syntax and indentation structure easy to learn. Whet your appetite with our Python 3 overview. Python is a programming language that lets you work quickly and integrate systems more effectively. Learn More Whether you're new to programming or an experienced developer, it's easy to learn and use Python. Start with our Beginner’s Guide Python source code and installers are available for download for all versions! Latest: Python 3.13.5 Documentation for Python's standard library, along with tutorials and guides, are available online. docs.python.org Looking for work or have a Python related position that you're trying to hire for? Our relaunched community-run job board is the place to go. jobs.python.org More More More Using Python scripts to analyse SEO and broken links on your site by Marnix de Munck More The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Learn more Become a Member\nDonate to the PSF Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/psf/",
    "title": "Python Software Foundation",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. In 2024, the PSF awarded $655,000 USD to 257 groups or individuals in 61 countries around the world. We support and maintain python.org,\r\n          The Python Package Index,\r\n          Python Documentation,\r\n          and many other services the Python Community relies on. We produce and underwrite the\r\n          PyCon US Conference,\r\n          the largest annual gathering for the Python community.\r\n         Support from sponsors, attendees, PyLadies, and CPython enabled us to award more than $384,000 USD in travel grants to 254 attendees for PyCon US 2025. Help the PSF promote, protect, and advance the Python programming language and community! Membership FAQ Assist the foundation's goals with a donation. The PSF is a recognized 501(c)(3) non-profit organization. How to Contribute Learn how you can help the PSF and the greater Python community! How to Volunteer Without our sponsors we wouldn't be able to help the Python community grow and prosper. Sponsorship Possibilities The Python Software Foundation welcomes grant proposals for projects related to the development of Python, Python-related technology, and educational resources. Proposal Guidelines, FAQ and Examples Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://docs.python.org",
    "title": "3.13.5 Documentation",
    "content": "Download these documents Welcome! This is the official documentation for Python 3.13.5. Documentation sections: What's new in Python 3.13?\n Or all \"What's new\" documents since Python 2.0 Tutorial\nStart here: a tour of Python's syntax and features Library reference\nStandard library and builtins Language reference\nSyntax and language elements Python setup and usage\nHow to install, configure, and use Python Python HOWTOs\nIn-depth topic manuals Installing Python modules\nThird-party modules and PyPI.org Distributing Python modules\nPublishing modules for use by other people Extending and embedding\nFor C/C++ programmers Python's C API\nC API reference FAQs\nFrequently asked questions (with answers!) Deprecations\nDeprecated functionality Indices, glossary, and search: Global module index\nAll modules and libraries General index\nAll functions, classes, and terms Glossary\nTerms explained Search page\nSearch this documentation Complete table of contents\nLists all sections and subsections Project information: Reporting issues Contributing to docs Download the documentation History and license of Python Copyright About the documentation Download these documents"
  },
  {
    "url": "https://pypi.org/",
    "title": "PyPI · The Python Package Index",
    "content": "Or browse projects 664,098 projects 7,245,673 releases 15,051,685 files 952,633 users The Python Package Index (PyPI) is a repository of software for the Python programming language. PyPI helps you find and install software developed and shared by the Python community.        Learn about installing packages. Package authors use PyPI to distribute their software.        Learn how to package your Python code for PyPI. Status:\nall systems operational Developed and maintained by the Python community, for the Python community.    \nDonate today! \"PyPI\", \"Python Package Index\", and the blocks logos are registered trademarks of the Python Software Foundation. © 2025 Python Software Foundation\n\nSite map Supported by"
  },
  {
    "url": "https://www.python.org/jobs/",
    "title": "Python Job Board | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Have a job that our community would be interested in? \n    Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by\n    logging in now. In case of questions, please contact the \n    PSF Python Job Board team. Thank you. Subscribe via RSS Follow The PSF via Twitter Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/community/",
    "title": "Our Community | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Great software is supported by great people, and Python is no exception. Our user base is enthusiastic and dedicated to spreading use of the language far and wide. Our community can help support the beginner, the expert, and adds to the ever-increasing open-source knowledgebase. New to the community? Here are some great places to get started: We want to be open about how we can improve transparency, provide the community with opportunities to interact with us, and be responsive to raised suggestions. Contribute by filling out the Python Software Foundation Community Survey here. Python Weekly is a free weekly email newsletter featuring curated news, articles, new releases, jobs, and more. Curated by Rahul Chaudhary every Thursday. Go to pythonweekly.com to sign up. PySlackers is a community of Python enthusiasts centered around an open Slack team. Go to pyslackers.com for more information and to join. Python Discord is a large community focused around the Python programming language. Go to pythondiscord.com for more information and to join. This is the place where Python Engineers level up their knowledge, skills and network. Exchange technical publications, coding tutorials and other learning resources. Go to the Python Developers Community on LinkedIn. Libera.Chat hosts several channels. Select an IRC client, register your nickname with Libera.Chat, and you can be off and running! Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://psfmember.org/civicrm/contribute/transact?reset=1&id=2",
    "title": "Donation for the PSF – Python Software Foundation",
    "content": "Python Software Foundation The Python Software Foundation is a 501(c)(3) non-profit organization dedicated to the Python programming language. Your donation helps sustain a vibrant and diverse Python community and shows your support for Open Source. We rely on memberships, individual donations, and corporate sponsorships to award grants for regional Python conferences, sprints, local Meetups, and other community events, as well as to support Python documentation, fiscal sponsorships, and community projects such as: Python Developer's Guide Issue Tracker PyPI - the Python Package Index Contact information is required for tax reporting purposes and will be shared only with the US government. Thank you for supporting the Python Software Foundation!\nPayments are processed by PayPal, but may be made either with your credit card or your existing PayPal account.  If you wish to use a credit card, once on the PayPal site click the link \"Don't have a PayPal account?\", which will take you to a credit card form.  A PayPal account is not required.\nFor your security, this website and the PSF do not acquire or retain any of your credit card data.\nFollowing the transaction, you will receive both a PayPal receipt and/or our formal acknowledgment of your contribution.\nPlease whitelist psfmember.org and check your spam bins if you don't receive the acknowledgment from the PSF. Payments are processed by PayPal, but may be made either with your credit card or your existing PayPal account.  If you wish to use a credit card, once on the PayPal site click the link \"Don't have a PayPal account?\", which will take you to a credit card form.  A PayPal account is not required. For your security, this website and the PSF do not acquire or retain any of your credit card data. Following the transaction, you will receive both a PayPal receipt and/or our formal acknowledgment of your contribution. Please whitelist psfmember.org and check your spam bins if you don't receive the acknowledgment from the PSF."
  },
  {
    "url": "https://www.python.org/community/irc/",
    "title": "Internet Relay Chat | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. There are several Python-related channels on the libera IRC network.\nAll channels are available by connecting to Internet Relay Chat server\nLibera.Chat. The #python channel is for all discussion about the Python language,\necosystem, and community. You can get immediate help with programming\nquestions. You will need to first register your nickname with Libera,\nusing the nickname setup instructions (https://libera.chat/guides/registration). Spanish speakers can use the #pyar channel, from the Python Argentina user group. French speakers can join the #python-fr channel. Finnish speakers can join the #python.fi channel on a different network, IRCnet. (Note: prior to May 2021, these channels existed on Freenode. Some of them\nwere forcibly removed by Freenode operators, after a change in management and network policy. The channels on Freenode are no longer under the PSF umbrella.) #python-dev is for CPython developers, where they can\ncoordinate their work or discuss problems.  Bots post updates to the channel based on\nactivity in the CPython source tree and bug tracker. #python-infra is for Python infrastructure discussion. #pydotorg is for discussion of this website, python.org. #distutils and #pypa are for Python packaging discussion. IRC clients for many platforms can be found in the Internet Relay Chat (IRC)\nHelp Archive. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/about/",
    "title": "About Python™ | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. These are some of the reasons people who use Python would rather not use anything else. Python can be easy to pick up whether you're a first time programmer or you're experienced with other languages. The following pages are a useful first step to get on your way writing programs with Python! The community hosts conferences and meetups, collaborates on code, and much more. Python's documentation will help you along the way, and the mailing lists will keep you in touch. The Python Package Index (PyPI) hosts thousands of third-party modules for Python. Both Python's standard library and the community-contributed modules allow for endless possibilities. Python is developed under an OSI-approved open source license, making it freely usable and distributable, even for commercial use. Python's license is administered by the Python Software Foundation. Can’t find what you’re looking for? Try our comprehensive Help section More More The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Learn more Become a Member\nDonate to the PSF Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/about/apps/",
    "title": "Applications for Python | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Python is used in many application domains.  Here's\na sampling. Python offers many choices for web development: Python's standard library supports many Internet protocols: And the Package Index has yet more libraries: Python is widely used in scientific and numeric computing: Python is a superb language for teaching programming, both at the introductory\nlevel and in more advanced courses. The Tk GUI library\nis included with most binary distributions of Python. Some toolkits that are usable on several platforms are available\nseparately: Platform-specific toolkits are also available: Python is often used as a support language for software developers,\nfor build control and management, testing, and in many other ways. Python is also used to build ERP and e-commerce systems: The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/about/quotes/",
    "title": "Quotes about Python | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Python is used successfully in thousands of real-world business\napplications around the world, including many large and mission\ncritical systems.  Here are some quotes from happy Python users: \"Python is fast enough for our site and allows us to produce\nmaintainable features in record times, with a minimum of developers,\"\nsaid Cuong Do, Software Architect, YouTube.com. \"Python plays a key role in our production pipeline.  Without it a\nproject the size of Star Wars: Episode II would have been very\ndifficult to pull off. From crowd rendering to batch processing to\ncompositing, Python binds all things together,\" said Tommy Burnette,\nSenior Technical Director, Industrial Light & Magic. \"Python is everywhere at ILM. It's used to extend the capabilities\nof our applications, as well as providing the glue between them. Every\nCG image we create has involved Python somewhere in the process,\" said\nPhilip Peterson, Principal Engineer, Research & Development, Industrial Light & Magic. \"Python has been an important part of Google since the beginning,\nand remains so as the system grows and evolves. Today dozens of Google\nengineers use Python, and we're looking for more people with skills in\nthis language.\" said Peter Norvig, director of search quality at Google, Inc. \"Journyx technology, from the source code of our software to the code that\nmaintains our Web site and ASP sites, is entirely based on Python. It\nincreases our speed of development and keeps us several steps ahead of\ncompetitors while remaining easy to read and use.  It's as high level of a\nlanguage as you can have without running into functionality problems.  I\nestimate that Python makes our coders 10 times more productive than Java\nprogrammers, and 100 times more than C programmers.\" -- Curt Finch, CEO,\nJournyx \"IronPort email gateway appliances are used by the largest\ncorporations and ISPs in the world,\" said Mark Peek, Sr. Director of\nEngineering at IronPort Systems.  \"Python\nis a critical ingredient in this high performance system. IronPort's\nsuite of products contains over a million lines of Python. The PSF is\nan invaluable resource that helps keep Python on the cutting edge.\" \"Python enabled us to create EVE Online,\na massive multiplayer game, in record\ntime. The EVE Online server cluster runs over 50,000 simultaneous players\nin a shared space simulation, most of which is created in Python. The\nflexibilities of Python have enabled us to quickly improve the game\nexperience based on player feedback\" said\nHilmar Veigar Petursson of CCP Games. \"HomeGain maintains its commitment to continual improvement through\nrapid turnaround of new features and enhancements.  Python supports\nthis short time-to-market philosophy with concise, clear syntax and a\npowerful standard library.  New development proceeds rapidly, and\nmaintenance of existing code is straightforward and fast,\" said Geoff\nGerrietts, Software Engineer, HomeGain.com. \"Python makes us extremely productive, and makes\nmaintaining a large and rapidly evolving codebase relatively\nsimple,\" said Mark Shuttleworth. \"I have the students learn Python in our undergraduate and graduate\nSemantic Web courses.  Why?  Because basically there's nothing else\nwith the flexibility and as many web libraries,\" said Prof. James\nA. Hendler. \"The travel industry is made up of a myriad supplier data feeds all of\nwhich are proprietary in some way and are constantly changing.   Python\nrepeatedly has allowed us to access, build and test our in-house\ncommunications with hundreds of travel suppliers around the world in a\nmatter of days rather then the months it would have taken using other\nlanguages.  Since adopting Python 2 years ago, Python has provided us\nwith a measurable productivity gain that allows us to stay competitive\nin the online travel space,\" said Michael Engelhart, CTO of\nEZTrip.com. \"Python in conjunction with PHP has repeatedly allowed us to develop\nfast and proficient applications that permit Real Estate Agent .com to operate with minimal\nresources. Python is a critical part of our dynamically growing\ncluster directory of real estate agents.\" said Gadi Hus, Webmaster,\nVolico Web Consulting \"Like XML, scripting was extremely useful as both a mod tool and an\ninternal development tool.  If you don't have any need to expose code\nand algorithms in a simple and safe way to others, you can argue that\nproviding a scripting language is not worth the effort.  However, if\nyou do have that need, as we did, scripting is a no brainer, and it\nmakes complete sense to use a powerful, documented, cross-platform\nstandard such as Python.\"  -- Mustafa Thamer of Firaxis Games, talking\nabout Civilization IV.  Quoted on page 18 of the August 2005\nGame Developer Magazine. \"Python, like many good technologies, soon spreads virally throughout\nyour development team and finds its way into all sorts of applications\nand tools.  In other words, Python begins to feel like a big hammer and\ncoding tasks look like nails.\"\n-- Mustafa Thamer of Firaxis Games, talking about Civilization IV.\nQuoted on page 18 of the August 2005 Game Developer Magazine. \"We chose to use python because we wanted a well-supported scripting\nlanguage that could extend our core code. Indeed, we wrote much more\ncode in python than we were expecting, including all in-game screens\nand the main interface. It was a huge win for the project because\nwriting code in a language with garbage collection simply goes faster\nthan writing code in C++. The fact that users will be able to easily\nmod the interface is a nice plus as well. The downside of python was\nthat it significantly increased our build times, mostly from linking\nwith Boost.\" -- Soren Johnson, lead designer, Civilization IV.  Quoted\nin a Slashdot interview. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/about/gettingstarted/",
    "title": "Python For Beginners | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Welcome! Are you completely new to programming?\nIf not then we presume you will be looking for information about\nwhy and how to get started with Python.\nFortunately an\nexperienced programmer in any programming language (whatever it may be)\ncan pick up Python very quickly.\nIt's also easy for beginners to use and learn, so\njump in! Installing Python is generally easy, and nowadays\nmany Linux and UNIX distributions include a recent Python.\nEven\nsome Windows computers (notably those from HP) now come with Python\nalready installed.\nIf you do need to install Python and aren't confident about the\ntask you can find\na few notes on the\nBeginnersGuide/Download\nwiki page, but installation is unremarkable on most platforms. Before getting started, you may want to find out which IDEs and text\neditors are tailored to make\nPython editing easy, browse the list of introductory books, or look at code samples that you might find\nhelpful. There is a list of tutorials suitable for experienced programmers on the\nBeginnersGuide/Tutorials\npage. There is also a list of\nresources in other languages\nwhich might be useful if English is not your first language. The online documentation\nis your first port of call for definitive information.\nThere is a fairly brief\ntutorial\nthat gives you basic information about the language and\ngets you started. You can follow this by looking at the\nlibrary reference\nfor a full description of Python's many libraries and the\nlanguage reference for\na complete (though somewhat dry) explanation of Python's syntax.\nIf you are looking for common Python recipes and patterns, you\ncan browse the ActiveState Python Cookbook If you want to know whether a particular application, or a library\nwith particular functionality, is available in Python there are a\nnumber of possible sources of information. The Python web site\nprovides a\nPython Package Index\n(also known as the Cheese Shop, a reference to the Monty Python\nscript of that name).\nThere is also a\nsearch page for a number of sources of Python-related\ninformation. Failing that, just\nGoogle for a phrase including the word ''python''\nand you may well get the result you need.\nIf all else fails, ask on the\npython newsgroup\nand there's a good chance someone will put you on the right track. If you have a question, it's a good idea to try the\nFAQ, which answers the most commonly\nasked questions about Python. If you want to help to develop Python, take a look at the\ndeveloper area for further information.\nPlease note that you don't have to be an expert programmer\nto help.  The documentation is just as important as the\ncompiler, and still needs plenty of work! The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/about/help/",
    "title": "Help | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "http://brochure.getpython.info/",
    "title": "Get the Python Brochure Vol.1 as download! —",
    "content": "Skip to content. |\n\n  Skip to navigation Personal tools Navigation The first run of the printed edition was successfully released in 2014 at the PyCon in Montreal. After that we distributed this excellent showcase of Python to major computing conferences around the world. We were proud to offer to ship the second print run until end of 2016. We have send all our copies to your local events and shows around Python over the whole world. Since then it is still a growing technology that powers the web and science & engineering in both education and production. You can download the Python brochure as the latest updated screen resolution PDF suitable for electronic distribution and is well suited for low resolution printing on A4 as a A5 folded brochure booklet. The original printed issue was 32 pages, A4, full-color. Quick Read of License and redistribution rules of this PDF: Get the PDF file The Python Software Foundation (PSF) has collected success stories and case studies over the last two years and we've created a beautiful, professional quality printed brochure to promote the usage of Python to audiences which we are currently not reaching well. We cover business, science, industry, education, media, government, public sector and charity stories. Our target groups are CIOs and chief developers, scientists and programmers, university lecturers, teachers and students, customers, clients, managers and employees. Until a new edition is planned, you can still get the PDF file as download. RSS news feed Twitter @pythonbrochure or subscribe to our email newsletter"
  },
  {
    "url": "https://www.python.org/downloads/",
    "title": "Download Python | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Download Python 3.13.5 Download Python 3.13.5 Download Python 3.13.5 Download Python 3.13.5 Looking for Python with a different OS? Python for\r\n  Windows,\r\n  Linux/Unix,\r\n  macOS,\r\n  other Want to help test development versions of Python 3.14?\r\n  Pre-releases,\r\n  Docker images For more information visit the Python Developer's Guide. Python releases by version number: View older releases Visionary sponsors help to host Python downloads. All Python releases are Open Source. Historically, most, but not all, Python releases have also been GPL-compatible. The Licenses page details GPL-compatibility and Terms and Conditions. Read more For most Unix systems, you must download and compile the source code. The same source code archive can also be used to build the Windows and Mac versions, and is the starting point for ports to all other platforms. Download the latest Python 3 source. Read more This site hosts the \"traditional\" implementation of Python (nicknamed CPython). A number of alternative implementations are available as well. Read more Python was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum in the Netherlands as a successor of a language called ABC. Guido remains Python’s principal author, although it includes many contributions from others. Read more See Status of Python Versions for all an overview of all versions, including unsupported. Starting with the Python 3.11.0, Python 3.10.7, and Python 3.9.14 releases, CPython release artifacts are signed with Sigstore. See our dedicated Sigstore Information page for how it works. Python versions before 3.14 are also signed using OpenPGP private keys of the respective release manager. In this case, verification through the release manager's public key is also possible.\r\nSee our dedicated OpenPGP Verification page for how it works. See PEP 761 for why OpenPGP key verification was dropped in Python 3.14. (Updated for Azure Trusted Signing, which applies for all releases chronologically from 3.14.0a1)\r\n\r\nThe Windows installers and all binaries produced as part of each Python release are signed using an Authenticode signing certificate issued to the Python Software Foundation. This can be verified by viewing the properties of any executable file, looking at the Digital Signatures tab, and confirming the name of the signer. Our full certificate subject is CN = Python Software Foundation, O = Python Software Foundation, L = Beaverton, S = Oregon, C = US and as of 14th October 2024 the certificate authority is Microsoft Identity Verification Root Certificate Authority. Our previous certificates were issued by DigiCert.\r\n\r\nNote that some executables may not be signed, notably, the default pip command. These are not built as part of Python, but are included from third-party libraries. Files that are intended to be modified before use cannot be signed and so will not have a signature.\r\n\r\nmacOS Installer Packages\n\r\nInstaller packages for Python on macOS downloadable from python.org are signed with\r\nwith an Apple Developer ID Installer certificate.\r\n\n\r\nAs of Python 3.11.4 and 3.12.0b1 (2023-05-23), release installer packages are signed with certificates issued to the Python Software Foundation (Apple Developer ID BMM5U3QVKW)).\r\n\n\r\nInstaller packages for previous releases were signed with certificates issued to Ned Deily (DJ3H93M7VJ).\r\n\nOther Useful Items\n\nLooking for third-party Python modules?  The\r\nPython Package Index has many of them.\nYou can view the standard documentation\r\nonline, or you can download it\r\nin HTML, PostScript, PDF and other formats.  See the main\r\nDocumentation page.\nInformation on tools for unpacking archive files\r\nprovided on python.org is available.\nTip: even if you download a ready-made binary for your\r\nplatform, it makes sense to also download the source.\r\nThis lets you browse the standard library (the subdirectory Lib)\r\nand the standard collections of tools\r\n(Tools) that come with it.  There's a lot you can learn from the\r\nsource!\n\nWant to contribute?\nWant to contribute?  See the Python Developer's Guide\r\nto learn about how Python development is managed. Installer packages for Python on macOS downloadable from python.org are signed with\r\nwith an Apple Developer ID Installer certificate. As of Python 3.11.4 and 3.12.0b1 (2023-05-23), release installer packages are signed with certificates issued to the Python Software Foundation (Apple Developer ID BMM5U3QVKW)). Installer packages for previous releases were signed with certificates issued to Ned Deily (DJ3H93M7VJ). Want to contribute?  See the Python Developer's Guide\r\nto learn about how Python development is managed. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/downloads/source/",
    "title": "Python Source Releases | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/downloads/windows/",
    "title": "Python Releases for Windows | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Note that Python 3.13.5 cannot be used on Windows 7 or earlier. Note that Python 3.13.4 cannot be used on Windows 7 or earlier. Note that Python 3.13.3 cannot be used on Windows 7 or earlier. Note that Python 3.12.10 cannot be used on Windows 7 or earlier. Note that Python 3.13.2 cannot be used on Windows 7 or earlier. Note that Python 3.12.9 cannot be used on Windows 7 or earlier. Note that Python 3.12.8 cannot be used on Windows 7 or earlier. Note that Python 3.13.1 cannot be used on Windows 7 or earlier. Note that Python 3.13.0 cannot be used on Windows 7 or earlier. Note that Python 3.12.7 cannot be used on Windows 7 or earlier. Note that Python 3.12.6 cannot be used on Windows 7 or earlier. Note that Python 3.12.5 cannot be used on Windows 7 or earlier. Note that Python 3.12.4 cannot be used on Windows 7 or earlier. Note that Python 3.12.3 cannot be used on Windows 7 or earlier. Note that Python 3.11.9 cannot be used on Windows 7 or earlier. Note that Python 3.11.8 cannot be used on Windows 7 or earlier. Note that Python 3.12.2 cannot be used on Windows 7 or earlier. Note that Python 3.12.1 cannot be used on Windows 7 or earlier. Note that Python 3.11.7 cannot be used on Windows 7 or earlier. Note that Python 3.12.0 cannot be used on Windows 7 or earlier. Note that Python 3.11.6 cannot be used on Windows 7 or earlier. Note that Python 3.11.5 cannot be used on Windows 7 or earlier. Note that Python 3.11.4 cannot be used on Windows 7 or earlier. Note that Python 3.10.11 cannot be used on Windows 7 or earlier. Note that Python 3.11.3 cannot be used on Windows 7 or earlier. Note that Python 3.10.10 cannot be used on Windows 7 or earlier. Note that Python 3.11.2 cannot be used on Windows 7 or earlier. Note that Python 3.11.1 cannot be used on Windows 7 or earlier. Note that Python 3.10.9 cannot be used on Windows 7 or earlier. Note that Python 3.11.0 cannot be used on Windows 7 or earlier. Note that Python 3.10.8 cannot be used on Windows 7 or earlier. Note that Python 3.10.7 cannot be used on Windows 7 or earlier. Note that Python 3.10.6 cannot be used on Windows 7 or earlier. Note that Python 3.10.5 cannot be used on Windows 7 or earlier. Note that Python 3.9.13 cannot be used on Windows 7 or earlier. Note that Python 3.10.4 cannot be used on Windows 7 or earlier. Note that Python 3.9.12 cannot be used on Windows 7 or earlier. Note that Python 3.10.3 cannot be used on Windows 7 or earlier. Note that Python 3.9.11 cannot be used on Windows 7 or earlier. Note that Python 3.9.10 cannot be used on Windows 7 or earlier. Note that Python 3.10.2 cannot be used on Windows 7 or earlier. Note that Python 3.10.1 cannot be used on Windows 7 or earlier. Note that Python 3.9.9 cannot be used on Windows 7 or earlier. Note that Python 3.9.8 cannot be used on Windows 7 or earlier. Note that Python 3.10.0 cannot be used on Windows 7 or earlier. Note that Python 3.9.7 cannot be used on Windows 7 or earlier. Note that Python 3.9.6 cannot be used on Windows 7 or earlier. Note that Python 3.9.5 cannot be used on Windows 7 or earlier. Note that Python 3.8.10 cannot be used on Windows XP or earlier. Note that Python 3.9.4 cannot be used on Windows 7 or earlier. Note that Python 3.8.9 cannot be used on Windows XP or earlier. Note that Python 3.9.2 cannot be used on Windows 7 or earlier. Note that Python 3.8.8 cannot be used on Windows XP or earlier. Note that Python 3.8.7 cannot be used on Windows XP or earlier. Note that Python 3.9.1 cannot be used on Windows 7 or earlier. Note that Python 3.9.0 cannot be used on Windows 7 or earlier. Note that Python 3.8.6 cannot be used on Windows XP or earlier. Note that Python 3.8.6rc1 cannot be used on Windows XP or earlier. Note that Python 3.7.9 cannot be used on Windows XP or earlier. Note that Python 3.8.5 cannot be used on Windows XP or earlier. Note that Python 3.8.4 cannot be used on Windows XP or earlier. Note that Python 3.8.4rc1 cannot be used on Windows XP or earlier. Note that Python 3.7.8 cannot be used on Windows XP or earlier. Note that Python 3.8.3 cannot be used on Windows XP or earlier. Note that Python 3.8.3rc1 cannot be used on Windows XP or earlier. Note that Python 3.7.7 cannot be used on Windows XP or earlier. Note that Python 3.8.2 cannot be used on Windows XP or earlier. Note that Python 3.8.1 cannot be used on Windows XP or earlier. Note that Python 3.7.6 cannot be used on Windows XP or earlier. Note that Python 3.7.5 cannot be used on Windows XP or earlier. Note that Python 3.8.0 cannot be used on Windows XP or earlier. Note that Python 3.7.4 cannot be used on Windows XP or earlier. Note that Python 3.7.3 cannot be used on Windows XP or earlier. Note that Python 3.7.2 cannot be used on Windows XP or earlier. Note that Python 3.6.8 cannot be used on Windows XP or earlier. Note that Python 3.7.1 cannot be used on Windows XP or earlier. Note that Python 3.6.7 cannot be used on Windows XP or earlier. Note that Python 3.7.0 cannot be used on Windows XP or earlier. Note that Python 3.6.6 cannot be used on Windows XP or earlier. Note that Python 3.6.5 cannot be used on Windows XP or earlier. Note that Python 3.6.4 cannot be used on Windows XP or earlier. Note that Python 3.6.3 cannot be used on Windows XP or earlier. Note that Python 3.5.4 cannot be used on Windows XP or earlier. Note that Python 3.6.2 cannot be used on Windows XP or earlier. Note that Python 3.6.1 cannot be used on Windows XP or earlier. Note that Python 3.5.3 cannot be used on Windows XP or earlier. Note that Python 3.6.0 cannot be used on Windows XP or earlier. Note that Python 3.5.2 cannot be used on Windows XP or earlier. Note that Python 3.5.1 cannot be used on Windows XP or earlier. Note that Python 3.5.0 cannot be used on Windows XP or earlier. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/downloads/macos/",
    "title": "Python Releases for macOS | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/download/other/",
    "title": "Download Python for other platforms | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Python has been ported to a number of specialized and/or older platforms,\nlisted below in alphabetical order.  Note that these ports often lag\nwell behind the latest Python release. Briefcase (from the BeeWare project) and Buildozer (from the Kivy project) are two tools that can be used to deploy Python code as an Android app. Chaquopy is a project that can be used to embed Python into an existing Android Gradle project. The Chaquopy binaries are used by Briefcase when deploying to Android. pyqtdeploy can be used to convert a Qt project into an Android app. Termux is a terminal emulator and Linux environment that provides a Python binary. AIX binary packages for Python are available from IBM AIX Toolbox in RPM format. They can be installed using dnf package manager. Visit the Get Started page for more details. You can purchase ActivePython\n(commercial and community versions, including scientific computing modules, not open source) Both Python 2 and Python 3 are available from IBM in RPM form. They can be installed with the yum package manager or with the IBM i Access Client Solutions product. To get started with RPM-based open source packages for IBM i, visit http://ibm.biz/ibmi-rpms.  These RPM packages require a version of IBM i in active (not extended) support. Briefcase (from the BeeWare project) and Buildozer (from the Kivy project) are two tools that can be used to deploy Python code as an iOS app. Python-Apple-support is a project that provides pre-compiled Python frameworks that can be embedded into an Xcode project. PythonKit can be used to provide Swift integration with Python. Pythonista is a complete development environment for writing Python scripts including third-party libraries and system integration on your iPad or iPhone. Pyto  also provides a complete development environment for running Python 3 including many third-party libraries and system integration on an iPad or iPhone. You can purchase ActivePython\n(commercial and community versions, including scientific computing modules, not open source) Python is available for RISC OS, and can be obtained using the PackMan package manager. You can purchase ActivePython\n(commercial and community versions, including scientific computing modules, not open source), or build from\nsource if you have a C compiler. UNIX Packages has a variety\nof Python versions for a variety of Solaris versions.  These use the\nstandard Sun pkgadd. Standard CPython version 3.6.8 port for the Unified Extensible Firmware Interface (UEFI)\nshell environment is available through the Tianocore open source project.\nThis provides the standard Python scripting capabilities on UEFI environment,\nhelping the UEFI based firmware and platform developer community to use it for platform,\nfirmware validation, debug and the like.\nPython for UEFI source code and build instructions are available here. Currently build support is enabled using VS2019 and GCC5 tool chains for x86 and x64 bit platforms. Rocket Software provides a port of Python for z/OS. Python for z/OS is available from IBM for no license charge. It is available in PAX format from\nEarly Programs Web Tool\nor SMP/E format from Shopz.\nOptional no-cost Subscription and Support (S&S) is available in the Shopz ordering process.\nPlease visit the IBM Open Enterprise SDK for Python product page for more information. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://docs.python.org/3/license.html",
    "title": "History and License — Python 3.13.5 documentation",
    "content": "Copyright Python was created in the early 1990s by Guido van Rossum at Stichting\nMathematisch Centrum (CWI, see https://www.cwi.nl) in the Netherlands as a\nsuccessor of a language called ABC.  Guido remains Pythonâs principal author,\nalthough it includes many contributions from others. In 1995, Guido continued his work on Python at the Corporation for National\nResearch Initiatives (CNRI, see https://www.cnri.reston.va.us) in Reston,\nVirginia where he released several versions of the software. In May 2000, Guido and the Python core development team moved to BeOpen.com to\nform the BeOpen PythonLabs team.  In October of the same year, the PythonLabs\nteam moved to Digital Creations, which became\nZope Corporation.  In 2001, the Python Software Foundation (PSF, see\nhttps://www.python.org/psf/) was formed, a non-profit organization created\nspecifically to own Python-related Intellectual Property.  Zope Corporation was a\nsponsoring member of the PSF. All Python releases are Open Source (see https://opensource.org for the Open\nSource Definition). Historically, most, but not all, Python releases have also\nbeen GPL-compatible; the table below summarizes the various releases. Release Derived from Year Owner GPL-compatible? (1) 0.9.0 thru 1.2 n/a 1991-1995 CWI yes 1.3 thru 1.5.2 1.2 1995-1999 CNRI yes 1.6 1.5.2 2000 CNRI no 2.0 1.6 2000 BeOpen.com no 1.6.1 1.6 2001 CNRI yes (2) 2.1 2.0+1.6.1 2001 PSF no 2.0.1 2.0+1.6.1 2001 PSF yes 2.1.1 2.1+2.0.1 2001 PSF yes 2.1.2 2.1.1 2002 PSF yes 2.1.3 2.1.2 2002 PSF yes 2.2 and above 2.1.1 2001-now PSF yes Note GPL-compatible doesnât mean that weâre distributing Python under the GPL.\nAll Python licenses, unlike the GPL, let you distribute a modified version\nwithout making your changes open source. The GPL-compatible licenses make\nit possible to combine Python with other software that is released under\nthe GPL; the others donât. According to Richard Stallman, 1.6.1 is not GPL-compatible, because its license\nhas a choice of law clause. According to CNRI, however, Stallmanâs lawyer has\ntold CNRIâs lawyer that 1.6.1 is ânot incompatibleâ with the GPL. Thanks to the many outside volunteers who have worked under Guidoâs direction to\nmake these releases possible. Python software and documentation are licensed under the\nPython Software Foundation License Version 2. Starting with Python 3.8.6, examples, recipes, and other code in\nthe documentation are dual licensed under the PSF License Version 2\nand the Zero-Clause BSD license. Some software incorporated into Python is under different licenses.\nThe licenses are listed with code falling under that license.\nSee Licenses and Acknowledgements for Incorporated Software for an incomplete list of these licenses. BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1 This section is an incomplete, but growing list of licenses and acknowledgements\nfor third-party software incorporated in the Python distribution. The _random C extension underlying the random module\nincludes code based on a download from\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html. The following are\nthe verbatim comments from the original code: The socket module uses the functions, getaddrinfo(), and\ngetnameinfo(), which are coded in separate source files from the WIDE\nProject, https://www.wide.ad.jp/. The test.support.asynchat and test.support.asyncore\nmodules contain the following notice: The http.cookies module contains the following notice: The trace module contains the following notice: The uu codec contains the following notice: The xmlrpc.client module contains the following notice: The test.test_epoll module contains the following notice: The select module contains the following notice for the kqueue\ninterface: The file Python/pyhash.c contains Marek Majkowskiâ implementation of\nDan Bernsteinâs SipHash24 algorithm. It contains the following note: The file Python/dtoa.c, which supplies C functions dtoa and\nstrtod for conversion of C doubles to and from strings, is derived\nfrom the file of the same name by David M. Gay, currently available\nfrom https://web.archive.org/web/20220517033456/http://www.netlib.org/fp/dtoa.c.\nThe original file, as retrieved on March 16, 2009, contains the following\ncopyright and licensing notice: The modules hashlib, posix and ssl use\nthe OpenSSL library for added performance if made available by the\noperating system. Additionally, the Windows and macOS installers for\nPython may include a copy of the OpenSSL libraries, so we include a copy\nof the OpenSSL license here. For the OpenSSL 3.0 release,\nand later releases derived from that, the Apache License v2 applies: The pyexpat extension is built using an included copy of the expat\nsources unless the build is configured --with-system-expat: The _ctypes C extension underlying the ctypes module\nis built using an included copy of the libffi\nsources unless the build is configured --with-system-libffi: The zlib extension is built using an included copy of the zlib\nsources if the zlib version found on the system is too old to be\nused for the build: The implementation of the hash table used by the tracemalloc is based\non the cfuhash project: The _decimal C extension underlying the decimal module\nis built using an included copy of the libmpdec\nlibrary unless the build is configured --with-system-libmpdec: The C14N 2.0 test suite in the test package\n(Lib/test/xmltestdata/c14n-20/) was retrieved from the W3C website at\nhttps://www.w3.org/TR/xml-c14n2-testcases/ and is distributed under the\n3-clause BSD license: MIT License: Parts of the asyncio module are incorporated from\nuvloop 0.16,\nwhich is distributed under the MIT license: The file Python/qsbr.c is adapted from FreeBSDâs âGlobal Unbounded\nSequencesâ safe memory reclamation scheme in\nsubr_smr.c.\nThe file is distributed under the 2-Clause BSD License: Copyright"
  },
  {
    "url": "https://www.python.org/download/alternatives",
    "title": "Alternative Python Implementations | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. This site hosts the \"traditional\" implementation of Python (nicknamed CPython).\nA number of alternative implementations are available as well, namely Other parties have re-packaged CPython.  These re-packagings often\ninclude more libraries or are specialized for a particular application: If you want to host and run Python in the cloud, these implementations may be right for you: The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/doc/",
    "title": "Our Documentation | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Python's documentation, tutorials, and guides are constantly evolving. Get started here, or scroll down for documentation broken out by type and subject. Python Docs See also Documentation Releases by Version Can’t find what you’re looking for? Try our comprehensive Help section Open source software is made better when users can easily contribute code and documentation to fix bugs and add features. Python strongly encourages community involvement in improving the software. Learn more about how to make Python better for everyone. Contribute to Python\nIssue Tracker Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/doc/av",
    "title": "Audio/Video Instructional Materials for Python | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. There is a growing body of podcasts, screencasts and video presentations for\nthe Python community.  This page collects some of the best. Python411 is a series of podcasts about Python presented by Ron Stephens,\naimed at hobbyists and others who are learning Python.  Each episode\nfocuses on one aspect of learning Python, or one kind of Python\nprogramming, and points to online tools and tutorials.  Python related news\nand events will also be reported upon as well as interviews with key\nPython contributors. Ron has built up quite a collection of podcasts since he started in May\n2005 - over fifty as of April 2007.  They are great for listening to on\nthe train or in traffic. The site provides an XML/RSS feed to which you can subscribe with your\nfavorite reader or make a live bookmark of dropdown podcast titles\nusing Mozilla Firefox. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://wiki.python.org/moin/BeginnersGuide",
    "title": "BeginnersGuide - Python Wiki",
    "content": "Beginner's Guide to Python\nNew to programming? Python is free and easy to learn if you know where to start! This guide will help you to get started quickly. Chinese Translation/中文版入门 \nNew to Python?\nRead BeginnersGuide/Overview for a short explanation of what Python is. \nGetting Python\nNext, install the Python 3 interpreter on your computer. This is the program that reads Python programs and carries out their instructions; you need it before you can do any Python programming. Mac and Linux distributions may include an outdated version of Python (Python 2), but you should install an updated one (Python 3). See BeginnersGuide/Download for instructions to download the correct version of Python. There are also Python interpreter and IDE bundles available, such as Thonny. Other options can be found at IntegratedDevelopmentEnvironments. At some stage, you'll want to edit and save your program code. Take a look at HowToEditPythonCode for some advice and recommendations. \nLearning Python\nNext, read a tutorial and try some simple experiments with your new Python interpreter. If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials. If you have previous programming experience, consult BeginnersGuide/Programmers, which lists more advanced tutorials. If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources. Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows. Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation New to programming? Python is free and easy to learn if you know where to start! This guide will help you to get started quickly. Chinese Translation/中文版入门 \nNew to Python?\nRead BeginnersGuide/Overview for a short explanation of what Python is. \nGetting Python\nNext, install the Python 3 interpreter on your computer. This is the program that reads Python programs and carries out their instructions; you need it before you can do any Python programming. Mac and Linux distributions may include an outdated version of Python (Python 2), but you should install an updated one (Python 3). See BeginnersGuide/Download for instructions to download the correct version of Python. There are also Python interpreter and IDE bundles available, such as Thonny. Other options can be found at IntegratedDevelopmentEnvironments. At some stage, you'll want to edit and save your program code. Take a look at HowToEditPythonCode for some advice and recommendations. \nLearning Python\nNext, read a tutorial and try some simple experiments with your new Python interpreter. If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials. If you have previous programming experience, consult BeginnersGuide/Programmers, which lists more advanced tutorials. If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources. Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows. Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Chinese Translation/中文版入门 \nNew to Python?\nRead BeginnersGuide/Overview for a short explanation of what Python is. \nGetting Python\nNext, install the Python 3 interpreter on your computer. This is the program that reads Python programs and carries out their instructions; you need it before you can do any Python programming. Mac and Linux distributions may include an outdated version of Python (Python 2), but you should install an updated one (Python 3). See BeginnersGuide/Download for instructions to download the correct version of Python. There are also Python interpreter and IDE bundles available, such as Thonny. Other options can be found at IntegratedDevelopmentEnvironments. At some stage, you'll want to edit and save your program code. Take a look at HowToEditPythonCode for some advice and recommendations. \nLearning Python\nNext, read a tutorial and try some simple experiments with your new Python interpreter. If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials. If you have previous programming experience, consult BeginnersGuide/Programmers, which lists more advanced tutorials. If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources. Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows. Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation New to Python?\nRead BeginnersGuide/Overview for a short explanation of what Python is. \nGetting Python\nNext, install the Python 3 interpreter on your computer. This is the program that reads Python programs and carries out their instructions; you need it before you can do any Python programming. Mac and Linux distributions may include an outdated version of Python (Python 2), but you should install an updated one (Python 3). See BeginnersGuide/Download for instructions to download the correct version of Python. There are also Python interpreter and IDE bundles available, such as Thonny. Other options can be found at IntegratedDevelopmentEnvironments. At some stage, you'll want to edit and save your program code. Take a look at HowToEditPythonCode for some advice and recommendations. \nLearning Python\nNext, read a tutorial and try some simple experiments with your new Python interpreter. If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials. If you have previous programming experience, consult BeginnersGuide/Programmers, which lists more advanced tutorials. If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources. Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows. Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Read BeginnersGuide/Overview for a short explanation of what Python is. \nGetting Python\nNext, install the Python 3 interpreter on your computer. This is the program that reads Python programs and carries out their instructions; you need it before you can do any Python programming. Mac and Linux distributions may include an outdated version of Python (Python 2), but you should install an updated one (Python 3). See BeginnersGuide/Download for instructions to download the correct version of Python. There are also Python interpreter and IDE bundles available, such as Thonny. Other options can be found at IntegratedDevelopmentEnvironments. At some stage, you'll want to edit and save your program code. Take a look at HowToEditPythonCode for some advice and recommendations. \nLearning Python\nNext, read a tutorial and try some simple experiments with your new Python interpreter. If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials. If you have previous programming experience, consult BeginnersGuide/Programmers, which lists more advanced tutorials. If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources. Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows. Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Getting Python\nNext, install the Python 3 interpreter on your computer. This is the program that reads Python programs and carries out their instructions; you need it before you can do any Python programming. Mac and Linux distributions may include an outdated version of Python (Python 2), but you should install an updated one (Python 3). See BeginnersGuide/Download for instructions to download the correct version of Python. There are also Python interpreter and IDE bundles available, such as Thonny. Other options can be found at IntegratedDevelopmentEnvironments. At some stage, you'll want to edit and save your program code. Take a look at HowToEditPythonCode for some advice and recommendations. \nLearning Python\nNext, read a tutorial and try some simple experiments with your new Python interpreter. If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials. If you have previous programming experience, consult BeginnersGuide/Programmers, which lists more advanced tutorials. If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources. Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows. Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Next, install the Python 3 interpreter on your computer. This is the program that reads Python programs and carries out their instructions; you need it before you can do any Python programming. Mac and Linux distributions may include an outdated version of Python (Python 2), but you should install an updated one (Python 3). See BeginnersGuide/Download for instructions to download the correct version of Python. There are also Python interpreter and IDE bundles available, such as Thonny. Other options can be found at IntegratedDevelopmentEnvironments. At some stage, you'll want to edit and save your program code. Take a look at HowToEditPythonCode for some advice and recommendations. \nLearning Python\nNext, read a tutorial and try some simple experiments with your new Python interpreter. If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials. If you have previous programming experience, consult BeginnersGuide/Programmers, which lists more advanced tutorials. If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources. Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows. Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation There are also Python interpreter and IDE bundles available, such as Thonny. Other options can be found at IntegratedDevelopmentEnvironments. At some stage, you'll want to edit and save your program code. Take a look at HowToEditPythonCode for some advice and recommendations. \nLearning Python\nNext, read a tutorial and try some simple experiments with your new Python interpreter. If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials. If you have previous programming experience, consult BeginnersGuide/Programmers, which lists more advanced tutorials. If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources. Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows. Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation At some stage, you'll want to edit and save your program code. Take a look at HowToEditPythonCode for some advice and recommendations. \nLearning Python\nNext, read a tutorial and try some simple experiments with your new Python interpreter. If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials. If you have previous programming experience, consult BeginnersGuide/Programmers, which lists more advanced tutorials. If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources. Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows. Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Learning Python\nNext, read a tutorial and try some simple experiments with your new Python interpreter. If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials. If you have previous programming experience, consult BeginnersGuide/Programmers, which lists more advanced tutorials. If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources. Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows. Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Next, read a tutorial and try some simple experiments with your new Python interpreter. If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials. If you have previous programming experience, consult BeginnersGuide/Programmers, which lists more advanced tutorials. If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources. Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows. Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials. If you have previous programming experience, consult BeginnersGuide/Programmers, which lists more advanced tutorials. If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources. Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows. Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Beginners Python tutorial at Python Land (free) Codédex (non-free) Outdated, Python 2! * Codecademy  Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation. It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation When you are ready to write your first program, you will need a text editor or an IDE. If you don't want to use Thonny or something more advanced, then you can use IDLE, which is bundled with Python and supports extensions. This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. \nNeed Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Need Help?\nNeed help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Need help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Teachers can join the EDU-SIG, a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. \nComplete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Complete list of Beginner's Guide pages\n\nBeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation BeginnersGuide/DownloadBeginnersGuide/ExamplesBeginnersGuide/HelpBeginnersGuide/MathematicsBeginnersGuide/NonProgrammersBeginnersGuide/NonProgrammersChineseBeginnersGuide/OverviewBeginnersGuide/OverviewChineseBeginnersGuide/ProgrammersBeginnersGuide/Programmers (Cpp2Python.pdf)BeginnersGuide/Programmers/SimpleExamples\n \nQuiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Quiz and Exercises\nAfter Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform \nPython Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation After Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform Python Based AI and Prompt Engineering\nAI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) \nLooking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation AI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) Looking for a particular Python module or application?\nThe first place to look is the Python Package Index. If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. \nPython-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation The first place to look is the Python Package Index. try searching python.org - you can find anything mentioned on the Python site, in the FAQs, or in the newsgroup. More info: where to search. Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Python-Related Cheat Sheets\nPython: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets \nWant to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Python: Collection of 11 Best Python Cheat Sheets NumPy: Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets Want to contribute?\nPython is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page.  CategoryDocumentation Python is a product of the Python Software Foundation, a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal. To report a bug in the Python core, use the Python Bug Tracker. To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation, join the Documentation SIG, write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce. See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python. If you have an implementation, follow the Python Patch Guidelines. If you have a question are not sure where to report it, check out the WhereDoIReportThis? page. CategoryDocumentation CategoryDocumentation BeginnersGuide  (last edited 2025-03-07 01:13:11 by MaciejOlko) Unable to edit the page? See the FrontPage for instructions."
  },
  {
    "url": "https://devguide.python.org/",
    "title": "Python Developer’s Guide",
    "content": "This guide is a comprehensive resource for contributing\nto Python – for both new and experienced contributors. It is\nmaintained by the same\ncommunity that maintains Python.  We welcome your contributions to Python! Here are the basic steps needed to get set up and contribute a pull request.\nThis is meant as a checklist, once you know the basics. For complete\ninstructions please see the setup guide. Install and set up Git and other dependencies\n(see the Git Setup page for detailed information). Fork the CPython repository\nto your GitHub account and get the source code using: Build Python: See also more detailed instructions,\nhow to install and build dependencies,\nand the platform-specific pages for Unix,\nmacOS, and Windows. Run the tests: Note: Most macOS systems use\n./python.exe in order to avoid filename conflicts with\nthe Python directory. Create a new branch where your work for the issue will go, for example: If an issue does not already exist, please create it.  Trivial issues (for example, typo fixes) do\nnot require any issue to be created. Once you fixed the issue, run the tests, and the patchcheck: If everything is ok, commit. Push the branch on your fork on GitHub and create a pull request.  Include the issue number using gh-NNNN in the\npull request description.  For example: Add a News entry into the Misc/NEWS.d directory as individual file. The\nnews entry can be created by using blurb-it,\nor the blurb tool and its blurb add\ncommand. Please read more about blurb in its\nrepository. Note First time contributors will need to sign the Contributor Licensing\nAgreement (CLA) as described in the Licensing section of\nthis guide. Here are some links that you probably will reference frequently while\ncontributing to Python: Issue tracker Buildbot status Where to get help PEPs (Python Enhancement Proposals) Git bootcamp and cheat sheet We encourage everyone to contribute to Python and that’s why we have put up this\ndeveloper’s guide.  If you still have questions after reviewing the material in\nthis guide, then the Core Python Mentorship group is available to help guide new\ncontributors through the process. A number of individuals from the Python community have contributed to a series\nof excellent guides at Open Source Guides. Core developers and contributors alike will find the following guides useful: How to Contribute to Open Source Building Welcoming Communities Guide for contributing to Python: Contributors Documentarians Triagers Core team Setup and building Helping with documentation Issue tracker Responsibilities Where to get help Getting started Triaging an issue Team log Lifecycle of a pull request Style guide Helping triage issues Accepting pull requests Running and writing tests reStructuredText primer Experts index Development cycle Fixing “easy” issues (and beyond) Translating GitHub labels Motivations and affiliations Following Python’s development Helping with the Developer’s Guide GitHub issues for BPO users Experts index Git bootcamp and cheat sheet Triage Team Development cycle We recommend that the documents in this guide be read as needed. You\ncan stop where you feel comfortable and begin contributing immediately without\nreading and understanding these documents all at once.  If you do choose to skip\naround within the documentation, be aware that it is written assuming preceding\ndocumentation has been read so you may find it necessary to backtrack to fill in\nmissing concepts and terminology. Improving Python’s code, documentation and tests are ongoing tasks that are\nnever going to be “finished”, as Python operates as part of an ever-evolving\nsystem of technology.  An even more challenging ongoing task than these\nnecessary maintenance activities is finding ways to make Python, in the form of\nthe standard library and the language definition, an even better tool in a\ndeveloper’s toolkit. While these kinds of change are much rarer than those described above, they do\nhappen and that process is also described as part of this guide: Adding to the stdlib Changing the Python language This guide is specifically for contributing to the Python reference interpreter,\nalso known as CPython (while most of the standard library is written in Python,\nthe interpreter core is written in C and integrates most easily with the C and\nC++ ecosystems). There are other Python implementations, each with a different focus.  Like\nCPython, they always have more things they would like to do than they have\ndevelopers to work on them.  Some major examples that may be of interest are: PyPy: A Python interpreter focused on high speed (JIT-compiled) operation\non major platforms. GraalPy: A Python interpreter which has first-class support for\nembedding in Java, built on GraalVM. Jython: A Python interpreter focused on good integration with the Java\nVirtual Machine (JVM) environment. IronPython: A Python interpreter focused on good integration with the\nCommon Language Runtime (CLR) provided by .NET and Mono. Stackless: A Python interpreter focused on providing lightweight\nmicrothreads while remaining largely compatible with CPython specific\nextension modules. MicroPython: A tiny Python interpreter with small subset of the Python\nstandard library that is optimised to run on microcontrollers and in\nconstrained environments. CircuitPython: A fork of MicroPython designed to simplify experimenting\nand learning to code on low-cost microcontroller boards. Coding style guides PEP 7 (Style Guide for C Code) PEP 8 (Style Guide for Python Code) Issue tracker Experts index Buildbot status Source code Browse online Snapshot of the *main* branch PEPs (Python Enhancement Proposals) Where to get help Team log Anyone can clone the sources for this guide.  See Helping with the Developer’s Guide. Help with … CPython source code Changing CPython’s grammar Guide to the parser Compiler design Garbage collector design Tool support GDB support Dynamic analysis with Clang Various tools with configuration files as found in the Misc directory Information about editors and their configurations can be found in the\nwiki python.org maintenance Search this guide Please note that all interactions on\nPython Software Foundation-supported\ninfrastructure is covered\nby the PSF Code of Conduct,\nwhich includes all infrastructure used in the development of Python itself\n(for example, mailing lists, issue trackers, GitHub, etc.).\nIn general this means everyone is expected to be open, considerate, and\nrespectful of others no matter what their position is within the project. Moved to Status of Python versions"
  },
  {
    "url": "http://wiki.python.org/moin/Languages",
    "title": "Languages - Python Wiki",
    "content": "Attempt to have languages and links listed in the native tongue of the user.  2009-09-01 This page's links go to the various languages' pages, most of which have been copied from the other set of language pages, with a few updates.  Ideally, all the pages should be like the Polish or Turkish pages - all native language, only the necessary English. There are some ground rules, some are laid down by the site admins, some are my suggestions: Pages must be named in ASCII and English (PolishLanguage) Pages must have an explanation in English at the top (Links to Python information in <language X>) (my suggestion) We probably want to limit invites to edit the pages to people we know well, or Pythonistas with a track record.  Hopefully, this is inclusive enough without opening the site up to a spam flood and vandalismfest. Where these pages really need help: check links, remove broken ones. add new links that are quality Python information and active. some care for languages that have next to nothing, but do have people in the Python community - even a link to the Wikipedia page for Python, in that language, is a start (Some are pretty complete and of high quality - the Russian language Wikipedia page for Python, for instance, packs a lot in). \nLanguages\nAfrikaansLanguage Afrikaans AlbanianLanguage Shqip AmharicLanguage አማርኛ ArabicLanguage العربية ArmenianLanguage Հայերեն AssameseLanguage অসমীয়া AzerbaijaniLanguage Azərbaycan dili BelarusianLanguage Беларуская мова BengaliLanguage বাংলা BodoLanguage बड़ो BosnianLanguage bosanski BulgarianLanguage български език BurmeseLanguage မြန်မာဘာသာ CatalanLanguage català ChineseLanguage 中文 CroatianLanguage hrvatski CzechLanguage čeština DanishLanguage dansk DogriLanguage डोगरी  Devanagari script DutchLanguage Nederlands EsperantoLanguage Esperanto EstonianLanguage eesti keel FinnishLanguage suomi FrenchLanguage français GeorgianLanguage ქართული ენა GermanLanguage Deutsch GreekLanguage Νέα Ελληνικά GujaratiLanguage ગુજરાતી HausaLanguage Hausa HebrewLanguage עִבְרִית HindiLanguage हिन्दी HungarianLanguage magyar nyelv IndonesianLanguage Bahasa Indonesia IcelandicLanguage íslenska IgboLanguage Asụsụ Igbo ItalianLanguage italiano JapaneseLanguage 日本語 KannadaLanguage ಕನ್ನಡ KashmiriLanguage कॉशुर (Koshur) KazakhLanguage Қазақ тілі KhmerLanguage ភាសាខ្មែរ KonkaniLanguage कोंकणी Devangari script KoreanLanguage 한국어/조선말 LaoLanguage ພາສາລາວ LatvianLanguage latviešu valoda LithuanianLanguage lietuvių kalba MalayLanguage Bahasa Melayu MalayalamLanguage മലയാളം MarathiLanguage मराठी MongolianLanguage Монгол хэл NepaliLanguage नेपाली NorwegianLanguage norsk OriyaLanguage ଓଡ଼ିଆ OromoLanguage Afaan Oromoo PersianLanguage فارسی PolishLanguage język polski PortugueseLanguage português PunjabiLanguage ਪੰਜਾਬੀ WesternPunjabiLanguage پنجابی RomanianLanguage limba română RussianLanguage русский язык SanskritLanguage संस्कृत SlovakLanguage slovenský jazyk SloveneLanguage slovenščina SerbianLanguage Српски SinhalaLanguage සිංහල SpanishLanguage español SwahiliLanguage Kiswahili SwedishLanguage svenska TagalogLanguage Wikang Tagalog TamilLanguage தமிழ TeluguLanguage తెలుగు ThaiLanguage ภาษาไทย TigrinyaLanguage ትግርኛ TurkishLanguage Türkçe UkranianLanguage украї́нська мо́ва UrduLanguage اُردوُ UzbekLanguage O‘zbek tili VietnameseLanguage tiếng Việt XhosaLanguage isiXhosa ZuluLanguage isiZulu CategoryLanguage CategoryUnicode 2009-09-01 This page's links go to the various languages' pages, most of which have been copied from the other set of language pages, with a few updates.  Ideally, all the pages should be like the Polish or Turkish pages - all native language, only the necessary English. There are some ground rules, some are laid down by the site admins, some are my suggestions: Pages must be named in ASCII and English (PolishLanguage) Pages must have an explanation in English at the top (Links to Python information in <language X>) (my suggestion) We probably want to limit invites to edit the pages to people we know well, or Pythonistas with a track record.  Hopefully, this is inclusive enough without opening the site up to a spam flood and vandalismfest. Where these pages really need help: check links, remove broken ones. add new links that are quality Python information and active. some care for languages that have next to nothing, but do have people in the Python community - even a link to the Wikipedia page for Python, in that language, is a start (Some are pretty complete and of high quality - the Russian language Wikipedia page for Python, for instance, packs a lot in). \nLanguages\nAfrikaansLanguage Afrikaans AlbanianLanguage Shqip AmharicLanguage አማርኛ ArabicLanguage العربية ArmenianLanguage Հայերեն AssameseLanguage অসমীয়া AzerbaijaniLanguage Azərbaycan dili BelarusianLanguage Беларуская мова BengaliLanguage বাংলা BodoLanguage बड़ो BosnianLanguage bosanski BulgarianLanguage български език BurmeseLanguage မြန်မာဘာသာ CatalanLanguage català ChineseLanguage 中文 CroatianLanguage hrvatski CzechLanguage čeština DanishLanguage dansk DogriLanguage डोगरी  Devanagari script DutchLanguage Nederlands EsperantoLanguage Esperanto EstonianLanguage eesti keel FinnishLanguage suomi FrenchLanguage français GeorgianLanguage ქართული ენა GermanLanguage Deutsch GreekLanguage Νέα Ελληνικά GujaratiLanguage ગુજરાતી HausaLanguage Hausa HebrewLanguage עִבְרִית HindiLanguage हिन्दी HungarianLanguage magyar nyelv IndonesianLanguage Bahasa Indonesia IcelandicLanguage íslenska IgboLanguage Asụsụ Igbo ItalianLanguage italiano JapaneseLanguage 日本語 KannadaLanguage ಕನ್ನಡ KashmiriLanguage कॉशुर (Koshur) KazakhLanguage Қазақ тілі KhmerLanguage ភាសាខ្មែរ KonkaniLanguage कोंकणी Devangari script KoreanLanguage 한국어/조선말 LaoLanguage ພາສາລາວ LatvianLanguage latviešu valoda LithuanianLanguage lietuvių kalba MalayLanguage Bahasa Melayu MalayalamLanguage മലയാളം MarathiLanguage मराठी MongolianLanguage Монгол хэл NepaliLanguage नेपाली NorwegianLanguage norsk OriyaLanguage ଓଡ଼ିଆ OromoLanguage Afaan Oromoo PersianLanguage فارسی PolishLanguage język polski PortugueseLanguage português PunjabiLanguage ਪੰਜਾਬੀ WesternPunjabiLanguage پنجابی RomanianLanguage limba română RussianLanguage русский язык SanskritLanguage संस्कृत SlovakLanguage slovenský jazyk SloveneLanguage slovenščina SerbianLanguage Српски SinhalaLanguage සිංහල SpanishLanguage español SwahiliLanguage Kiswahili SwedishLanguage svenska TagalogLanguage Wikang Tagalog TamilLanguage தமிழ TeluguLanguage తెలుగు ThaiLanguage ภาษาไทย TigrinyaLanguage ትግርኛ TurkishLanguage Türkçe UkranianLanguage украї́нська мо́ва UrduLanguage اُردوُ UzbekLanguage O‘zbek tili VietnameseLanguage tiếng Việt XhosaLanguage isiXhosa ZuluLanguage isiZulu CategoryLanguage CategoryUnicode Ideally, all the pages should be like the Polish or Turkish pages - all native language, only the necessary English. There are some ground rules, some are laid down by the site admins, some are my suggestions: Pages must be named in ASCII and English (PolishLanguage) Pages must have an explanation in English at the top (Links to Python information in <language X>) (my suggestion) We probably want to limit invites to edit the pages to people we know well, or Pythonistas with a track record.  Hopefully, this is inclusive enough without opening the site up to a spam flood and vandalismfest. Where these pages really need help: check links, remove broken ones. add new links that are quality Python information and active. some care for languages that have next to nothing, but do have people in the Python community - even a link to the Wikipedia page for Python, in that language, is a start (Some are pretty complete and of high quality - the Russian language Wikipedia page for Python, for instance, packs a lot in). \nLanguages\nAfrikaansLanguage Afrikaans AlbanianLanguage Shqip AmharicLanguage አማርኛ ArabicLanguage العربية ArmenianLanguage Հայերեն AssameseLanguage অসমীয়া AzerbaijaniLanguage Azərbaycan dili BelarusianLanguage Беларуская мова BengaliLanguage বাংলা BodoLanguage बड़ो BosnianLanguage bosanski BulgarianLanguage български език BurmeseLanguage မြန်မာဘာသာ CatalanLanguage català ChineseLanguage 中文 CroatianLanguage hrvatski CzechLanguage čeština DanishLanguage dansk DogriLanguage डोगरी  Devanagari script DutchLanguage Nederlands EsperantoLanguage Esperanto EstonianLanguage eesti keel FinnishLanguage suomi FrenchLanguage français GeorgianLanguage ქართული ენა GermanLanguage Deutsch GreekLanguage Νέα Ελληνικά GujaratiLanguage ગુજરાતી HausaLanguage Hausa HebrewLanguage עִבְרִית HindiLanguage हिन्दी HungarianLanguage magyar nyelv IndonesianLanguage Bahasa Indonesia IcelandicLanguage íslenska IgboLanguage Asụsụ Igbo ItalianLanguage italiano JapaneseLanguage 日本語 KannadaLanguage ಕನ್ನಡ KashmiriLanguage कॉशुर (Koshur) KazakhLanguage Қазақ тілі KhmerLanguage ភាសាខ្មែរ KonkaniLanguage कोंकणी Devangari script KoreanLanguage 한국어/조선말 LaoLanguage ພາສາລາວ LatvianLanguage latviešu valoda LithuanianLanguage lietuvių kalba MalayLanguage Bahasa Melayu MalayalamLanguage മലയാളം MarathiLanguage मराठी MongolianLanguage Монгол хэл NepaliLanguage नेपाली NorwegianLanguage norsk OriyaLanguage ଓଡ଼ିଆ OromoLanguage Afaan Oromoo PersianLanguage فارسی PolishLanguage język polski PortugueseLanguage português PunjabiLanguage ਪੰਜਾਬੀ WesternPunjabiLanguage پنجابی RomanianLanguage limba română RussianLanguage русский язык SanskritLanguage संस्कृत SlovakLanguage slovenský jazyk SloveneLanguage slovenščina SerbianLanguage Српски SinhalaLanguage සිංහල SpanishLanguage español SwahiliLanguage Kiswahili SwedishLanguage svenska TagalogLanguage Wikang Tagalog TamilLanguage தமிழ TeluguLanguage తెలుగు ThaiLanguage ภาษาไทย TigrinyaLanguage ትግርኛ TurkishLanguage Türkçe UkranianLanguage украї́нська мо́ва UrduLanguage اُردوُ UzbekLanguage O‘zbek tili VietnameseLanguage tiếng Việt XhosaLanguage isiXhosa ZuluLanguage isiZulu CategoryLanguage CategoryUnicode Ideally, all the pages should be like the Polish or Turkish pages - all native language, only the necessary English. There are some ground rules, some are laid down by the site admins, some are my suggestions: Pages must be named in ASCII and English (PolishLanguage) Pages must have an explanation in English at the top (Links to Python information in <language X>) (my suggestion) We probably want to limit invites to edit the pages to people we know well, or Pythonistas with a track record.  Hopefully, this is inclusive enough without opening the site up to a spam flood and vandalismfest. Where these pages really need help: check links, remove broken ones. add new links that are quality Python information and active. some care for languages that have next to nothing, but do have people in the Python community - even a link to the Wikipedia page for Python, in that language, is a start (Some are pretty complete and of high quality - the Russian language Wikipedia page for Python, for instance, packs a lot in). There are some ground rules, some are laid down by the site admins, some are my suggestions: Pages must be named in ASCII and English (PolishLanguage) Pages must have an explanation in English at the top (Links to Python information in <language X>) (my suggestion) We probably want to limit invites to edit the pages to people we know well, or Pythonistas with a track record.  Hopefully, this is inclusive enough without opening the site up to a spam flood and vandalismfest. Where these pages really need help: check links, remove broken ones. add new links that are quality Python information and active. some care for languages that have next to nothing, but do have people in the Python community - even a link to the Wikipedia page for Python, in that language, is a start (Some are pretty complete and of high quality - the Russian language Wikipedia page for Python, for instance, packs a lot in). Pages must be named in ASCII and English (PolishLanguage) Pages must have an explanation in English at the top (Links to Python information in <language X>) Where these pages really need help: check links, remove broken ones. add new links that are quality Python information and active. some care for languages that have next to nothing, but do have people in the Python community - even a link to the Wikipedia page for Python, in that language, is a start (Some are pretty complete and of high quality - the Russian language Wikipedia page for Python, for instance, packs a lot in). Languages\nAfrikaansLanguage Afrikaans AlbanianLanguage Shqip AmharicLanguage አማርኛ ArabicLanguage العربية ArmenianLanguage Հայերեն AssameseLanguage অসমীয়া AzerbaijaniLanguage Azərbaycan dili BelarusianLanguage Беларуская мова BengaliLanguage বাংলা BodoLanguage बड़ो BosnianLanguage bosanski BulgarianLanguage български език BurmeseLanguage မြန်မာဘာသာ CatalanLanguage català ChineseLanguage 中文 CroatianLanguage hrvatski CzechLanguage čeština DanishLanguage dansk DogriLanguage डोगरी  Devanagari script DutchLanguage Nederlands EsperantoLanguage Esperanto EstonianLanguage eesti keel FinnishLanguage suomi FrenchLanguage français GeorgianLanguage ქართული ენა GermanLanguage Deutsch GreekLanguage Νέα Ελληνικά GujaratiLanguage ગુજરાતી HausaLanguage Hausa HebrewLanguage עִבְרִית HindiLanguage हिन्दी HungarianLanguage magyar nyelv IndonesianLanguage Bahasa Indonesia IcelandicLanguage íslenska IgboLanguage Asụsụ Igbo ItalianLanguage italiano JapaneseLanguage 日本語 KannadaLanguage ಕನ್ನಡ KashmiriLanguage कॉशुर (Koshur) KazakhLanguage Қазақ тілі KhmerLanguage ភាសាខ្មែរ KonkaniLanguage कोंकणी Devangari script KoreanLanguage 한국어/조선말 LaoLanguage ພາສາລາວ LatvianLanguage latviešu valoda LithuanianLanguage lietuvių kalba MalayLanguage Bahasa Melayu MalayalamLanguage മലയാളം MarathiLanguage मराठी MongolianLanguage Монгол хэл NepaliLanguage नेपाली NorwegianLanguage norsk OriyaLanguage ଓଡ଼ିଆ OromoLanguage Afaan Oromoo PersianLanguage فارسی PolishLanguage język polski PortugueseLanguage português PunjabiLanguage ਪੰਜਾਬੀ WesternPunjabiLanguage پنجابی RomanianLanguage limba română RussianLanguage русский язык SanskritLanguage संस्कृत SlovakLanguage slovenský jazyk SloveneLanguage slovenščina SerbianLanguage Српски SinhalaLanguage සිංහල SpanishLanguage español SwahiliLanguage Kiswahili SwedishLanguage svenska TagalogLanguage Wikang Tagalog TamilLanguage தமிழ TeluguLanguage తెలుగు ThaiLanguage ภาษาไทย TigrinyaLanguage ትግርኛ TurkishLanguage Türkçe UkranianLanguage украї́нська мо́ва UrduLanguage اُردوُ UzbekLanguage O‘zbek tili VietnameseLanguage tiếng Việt XhosaLanguage isiXhosa ZuluLanguage isiZulu CategoryLanguage CategoryUnicode AfrikaansLanguage Afrikaans AlbanianLanguage Shqip AmharicLanguage አማርኛ ArabicLanguage العربية ArmenianLanguage Հայերեն AssameseLanguage অসমীয়া AzerbaijaniLanguage Azərbaycan dili BelarusianLanguage Беларуская мова BengaliLanguage বাংলা BodoLanguage बड़ो BosnianLanguage bosanski BulgarianLanguage български език BurmeseLanguage မြန်မာဘာသာ CatalanLanguage català ChineseLanguage 中文 CroatianLanguage hrvatski CzechLanguage čeština DanishLanguage dansk DogriLanguage डोगरी  Devanagari script DutchLanguage Nederlands EsperantoLanguage Esperanto EstonianLanguage eesti keel FinnishLanguage suomi FrenchLanguage français GeorgianLanguage ქართული ენა GermanLanguage Deutsch GreekLanguage Νέα Ελληνικά GujaratiLanguage ગુજરાતી HausaLanguage Hausa HebrewLanguage עִבְרִית HindiLanguage हिन्दी HungarianLanguage magyar nyelv IndonesianLanguage Bahasa Indonesia IcelandicLanguage íslenska IgboLanguage Asụsụ Igbo ItalianLanguage italiano JapaneseLanguage 日本語 KannadaLanguage ಕನ್ನಡ KashmiriLanguage कॉशुर (Koshur) KazakhLanguage Қазақ тілі KhmerLanguage ភាសាខ្មែរ KonkaniLanguage कोंकणी Devangari script KoreanLanguage 한국어/조선말 LaoLanguage ພາສາລາວ LatvianLanguage latviešu valoda LithuanianLanguage lietuvių kalba MalayLanguage Bahasa Melayu MalayalamLanguage മലയാളം MarathiLanguage मराठी MongolianLanguage Монгол хэл NepaliLanguage नेपाली NorwegianLanguage norsk OriyaLanguage ଓଡ଼ିଆ OromoLanguage Afaan Oromoo PersianLanguage فارسی PolishLanguage język polski PortugueseLanguage português PunjabiLanguage ਪੰਜਾਬੀ WesternPunjabiLanguage پنجابی RomanianLanguage limba română RussianLanguage русский язык SanskritLanguage संस्कृत SlovakLanguage slovenský jazyk SloveneLanguage slovenščina SerbianLanguage Српски SinhalaLanguage සිංහල SpanishLanguage español SwahiliLanguage Kiswahili SwedishLanguage svenska TagalogLanguage Wikang Tagalog TamilLanguage தமிழ TeluguLanguage తెలుగు ThaiLanguage ภาษาไทย TigrinyaLanguage ትግርኛ TurkishLanguage Türkçe UkranianLanguage украї́нська мо́ва UrduLanguage اُردوُ UzbekLanguage O‘zbek tili VietnameseLanguage tiếng Việt XhosaLanguage isiXhosa ZuluLanguage isiZulu CategoryLanguage CategoryUnicode Languages  (last edited 2025-05-01 12:20:09 by MaciejOlko) Unable to edit the page? See the FrontPage for instructions."
  },
  {
    "url": "https://peps.python.org",
    "title": "PEP 0 – Index of Python Enhancement Proposals (PEPs) | peps.python.org",
    "content": "This PEP contains the index of all Python Enhancement Proposals,\nknown as PEPs.  PEP numbers are assigned\nby the PEP editors, and once assigned are never changed.  The\nversion control history of\nthe PEP texts represent their historical record. PEPs for specialist subjects are indexed by topic. The PEPS API is a JSON file of metadata about all the published PEPs. Read more here. The numerical index contains a table of all PEPs, ordered by number. More info in PEP 1. More info in PEP 1."
  },
  {
    "url": "https://wiki.python.org/moin/PythonBooks",
    "title": "PythonBooks - Python Wiki",
    "content": "There are a variety of books about Python.  Here's a guide to them: IntroductoryBooks (gentle overviews of the language) AdvancedBooks (for when you don't want gentle) ReferenceBooks (much information in a small space) Specific applications: GameProgrammingBooks NetworkProgrammingBooks GuiBooks JythonBooks ScientificProgrammingBooks SystemAdministrationBooks WebProgrammingBooks WindowsBooks XmlBooks ZopeBooks Books in languages other than English: UkrainianPythonBooks DutchPythonBooks FrenchPythonBooks GermanPythonBooks GreekPythonBooks HungarianPythonBooks JapanesePythonBooks KoreanPythonBooks RussianPythonBooks PersianPythonBooks PolishPythonBooks PortuguesePythonBooks ArabicPythonBooks SpanishPythonBooks When you see a book you like, don't hesitate to add your recommendation! There's also a Courses page, filled with links to video courses. External sources of information about (Python) books: PythonBooks.org - A collection of Python books featuring popularity based ranking. 101+ Free Python Books - You don't have to pay money to read great Python books. Many are free! Python Kindle & Paperback Collection - A good collection of Kindle and Paperback books on Python 3, Django, Flask, FastAPI, and Scientific Computing (NumPy, SciPy, and Pandas) There is also a list of OutOfPrintBooks. IntroductoryBooks (gentle overviews of the language) AdvancedBooks (for when you don't want gentle) ReferenceBooks (much information in a small space) GameProgrammingBooks NetworkProgrammingBooks GuiBooks JythonBooks ScientificProgrammingBooks SystemAdministrationBooks WebProgrammingBooks WindowsBooks XmlBooks ZopeBooks UkrainianPythonBooks DutchPythonBooks FrenchPythonBooks GermanPythonBooks GreekPythonBooks HungarianPythonBooks JapanesePythonBooks KoreanPythonBooks RussianPythonBooks PersianPythonBooks PolishPythonBooks PortuguesePythonBooks ArabicPythonBooks SpanishPythonBooks When you see a book you like, don't hesitate to add your recommendation! There's also a Courses page, filled with links to video courses. External sources of information about (Python) books: PythonBooks.org - A collection of Python books featuring popularity based ranking. 101+ Free Python Books - You don't have to pay money to read great Python books. Many are free! Python Kindle & Paperback Collection - A good collection of Kindle and Paperback books on Python 3, Django, Flask, FastAPI, and Scientific Computing (NumPy, SciPy, and Pandas) There is also a list of OutOfPrintBooks. There's also a Courses page, filled with links to video courses. External sources of information about (Python) books: PythonBooks.org - A collection of Python books featuring popularity based ranking. 101+ Free Python Books - You don't have to pay money to read great Python books. Many are free! Python Kindle & Paperback Collection - A good collection of Kindle and Paperback books on Python 3, Django, Flask, FastAPI, and Scientific Computing (NumPy, SciPy, and Pandas) There is also a list of OutOfPrintBooks. External sources of information about (Python) books: PythonBooks.org - A collection of Python books featuring popularity based ranking. 101+ Free Python Books - You don't have to pay money to read great Python books. Many are free! Python Kindle & Paperback Collection - A good collection of Kindle and Paperback books on Python 3, Django, Flask, FastAPI, and Scientific Computing (NumPy, SciPy, and Pandas) There is also a list of OutOfPrintBooks. PythonBooks.org - A collection of Python books featuring popularity based ranking. 101+ Free Python Books - You don't have to pay money to read great Python books. Many are free! Python Kindle & Paperback Collection - A good collection of Kindle and Paperback books on Python 3, Django, Flask, FastAPI, and Scientific Computing (NumPy, SciPy, and Pandas) There is also a list of OutOfPrintBooks. PythonBooks  (last edited 2025-06-12 13:27:03 by MatsWichmann) Unable to edit the page? See the FrontPage for instructions."
  },
  {
    "url": "https://www.python.org/doc/essays/",
    "title": "Python Documentation Index | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. In this directory I place short essays (anything from 500 to 5000\nwords) on various Python subjects.  See also a collection of presentations I have given.  See also my\nblog at blogspot.com and my\nprevious blog at\nartima.com. --Guido van Rossum Unifying types and classes in Python 2.2 (See below) Foreword for \"Programming Python\" (1st ed.) Written in 1996, this gives an overview of the early history and\nbackground of Python and some of my philosophy about software design\nand project management.  See also my foreword to the 2nd edition. Implementing Graphs An elegant and perhaps not obvious way to represent graphs using\nPython's most fundamental and versatile data types, lists and\ndictionaries. An Optimization Anecdote Required reading if you find that your Python code runs too slow. Metaclass Programming in Python 1.5 Warning: reading this document may cause your brain to explode. Built-in Package Support in Python 1.5 The most official documentation for the new package features in\nPython 1.5. Standard Exception Classes in Python 1.5 The most official documentation for the new exception features in\nPython 1.5.  (Updated for Python 1.5.2 by Barry Warsaw.) Glue It All Together With Python A position paper I wrote for and presented at the OMG-DARPA-MCC workshop on compositional software architectures in Monterey,\nCalifornia, January 6-8, 1998. What Is Python? Executive Summary A short (two paragraphs) high-level presentation of Python's virtues. Comparing Python to Other Languages Activist ammo or flame fodder?  (Note: I received lots of feedback\nwhen I posted this to comp.lang.python.  Unfortunately the feedback\nwas diverted to a separate mailbox that I didn't know I had -- when I\nfinally found it, I was a bit overwhelmed and so far have not yet\nfound the time to update the article.) Proposed Improvements to Module Cleanup A revised version of the proposal I posted to comp.lang.python on\nFeb 6, 1998.  This has been adopted in Python 1.5.1. Open Source Summit Trip Report My trip report of O'Reilly's Open Source Summit, essentially as\nposted on c.l.p.  This version published in the Linux Gazette (it's an\nexternal link), in their May 1998 issue. Debugging Reference Count Problems An edited version of a posting to c.l.p on this subject, on May 27, 1998. Computer Programming for Everybody (old) A funding proposal that was accepted by DARPA in March 1999. Computer Programming for Everybody Revised, extended version of the previous proposal. Interview in Linux Journal Not quite an essay, but a stream of consciousness penned down by a\njournalist...  More thoughts about CP4E. Interview in by Frank Willison for \"Frankly Speaking\" column Another stream of consciousness transcribed by a friendly\nlistener...  Not just on CP4E. Foreword for \"Programming Python\" (2nd ed.) The story continues... Unifying types and classes in Python 2.2 An introduction to the type/class unification effort in Python\n2.2.  Note that the unification work is officially labeled\nexperimental and is subject to change in future releases of\nPython. Parade of the PEPs To start off Developer's Day at the Python10 conference I gave a\nkeynote ending in what I dubbed \"the parade of the PEPs\". It was a\nbrief overview of all open PEPs, where I gave my highly personal and subjective opinion\nfor each PEP.  Later, I realized that this might have been of interest\nto other developers.  I didn't take notes at the conference, so below\nis a different set of comments that I created from scratch during a\nsingle two-hour sitting on March 7, 2002.  I intend to occasionally\nupdate this with new comments and new PEPs. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/community/diversity/",
    "title": "Diversity | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. The Python Software Foundation and the global Python community welcome\nand encourage participation by everyone. Our community is based on mutual\nrespect, tolerance, and encouragement, and we are working to help each\nother live up to these principles. We want our community to be more\ndiverse: whoever you are, and whatever your background, we welcome you. We have created this diversity statement because we believe that a\ndiverse Python community is stronger and more vibrant.  A diverse\ncommunity where people treat each other with respect has more potential\ncontributors and more sources for ideas. Although we have phrased the formal diversity statement generically to\nmake it all-inclusive, we recognize that there are specific attributes\nthat are used to discriminate against people.  In alphabetical order,\nsome of these attributes include (but are not limited to): age, culture,\nethnicity, gender identity or expression, national origin, physical or\nmental difference, politics, race, religion, sex, sexual orientation,\nsocio-economic status, and subculture.  We welcome people regardless of\nthe values of these or other attributes. The Python community welcomes people no matter what languages they are\nfluent in.  (Although core Python development is done in English.)  The\nPython community encourages the creation of user groups in all locales,\nand many of them are listed at\nhttp://wiki.python.org/moin/LocalUserGroups\nMany of these user groups also have mailing lists in the locally\npreferred language. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/community/lists/",
    "title": "Mailing Lists | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Here's an overview of the mail and news resources for python. For a\ncomplete listing of python.org's public mailing lists you can view them on\nMailman 3. To request a new list, send e-mail to postmaster @ python.org; please check first to make sure a similar list does not already exist. Mailing lists for users speaking languages other than\nEnglish are listed in the non-English python resources guide, which includes mailing\nlists, translated and original non-English documentation, and other\nresources. comp.lang.python is a high-volume\nUsenet open (not moderated) newsgroup for general discussions and\nquestions about Python.  You can also access it as a mailing list through\npython-list. Pretty much anything Python-related is fair game for discussion, and the group is even fairly tolerant of off-topic digressions; there have been entertaining discussions of topics such as floating point, good software design, and other programming languages such as Lisp and Forth. Most discussion on comp.lang.python is about developing with Python, not about development of the Python interpreter itself. Some of the core developers still read the list, but most of them don't. Occasionally comp.lang.python suggestions have resulted in an enhancement proposal being written, leading to a new Python feature. If you find a bug in Python, don't send it to comp.lang.python; file a bug report in the issue tracker. Items posted on the Usenet group appear on the mailing list, and vice\nversa (bidirectional gateway). Due to the mysteries of Usenet, the\norder in which items show up may vary. Rudeness and personal attacks, even in reaction to blatant flamebait, are strongly frowned upon. People may strongly disagree on an issue, but usually discussion remains civil. In case of an actual flamebait posting, you can ignore it, quietly plonk the offending poster in your killfile or mail filters, or write a sharp but still-polite response, but at all costs resist the urge to flame back. Generally comp.lang.python is a high-signal, low-noise group. It's also a high-traffic group, running at around 200 posts per day. An archive of the list is available: There are some non-English language versions of this newsgroup. The links provided here are to the Google Groups archive for each: de.comp.lang.python (German), it.comp.lang.python (Italian), pl.comp.lang.python (Polish), fr.comp.lang.python (French), and cz.comp.lang.python (Czech). comp.lang.python.announce is a\nlow-volume moderated forum for Python-related announcements. New\nmodules and programs are announced here, and it's where\nPEPs are posted to get comments from the community.\nYou'll also see announcements for conferences. This is a moderated newsgroup carrying at most perhaps 10 to 20 messages per week, so it's an easy way to be keep up-to-date on what's new in the Python world. See the comp.lang.python.announce posting guidelines for guidelines on submitting announcements. It is also available as a moderated mailing list, python-announce. Subscribing can be done via the python-announce list information page. comp.lang.python.announce is moderated by a team of people. If you need to contact them directly, e.g. to ask why a particular message was rejected, write to clpa-moderators-owner @ python.org. There are several archives for comp.lang.python.announce: The tutor mailing list is for users who want to ask questions about learning computer programming with Python. An archive of the list is available. People interested in learning about programming with Python are\nencouraged to join, as are experienced users interested in helping\nothers learn -- teaching other people is one of the best ways to learn\nmore yourself! python-dev used to be used as the main mailing list for developing Python, with practically all core developers subscribed to it. It has since been put into read-only mode. The archive is still available at Mailman 3 Python-Dev Archive. Discussion has moved on to our Discourse instance. The Core Development category has taken up the purpose of the python-dev mailing list. The python-ideas list was for discussing more speculative design ideas. Just like for python-dev, discussions has moved on to the Discourse instance in form of the Ideas category and the mailing list has been archived. The python-checkins mailing list receives an automatically generated message for each change committed to the Python Subversion tree. python-checkins makes it easy for developers to know what is happening in the repository. The volume of traffic on this list varies widely based on developer activity. The python-help mailing list is python.org's help desk. You can ask a group of knowledgeable volunteers questions about all your Python problems. You can send email to python-help by writing to help @ python.org for individual support. Mail sent there lands in the mailbox of a small group of volunteers who may reply to reasonable requests for help, depending on their area of expertise. Using it is much preferred to sending mail directly to Guido or some other individual, but less preferable than posting to comp.lang.python. In all cases, try searching the various archives first. When you ask a question, be sure to give your configuration: what hardware platform, what OS (and version), what Python version, and (when using Tkinter) what Tcl/Tk version you are using. If you're using an older Python version, try upgrading to the latest version first -- things often get better! You can't subscribe to python-help -- it is not for bystanders, only for questioners to submit questions and for helpers to receive and field them. The archives are not accessible, to protect the questioners' privacy. If you would like to help answer questions, send your qualifications to webmaster @ python.org. When you send a message to python-help, you will get an automated response. Your message is still delivered to the volunteers, and you will only receive this automated response once every approximately three months. Special Interest Groups (SIGs) are smaller communities focused on a particular topic or application such as databases, Python on macOS, etc. Every SIG has a mailing list of its own. See the SIG page for more information. SIGs vary in their success. Some, such as the XML, Database, and Distutils SIGs, have produced specifications and software that are now used throughout the Python community. Not all SIGs are as productive, though, and some sputter along for years without ever finalizing an implementation or a document. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/community/forums/",
    "title": "Forums | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. The official Python Community forums are hosted at discuss.python.org. If you're looking for additional forums or forums in your native language, please check out the local user groups page at the Python Wiki. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/psf/annual-report/2024/",
    "title": "2024 PSF Annual Impact Report | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. In 2024, the Python community and language continued to grow! The PSF celebrated a year of remarkable growth, with Python becoming the most popular language on GitHub and worldwide community engagement at an all-time high. We expanded our impact by welcoming our inaugural PyPI Support Specialist, Maria Ashna, the revival of the User Success and Education and Outreach Workgroups, and continued investment in grants, infrastructure, and accessibility. Weâd love for you to take a look at the 2024 Annual Impact Report that we put together to share more highlights from the year, financial reporting, and some previews of whatâs to come in the next year. Download and read the report today! The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/community/workshops/",
    "title": "Conferences and Workshops | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. There are quite a number of Python conferences happening all year around and in many parts of the world. Many of them are taking place yearly or even more frequent: Subsets of this list are also available on other sites: Several of these conferences record the talk sessions on video. pyvideo.org provides an index to a large set these videos. If you would like to announce a Python related event, please see Submitting an event to the Python events calendars. You can also ask on pydotorg-www at python dot org for help. If you have an event to add, please see the instructions on how to edit Python Wiki for details. If you are organizing a Python conference or thinking of organizing one, please subscribe to the Python conferences mailing list. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/community/sigs/",
    "title": "Python Special Interest Groups | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. There are a number of Special\nInterest Groups (SIGs) for focused collaborative efforts to develop,\nimprove, or maintain specific Python resources.  Each SIG has a\ncharter, a coordinator, a mailing list, and a directory on the Python\nwebsite.  SIG membership is  informal, defined by subscription to the SIG's\nmailing list.  Anyone can join a SIG, and participate in the\ndevelopment discussions via the SIG's mailing list. Below is the list of currently active Python SIGs, with links to\ntheir resources.  The link in the first column directs you to the\nSIG's home page: a page with more information about the SIG.  The\nlinks in the \"Info\" column direct you to the SIG's archives, and to\nthe SIG's Mailman page, which you can use to subscribe or unsubscribe\nyourself and to change your subscription options. The SIG mailing lists are managed by GNU Mailman, a web-based interface for\nmailing lists written in Python. There is also a list of retired SIGs;\nthese SIGs existed in the past but are no longer active.\nTheir archives and home pages are retained.  A retired SIG can be\nrevived, using the same criteria as for\ncreating a new SIG. There are also local Python User\nGroups, organized by region rather than by special interest. All SIG mailing lists are archived. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/community/logos/",
    "title": "The Python Logo | Python Software Foundation",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Projects and companies that use Python are encouraged to incorporate the Python\nlogo on their websites, brochures, packaging, and elsewhere to indicate suitability\nfor use with Python or implementation in Python.  Use of the \"two snakes\" logo element alone (the logo device), without the accompanying wordmark is permitted on the same terms as the combined logo. Combined logo: Logo device only: Currently, the following larger sized and vector variants of the logo are available: The font used in the logo is called \"Flux Regular\".  The PSF owns a copy\nbut we cannot distribute it, except for work on the PSF's behalf. The official Python Powered logo is available in two forms, wide and tall: This logo available in sizes 200x80,\n140x56, 100x40,\nand 70x28.   Also as\nSVG format source file. This logo available in sizes 140x182,\n100x130, 70x91,\nand 50x65.   Also as\nSVG format source file. The Python logo is a trademark of the Python Software Foundation, which is\nresponsible for defending against any damaging or confusing uses of the\ntrademark. See the PSF Trademark Usage Policy. In general, we want the logo to be used as widely as possible to indicate\nuse of Python or suitability for Python.  However, please ask first when using a derived version of the\nlogo or when in doubt. Making your own shirts and other items featuring the Python logo is OK, but please seek permission from the PSF if you are planning to sell merchandise that shows the Python logo. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://wiki.python.org/moin/",
    "title": "FrontPage - Python Wiki",
    "content": "The Python Wiki\nWelcome to the Python Wiki, a user-editable compendium of knowledge based around the Python programming language. Some pages are protected against casual editing - see WikiEditingGuidelines for more information about editing content. Python is a great object-oriented, interpreted, and interactive programming language. It is often compared (favorably of course  ) to Lisp, Tcl, Perl, Ruby, C#, Visual Basic, Visual Fox Pro, Scheme or Java... and it's much more fun. Python combines remarkable power with very clear syntax. It has modules, classes, exceptions, very high level dynamic data types, and dynamic typing. There are interfaces to many system calls and libraries, as well as to various windowing systems. New built-in modules are easily written in C or C++ (or other languages, depending on the chosen implementation). Python is also usable as an extension language for applications written in other languages that need easy-to-use scripting or automation interfaces.  Getting Started \nEvents and Community \nSoftware \nCore Development \nUsing and Editing the Wiki \n\n \nGetting Started\n  \n \n\n Beginners Guide \nDocumentation \n\n Links to tutorials, courses and resources \nLearning materials, topic guides and links to central resources \n\n Beginner Errors \nPython Books \n\n Some common pitfalls of beginners \nBooks about Python plus reviews \n\n Asking for Help \nPython Audio Materials \n\n Questions asked by beginners, answered here \nA mixture of introductory and topical material \n\n Languages \nPython Implementations \n\n Resources written in languages other than English \nDifferent software which runs programs in the Python language \n\n See also the documentation category for all known documentation-related pages. \n\n \nEvents, Courses, Conferences, Community\nPython Discussion Forums - if you want to meet people online, ask questions or discuss new ideas Python Conferences - information about the Python conference scene Local User Groups - find a Python group near you Python Training - Python training courses Python Events - event listing for conferences, training courses and more Python Event Calendars - calendars for Python conferences and user groups Participating in the Community - where people using and producing Python get together Python Software Foundation - show your support by joining the Foundation behind Python Find a job where you can use Python - Python job boards around the world  \nPython Software\n  \n \n\n Python Projects \nDevelopment Tools \n\n Information on finding software projects written in Python, including... \nManaging your code more effectively \n\n Applications \nPython Editors \n\n Ready-to-run applications which use Python \nEditing your code more effectively \n\n Useful Modules \nPublishing Python Modules \n\n Some building blocks for your own projects (including frameworks for database, GUI, Web programming) \nHow to make others aware of your own works \n\n \nPython Core Development Tools\n  \n \n\n The Python Web Site \nBug Tracker \n\n Maintaining the official Python online resources \nRoundup and the code review services used by the Python project \n\n Package Index \nOther Resources \n\n The infrastructure behind Python package hosting \nA list of all development process-related resources on this Wiki \n\n \nUsing this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Welcome to the Python Wiki, a user-editable compendium of knowledge based around the Python programming language. Some pages are protected against casual editing - see WikiEditingGuidelines for more information about editing content. Python is a great object-oriented, interpreted, and interactive programming language. It is often compared (favorably of course  ) to Lisp, Tcl, Perl, Ruby, C#, Visual Basic, Visual Fox Pro, Scheme or Java... and it's much more fun. Python combines remarkable power with very clear syntax. It has modules, classes, exceptions, very high level dynamic data types, and dynamic typing. There are interfaces to many system calls and libraries, as well as to various windowing systems. New built-in modules are easily written in C or C++ (or other languages, depending on the chosen implementation). Python is also usable as an extension language for applications written in other languages that need easy-to-use scripting or automation interfaces.  Getting Started \nEvents and Community \nSoftware \nCore Development \nUsing and Editing the Wiki \n\n \nGetting Started\n  \n \n\n Beginners Guide \nDocumentation \n\n Links to tutorials, courses and resources \nLearning materials, topic guides and links to central resources \n\n Beginner Errors \nPython Books \n\n Some common pitfalls of beginners \nBooks about Python plus reviews \n\n Asking for Help \nPython Audio Materials \n\n Questions asked by beginners, answered here \nA mixture of introductory and topical material \n\n Languages \nPython Implementations \n\n Resources written in languages other than English \nDifferent software which runs programs in the Python language \n\n See also the documentation category for all known documentation-related pages. \n\n \nEvents, Courses, Conferences, Community\nPython Discussion Forums - if you want to meet people online, ask questions or discuss new ideas Python Conferences - information about the Python conference scene Local User Groups - find a Python group near you Python Training - Python training courses Python Events - event listing for conferences, training courses and more Python Event Calendars - calendars for Python conferences and user groups Participating in the Community - where people using and producing Python get together Python Software Foundation - show your support by joining the Foundation behind Python Find a job where you can use Python - Python job boards around the world  \nPython Software\n  \n \n\n Python Projects \nDevelopment Tools \n\n Information on finding software projects written in Python, including... \nManaging your code more effectively \n\n Applications \nPython Editors \n\n Ready-to-run applications which use Python \nEditing your code more effectively \n\n Useful Modules \nPublishing Python Modules \n\n Some building blocks for your own projects (including frameworks for database, GUI, Web programming) \nHow to make others aware of your own works \n\n \nPython Core Development Tools\n  \n \n\n The Python Web Site \nBug Tracker \n\n Maintaining the official Python online resources \nRoundup and the code review services used by the Python project \n\n Package Index \nOther Resources \n\n The infrastructure behind Python package hosting \nA list of all development process-related resources on this Wiki \n\n \nUsing this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Python is a great object-oriented, interpreted, and interactive programming language. It is often compared (favorably of course  ) to Lisp, Tcl, Perl, Ruby, C#, Visual Basic, Visual Fox Pro, Scheme or Java... and it's much more fun. Python combines remarkable power with very clear syntax. It has modules, classes, exceptions, very high level dynamic data types, and dynamic typing. There are interfaces to many system calls and libraries, as well as to various windowing systems. New built-in modules are easily written in C or C++ (or other languages, depending on the chosen implementation). Python is also usable as an extension language for applications written in other languages that need easy-to-use scripting or automation interfaces.  Getting Started \nEvents and Community \nSoftware \nCore Development \nUsing and Editing the Wiki \n\n \nGetting Started\n  \n \n\n Beginners Guide \nDocumentation \n\n Links to tutorials, courses and resources \nLearning materials, topic guides and links to central resources \n\n Beginner Errors \nPython Books \n\n Some common pitfalls of beginners \nBooks about Python plus reviews \n\n Asking for Help \nPython Audio Materials \n\n Questions asked by beginners, answered here \nA mixture of introductory and topical material \n\n Languages \nPython Implementations \n\n Resources written in languages other than English \nDifferent software which runs programs in the Python language \n\n See also the documentation category for all known documentation-related pages. \n\n \nEvents, Courses, Conferences, Community\nPython Discussion Forums - if you want to meet people online, ask questions or discuss new ideas Python Conferences - information about the Python conference scene Local User Groups - find a Python group near you Python Training - Python training courses Python Events - event listing for conferences, training courses and more Python Event Calendars - calendars for Python conferences and user groups Participating in the Community - where people using and producing Python get together Python Software Foundation - show your support by joining the Foundation behind Python Find a job where you can use Python - Python job boards around the world  \nPython Software\n  \n \n\n Python Projects \nDevelopment Tools \n\n Information on finding software projects written in Python, including... \nManaging your code more effectively \n\n Applications \nPython Editors \n\n Ready-to-run applications which use Python \nEditing your code more effectively \n\n Useful Modules \nPublishing Python Modules \n\n Some building blocks for your own projects (including frameworks for database, GUI, Web programming) \nHow to make others aware of your own works \n\n \nPython Core Development Tools\n  \n \n\n The Python Web Site \nBug Tracker \n\n Maintaining the official Python online resources \nRoundup and the code review services used by the Python project \n\n Package Index \nOther Resources \n\n The infrastructure behind Python package hosting \nA list of all development process-related resources on this Wiki \n\n \nUsing this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Python combines remarkable power with very clear syntax. It has modules, classes, exceptions, very high level dynamic data types, and dynamic typing. There are interfaces to many system calls and libraries, as well as to various windowing systems. New built-in modules are easily written in C or C++ (or other languages, depending on the chosen implementation). Python is also usable as an extension language for applications written in other languages that need easy-to-use scripting or automation interfaces.  Getting Started \nEvents and Community \nSoftware \nCore Development \nUsing and Editing the Wiki \n\n \nGetting Started\n  \n \n\n Beginners Guide \nDocumentation \n\n Links to tutorials, courses and resources \nLearning materials, topic guides and links to central resources \n\n Beginner Errors \nPython Books \n\n Some common pitfalls of beginners \nBooks about Python plus reviews \n\n Asking for Help \nPython Audio Materials \n\n Questions asked by beginners, answered here \nA mixture of introductory and topical material \n\n Languages \nPython Implementations \n\n Resources written in languages other than English \nDifferent software which runs programs in the Python language \n\n See also the documentation category for all known documentation-related pages. \n\n \nEvents, Courses, Conferences, Community\nPython Discussion Forums - if you want to meet people online, ask questions or discuss new ideas Python Conferences - information about the Python conference scene Local User Groups - find a Python group near you Python Training - Python training courses Python Events - event listing for conferences, training courses and more Python Event Calendars - calendars for Python conferences and user groups Participating in the Community - where people using and producing Python get together Python Software Foundation - show your support by joining the Foundation behind Python Find a job where you can use Python - Python job boards around the world  \nPython Software\n  \n \n\n Python Projects \nDevelopment Tools \n\n Information on finding software projects written in Python, including... \nManaging your code more effectively \n\n Applications \nPython Editors \n\n Ready-to-run applications which use Python \nEditing your code more effectively \n\n Useful Modules \nPublishing Python Modules \n\n Some building blocks for your own projects (including frameworks for database, GUI, Web programming) \nHow to make others aware of your own works \n\n \nPython Core Development Tools\n  \n \n\n The Python Web Site \nBug Tracker \n\n Maintaining the official Python online resources \nRoundup and the code review services used by the Python project \n\n Package Index \nOther Resources \n\n The infrastructure behind Python package hosting \nA list of all development process-related resources on this Wiki \n\n \nUsing this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Getting Started Events and Community Software Core Development Using and Editing the Wiki Getting Started\n  \n \n\n Beginners Guide \nDocumentation \n\n Links to tutorials, courses and resources \nLearning materials, topic guides and links to central resources \n\n Beginner Errors \nPython Books \n\n Some common pitfalls of beginners \nBooks about Python plus reviews \n\n Asking for Help \nPython Audio Materials \n\n Questions asked by beginners, answered here \nA mixture of introductory and topical material \n\n Languages \nPython Implementations \n\n Resources written in languages other than English \nDifferent software which runs programs in the Python language \n\n See also the documentation category for all known documentation-related pages. \n\n \nEvents, Courses, Conferences, Community\nPython Discussion Forums - if you want to meet people online, ask questions or discuss new ideas Python Conferences - information about the Python conference scene Local User Groups - find a Python group near you Python Training - Python training courses Python Events - event listing for conferences, training courses and more Python Event Calendars - calendars for Python conferences and user groups Participating in the Community - where people using and producing Python get together Python Software Foundation - show your support by joining the Foundation behind Python Find a job where you can use Python - Python job boards around the world  \nPython Software\n  \n \n\n Python Projects \nDevelopment Tools \n\n Information on finding software projects written in Python, including... \nManaging your code more effectively \n\n Applications \nPython Editors \n\n Ready-to-run applications which use Python \nEditing your code more effectively \n\n Useful Modules \nPublishing Python Modules \n\n Some building blocks for your own projects (including frameworks for database, GUI, Web programming) \nHow to make others aware of your own works \n\n \nPython Core Development Tools\n  \n \n\n The Python Web Site \nBug Tracker \n\n Maintaining the official Python online resources \nRoundup and the code review services used by the Python project \n\n Package Index \nOther Resources \n\n The infrastructure behind Python package hosting \nA list of all development process-related resources on this Wiki \n\n \nUsing this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Getting Started\n  \n \n\n Beginners Guide \nDocumentation \n\n Links to tutorials, courses and resources \nLearning materials, topic guides and links to central resources \n\n Beginner Errors \nPython Books \n\n Some common pitfalls of beginners \nBooks about Python plus reviews \n\n Asking for Help \nPython Audio Materials \n\n Questions asked by beginners, answered here \nA mixture of introductory and topical material \n\n Languages \nPython Implementations \n\n Resources written in languages other than English \nDifferent software which runs programs in the Python language \n\n See also the documentation category for all known documentation-related pages. \n\n \nEvents, Courses, Conferences, Community\nPython Discussion Forums - if you want to meet people online, ask questions or discuss new ideas Python Conferences - information about the Python conference scene Local User Groups - find a Python group near you Python Training - Python training courses Python Events - event listing for conferences, training courses and more Python Event Calendars - calendars for Python conferences and user groups Participating in the Community - where people using and producing Python get together Python Software Foundation - show your support by joining the Foundation behind Python Find a job where you can use Python - Python job boards around the world  \nPython Software\n  \n \n\n Python Projects \nDevelopment Tools \n\n Information on finding software projects written in Python, including... \nManaging your code more effectively \n\n Applications \nPython Editors \n\n Ready-to-run applications which use Python \nEditing your code more effectively \n\n Useful Modules \nPublishing Python Modules \n\n Some building blocks for your own projects (including frameworks for database, GUI, Web programming) \nHow to make others aware of your own works \n\n \nPython Core Development Tools\n  \n \n\n The Python Web Site \nBug Tracker \n\n Maintaining the official Python online resources \nRoundup and the code review services used by the Python project \n\n Package Index \nOther Resources \n\n The infrastructure behind Python package hosting \nA list of all development process-related resources on this Wiki \n\n \nUsing this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Beginners Guide Documentation Links to tutorials, courses and resources Learning materials, topic guides and links to central resources Beginner Errors Python Books Some common pitfalls of beginners Books about Python plus reviews Asking for Help Python Audio Materials Questions asked by beginners, answered here A mixture of introductory and topical material Languages Python Implementations Resources written in languages other than English Different software which runs programs in the Python language See also the documentation category for all known documentation-related pages. Events, Courses, Conferences, Community\nPython Discussion Forums - if you want to meet people online, ask questions or discuss new ideas Python Conferences - information about the Python conference scene Local User Groups - find a Python group near you Python Training - Python training courses Python Events - event listing for conferences, training courses and more Python Event Calendars - calendars for Python conferences and user groups Participating in the Community - where people using and producing Python get together Python Software Foundation - show your support by joining the Foundation behind Python Find a job where you can use Python - Python job boards around the world  \nPython Software\n  \n \n\n Python Projects \nDevelopment Tools \n\n Information on finding software projects written in Python, including... \nManaging your code more effectively \n\n Applications \nPython Editors \n\n Ready-to-run applications which use Python \nEditing your code more effectively \n\n Useful Modules \nPublishing Python Modules \n\n Some building blocks for your own projects (including frameworks for database, GUI, Web programming) \nHow to make others aware of your own works \n\n \nPython Core Development Tools\n  \n \n\n The Python Web Site \nBug Tracker \n\n Maintaining the official Python online resources \nRoundup and the code review services used by the Python project \n\n Package Index \nOther Resources \n\n The infrastructure behind Python package hosting \nA list of all development process-related resources on this Wiki \n\n \nUsing this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Events, Courses, Conferences, Community\nPython Discussion Forums - if you want to meet people online, ask questions or discuss new ideas Python Conferences - information about the Python conference scene Local User Groups - find a Python group near you Python Training - Python training courses Python Events - event listing for conferences, training courses and more Python Event Calendars - calendars for Python conferences and user groups Participating in the Community - where people using and producing Python get together Python Software Foundation - show your support by joining the Foundation behind Python Find a job where you can use Python - Python job boards around the world  \nPython Software\n  \n \n\n Python Projects \nDevelopment Tools \n\n Information on finding software projects written in Python, including... \nManaging your code more effectively \n\n Applications \nPython Editors \n\n Ready-to-run applications which use Python \nEditing your code more effectively \n\n Useful Modules \nPublishing Python Modules \n\n Some building blocks for your own projects (including frameworks for database, GUI, Web programming) \nHow to make others aware of your own works \n\n \nPython Core Development Tools\n  \n \n\n The Python Web Site \nBug Tracker \n\n Maintaining the official Python online resources \nRoundup and the code review services used by the Python project \n\n Package Index \nOther Resources \n\n The infrastructure behind Python package hosting \nA list of all development process-related resources on this Wiki \n\n \nUsing this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Python Discussion Forums - if you want to meet people online, ask questions or discuss new ideas Python Conferences - information about the Python conference scene Local User Groups - find a Python group near you Python Training - Python training courses Python Events - event listing for conferences, training courses and more Python Event Calendars - calendars for Python conferences and user groups Participating in the Community - where people using and producing Python get together Python Software Foundation - show your support by joining the Foundation behind Python Find a job where you can use Python - Python job boards around the world Python Software\n  \n \n\n Python Projects \nDevelopment Tools \n\n Information on finding software projects written in Python, including... \nManaging your code more effectively \n\n Applications \nPython Editors \n\n Ready-to-run applications which use Python \nEditing your code more effectively \n\n Useful Modules \nPublishing Python Modules \n\n Some building blocks for your own projects (including frameworks for database, GUI, Web programming) \nHow to make others aware of your own works \n\n \nPython Core Development Tools\n  \n \n\n The Python Web Site \nBug Tracker \n\n Maintaining the official Python online resources \nRoundup and the code review services used by the Python project \n\n Package Index \nOther Resources \n\n The infrastructure behind Python package hosting \nA list of all development process-related resources on this Wiki \n\n \nUsing this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Python Software\n  \n \n\n Python Projects \nDevelopment Tools \n\n Information on finding software projects written in Python, including... \nManaging your code more effectively \n\n Applications \nPython Editors \n\n Ready-to-run applications which use Python \nEditing your code more effectively \n\n Useful Modules \nPublishing Python Modules \n\n Some building blocks for your own projects (including frameworks for database, GUI, Web programming) \nHow to make others aware of your own works \n\n \nPython Core Development Tools\n  \n \n\n The Python Web Site \nBug Tracker \n\n Maintaining the official Python online resources \nRoundup and the code review services used by the Python project \n\n Package Index \nOther Resources \n\n The infrastructure behind Python package hosting \nA list of all development process-related resources on this Wiki \n\n \nUsing this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Python Projects Development Tools Information on finding software projects written in Python, including... Managing your code more effectively Applications Python Editors Ready-to-run applications which use Python Editing your code more effectively Useful Modules Publishing Python Modules Some building blocks for your own projects (including frameworks for database, GUI, Web programming) How to make others aware of your own works Python Core Development Tools\n  \n \n\n The Python Web Site \nBug Tracker \n\n Maintaining the official Python online resources \nRoundup and the code review services used by the Python project \n\n Package Index \nOther Resources \n\n The infrastructure behind Python package hosting \nA list of all development process-related resources on this Wiki \n\n \nUsing this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Python Core Development Tools\n  \n \n\n The Python Web Site \nBug Tracker \n\n Maintaining the official Python online resources \nRoundup and the code review services used by the Python project \n\n Package Index \nOther Resources \n\n The infrastructure behind Python package hosting \nA list of all development process-related resources on this Wiki \n\n \nUsing this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. The Python Web Site Bug Tracker Maintaining the official Python online resources Roundup and the code review services used by the Python project Package Index Other Resources The infrastructure behind Python package hosting A list of all development process-related resources on this Wiki Using this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Using this Wiki\nThis Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. This Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed. \nCreating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Creating a Wiki account\nIn order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. In order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). \nEditing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Editing pages\nSince spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Since spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup. Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. \nReporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Reporting problems\nIn case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. In case of emergency, please contact the python.org maintainers, or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\".  \nWiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Wiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Wiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. Wiki Attack in January 2013\nThe wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. The wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org>. \nHTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. HTTPS access to the Wiki\nWe have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. We have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. If you have not been using HTTPS links to the wiki login page, please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. FrontPage  (last edited 2025-05-14 15:24:44 by MarcAndreLemburg) Unable to edit the page? See the FrontPage for instructions."
  },
  {
    "url": "https://www.python.org/psf/conduct/",
    "title": "Python Software Foundation Code of Conduct - Python Software Foundation Policies",
    "content": "The Python community is made up of members from around the globe with a diverse set of skills, personalities, and experiences. It is through these differences that our community experiences great successes and continued growth. When you're working with members of the community, this Code of Conduct will help steer your interactions and keep Python a positive, successful, and growing community. Members of the Python community are open, considerate, and respectful. Behaviours that reinforce these values contribute to a positive environment, and include: Every member of our community has the right to have their identity respected. The Python community is dedicated to providing a positive experience for everyone, regardless of age, gender identity and expression, sexual orientation, disability, physical appearance, body size, ethnicity, nationality, race, or religion (or lack thereof), education, or socio-economic status. Examples of unacceptable behavior by participants include: Community members asked to stop any inappropriate behavior are expected to comply immediately. No weapons are allowed at Python Software Foundation events. Weapons include but are not limited to explosives (including fireworks), guns, and large knives such as those used for hunting or display, as well as any other item used for the purpose of causing injury or harm to others. Anyone seen in possession of one of these items will be asked to leave immediately, and will only be allowed to return without the weapon. If a participant engages in behavior that violates this code of conduct, the Python community Code of Conduct team may take any action they deem appropriate, including warning the offender or expulsion from the community and community events with no refund of event tickets. The full list of consequences for inappropriate behavior is listed in the Enforcement Procedures. Thank you for helping make this a welcoming, friendly community for everyone. This Code of Conduct applies to the following people at events hosted by the Python Software Foundation, and events hosted by projects under the PSF's fiscal sponsorship: The Code of Conduct applies in official venue event spaces, including: The Code of Conduct applies to interactions with official event accounts on social media spaces and phone applications, including: Event organizers will enforce this code throughout the event. Each event is required to provide a Code of Conduct committee that receives, evaluates, and acts on incident reports. Each event is required to provide contact information for the committee to attendees. The event Code of Conduct committee may (but is not required to) ask for advice from the Python Software Foundation Code of Conduct work group. The Python Software Foundation Code of Conduct work group can be reached by emailing conduct-wg@python.org. This Code of Conduct applies to the following online spaces: This Code of Conduct applies to the following people in official Python Software Foundation online spaces: Each online space listed above is required to provide the following information to the Python Software Foundation Code of Conduct work group: Each online space listed above is encouraged to provide the following information to community members: The Python Software Foundation Code of Conduct work group will receive and evaluate incident reports from the online communities listed above. The Python Software Foundation Code of Conduct work group will work with online community administrators/moderators to suggest actions to take in response to a report. In cases where the administrators/moderators disagree on the suggested resolution for a report, the Python Software Foundation Code of Conduct work group may choose to notify the Python Software Foundation board. If you believe that someone is violating the code of conduct, or have any other concerns, please contact a member of the Python Software Foundation Code of Conduct work group immediately. They can be reached by emailing conduct-wg@python.org Python Software Foundation Community Member Procedure For Reporting Code of Conduct Incidents Python Software Foundation Code of Conduct Working Group Enforcement Procedures This Code of Conduct is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License. This Code of Conduct was forked from the example policy from the Geek Feminism wiki, created by the Ada Initiative and other volunteers, which is under a Creative Commons Zero license. Additional new language and modifications were created by Sage Sharp of Otter Tech. Language was incorporated from the following Codes of Conduct:"
  },
  {
    "url": "https://www.python.org/community/awards",
    "title": "Python Community Awards | Python Software Foundation",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/psf/get-involved/",
    "title": "ð Hey Community Members! | Python Software Foundation",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. More than 20 ways to get involved & stay informed! The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/psf/community-stories/",
    "title": "Community Stories | Python Software Foundation",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. People who need to install Python packages get confused a lot. That's not their fault; that's because the volunteers who maintain the packaging tools don't have enough time to get everything organized so that it's clear and easy to use. In the last few years, the PSF has gotten grants and used that money to massively improve packaging. We overhauled PyPI and we're making pip more consistent, with genuine attention to user experience. With more funding, we can finally make managing packages pleasant as programming in Python. I started using Python in my PhD for performing different simulations of rotating black holes, black hole jets and their properties. I quickly fell in love with the language and its community and that led me to become a core dev some years ago. Since I became a core dev I have worked towards making Python faster and more versatile. Although most of my work is in the parser, the compiler pipeline and the garbage collector I like to work all over the place fixing bugs and trying to spot performance improvement opportunities. Hopefully, in the following years, we can push Python forward to the future by improving its general speed, making it more compatible with other implementations and improving the multi-core experience. Although this will be a challenging path and will require drastic changes in Python itself and its C-API, I am very excited about the things to come and what awaits for the Python Language and its community :) A huge turning point in my career was a Python workshop. I programmed a bit as a kid, and took a single CS class in college, and tried to poke along doing some self-study so I could get better. And then I attended a Boston Python Workshop for Women And Their Friends http://bostonpythonworkshop.com/, led by Jessica McKellar. We worked through well-designed exercises and I got hands-on practice that helped me get through that transition, from painstakingly copying individual lines and functions into the interpreter, to thinking in terms of Python's program flow. Years later, my Python and software management skills have been invaluable. I run a small business, where I've been able to hire, train, and mentor contract workers who then go on to get full-time programming jobs. We've helped overhaul the Python Package Index, mentored and\nrecruited contributors to Zulip, helped journalists open-source their code, and more. Right now I'm leading pip's work replacing its dependency resolver, which is a game-changer for future work making Python packaging easier to deal with. People who care about Python invested in running that workshop, and it's paid off very well in my case. Investing in Python events, and the organization that supports them, is a good bet. In 2015, as I was figuring out what I wanted to do next with my career, I attended PyCon North America in Montreal. I volunteered with the GNU Mailman team to expedite the release of Mailman 3.0. At the end of the sprint, I thought, \"maybe I could charge for this.\" Later that year, I started Changeset Consulting, where I expedite long-awaited releases for open source software projects. Through Changeset, I helped the PSF finish and deploy the new PyPI, and I'm working on pip's dependency resolver overhaul and a fresh release of GNU\nAutoconf. If it weren't for the PSF, my life would be very different, and probably a lot less interesting. An important community event that the PSF produces is PyCon US, where community members get a chance to receive training, share ideas, or even be mentored. At PyCon US 2019, Sumana Harihareswara helped Brian Rutledge make his 1st contribution to Python Packaging. Months later he became a co-maintainer of Twine, the upload utility for PyPI. As of May 2020, he successfully worked with a newer contributor to finish adding PEP 484 type annotations to Twine's codebase. This will make it easier for us to keep this code bug-free in the future, which means open source maintainers can have a smooth experience sharing their code with us on PyPI! My name is Iqbal and I have been using Python for 18 years. On a professional level Python as a programming tool has given me a career, and on a personal level as an ideology has helped me make friends and given me satisfaction by giving me the opportunity to be part of something bigger than myself. As member or lead of the different conference committee and also as conference chair, I have worked hard to make sure anyone can participate and contribute, regardless of personal situation, among others: Grants program were started for those that are financially constrained, quotas were setup for first time speakers, opportunities to present talks were initiated for non-english speakers, partnership with other groups such as Women Who Code and PyLadies to bolster underrepresented women groups in the conferences. Last but not least, in the beginning I also helped introduce a Code Of Conduct based on PSF's CoC to introduce a safe and welcoming environment for everyone. At that time, it wasn't common yet to have CoCs for conferences. The PSF has done a wonderful job by taking the lead and acting as a standard bearer for us in the rest of the world to follow. Initiatives such as their grants program that helps monetarily and also gives exposure to less known events, knowledge and know-how on how to manage conferences and meetups, and most importantly an access to other people within the community to share and source out ideas have been invaluable to us. Going forward, with the new normal, supporting virtual events is definitely an important thing which the PSF can help with. A step-by-step guide on how to manage virtual events, how tos for tools and a platform to expose events to the worldwide community would be very helpful. In a world that is widening in terms of inequality where we tend to take away more and more, I am happy to be part of a community led by the PSF that continues to share and give: through code, through knowledge, through money and through friendship. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/success-stories/",
    "title": "Our Success Stories | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Cuong Do, Software Architect YouTube.com Python programmability on Algorand makes the entire development lifecycle easier and means more affordable and efficient maintenance and upgrades going forward. Read more To simplify the adoption of FHE, which involves a complex and resource-intensive technological stack, Zama developed tools that streamline the integration of FHE into applications. Since Python is the de facto standard for building machine learning (ML) applications, it was an obvious choice to create an open-source FHE library in Python. Read more Maintaining our ever-evolving Python codebase poses an intricate challenge: how do we make updates to reflect the changing rules and regulations of 200+ global markets without compromising access to the systems that our engineers and traders use on a daily basis? While an inner layer of shared business logic enables coherency in our codebase performance, it also means small regulatory changes can impact many systems.\r\n\r\nIn this article, Python Engineer John Lekberg details how we use Python type annotations to minimize the time and risk involved in manual verification. Read more Prioritizing cutting-edge speed and supporting the rapid growth of Hudson River Trading’s codebase can have unintended effects that require innovative solutions. For those working on our Python codebase, this means addressing “code tangling,” the coupling of unrelated code through unintuitive import cycles. In this article, George Farcasiu, Noah Kim, Jacob Brugh, and Jiahao Li discuss how they mitigate the cost and time burden of this issue by creating new tools to analyze and untangle dependencies efficiently. Read more See All Using Python to build a solution for instant tokenized real estate redemptions Lincoln Loop: Building a sustainable business inspired by Python’s ethos Using Python for commercial cloud backup Using Python to make unstable APIs reliable Python for Financial Machine Learning at Union Investment See All How HyperFinity Is Streamlining Its Serverless Architecture with Snowflake's Snowpark for Python Reimagining data science with Python-based operators in Einblick’s visual canvas Using Python with Gretel.ai to Generate Synthetic Location Data See All Elementary school education: Is it love or just Python? Using Python to Automate Tedious Tasks Python in the Blind Audio Tactile Mapping System See All Python for Collaborative Robots Abridging clinical conversations using Python Getting to Know Python See All Python Powered CrossCompute Report Automation for eReliability Tracker Leads to Cost and Time Savings for the American Public Power Association Saving the world with Open Data and Python Frequentis TAPtools® - Python in Air Traffic Control See All Why Python Matters for the VR Community Python for Collaborative Drug Discovery Python To Help Meteorologists Python for Scientific Data Visualization Simulating Biomolecules with Python See All Zama Concrete ML: Simplifying Homomorphic Encryption for Python Machine Learning Building Robust Codebases with Python's Type Annotations Building a Dependency Graph of Our Python Codebase Bleeding Edge Dependency Testing Using Python How We Created a Python Development Framework for Non-Developers See All Python users want to know more about Python in the wild. Tell us your story Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/success-stories/category/arts/",
    "title": "Arts | Our Success Stories | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/success-stories/category/business/",
    "title": "Business | Our Success Stories | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/success-stories/category/education/",
    "title": "Education | Our Success Stories | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/success-stories/category/engineering/",
    "title": "Engineering | Our Success Stories | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/success-stories/category/government/",
    "title": "Government | Our Success Stories | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/success-stories/category/scientific/",
    "title": "Scientific | Our Success Stories | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/success-stories/category/software-development/",
    "title": "Software Development | Our Success Stories | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/blogs/",
    "title": "Our Blogs | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. July 24, 2025, 1:55 p.m. This year’s PSF Board Election nomination period opens next week on Tuesday, July 29th, 2:00 pm UTC and closes on Tuesday, August 12th, 2:00 pm UTC. Who runs for the board? People who care about the Python community, who want to see it flourish and grow, and also have a …\n                    Read more More July 22, 2025 July 16, 2025 July 9, 2025 July 8, 2025 July 8, 2025 Subscribe to Python Insider via: Also check out the Discussions on Python.org Python Insider by the Python Core Team is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. Based on a work at blog.python.org. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/psf/newsletter/",
    "title": "PSF Newsletter Signup | Python Software Foundation",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Please select all the ways you would like to hear from Python Software Foundation: You can unsubscribe at any time by clicking the link in the footer of our emails. For information about our privacy practices, please visit our website. We use Mailchimp as our marketing platform. By clicking below to subscribe, you acknowledge that your information will be transferred to Mailchimp for processing. Learn more about Mailchimp's privacy practices here. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "http://pyfound.blogspot.com/",
    "title": "Python Software Foundation News",
    "content": "News from the Python Software Foundation This year’s PSF Board Election nomination period opens next week on Tuesday, July 29th, 2:00 pm UTC and closes on Tuesday, August 12th, 2:00 pm UTC. Who runs for the board? People who care about the Python community, who want to see it flourish and grow, and also have a few hours a month to attend regular meetings, serve on committees, participate in conversations, and promote the Python community. Check out the following resources to learn more about the PSF, as well as what being a part of the PSF Board entails: Not sure what UTC is for you locally? Check this UTC time converter! You can nominate yourself or someone else. We encourage you to reach out to people before you nominate them to ensure they are enthusiastic about the potential of joining the Board. To submit a nomination for yourself or someone else, use the 2025 PSF Board Election Nomination Form on our website. The nomination form opens on Tuesday, July 29th, 2:00 pm UTC and closes on Tuesday, August 12th, 2:00 pm UTC.To support potential candidates and nominators, the 2025 PSF Board Election team has created a nomination resource (embedded below). It includes tips, formatting instructions, and guidance on what to include in a nomination. The goal is to help nominees understand what to expect and ensure that all candidates are provided the same clear and consistent standards. Every PSF Voting Member (Supporting, Contributing, and Fellow) needs to affirm their membership to vote in this year’s election. You should have received an email from \"psf@psfmember.org <Python Software Foundation>\" with the subject \"[Action Required] Affirm your PSF Membership voting intention for 2025 PSF Board Election\" that contains information on how to affirm your voting status. You can see your membership record and status on your PSF Member User Information page. If you are a voting-eligible member and do not already have a login, please create an account on psfmember.org first and then email psf-elections@python.org so we can link your membership to your account. Every PSF voting-eligible Member (Supporting, Contributing, and Fellow) needs to affirm their membership to vote in this year’s election. If you wish to vote in this year’s PSF Board election, you must affirm your intention to vote no later than Tuesday, August 26th, 2:00 pm UTC. This year’s Board Election vote begins Tuesday, September 2nd, 2:00 pm UTC, and closes on Tuesday, September 16th, 2:00 pm UTC. You should have received an email from \"psf@psfmember.org <Python Software Foundation>\" with the subject \"[Action Required] Affirm your PSF Membership voting intention for 2025 PSF Board Election\" that contains information on how to affirm your voting status. If you were expecting to receive the email but have not (make sure to check your spam!), please email psf-elections@pyfound.org, and we’ll assist you. Please note: If you opted out of emails related to your membership, you did not receive this email. Log on to psfmember.org and visit your PSF Member User Information page\n to see your membership record and status. If you are a voting-eligible \nmember (active Supporting, Contributing, and Fellow members of the PSF) \nand do not already have a login, please create an account on psfmember.org\n and then email psf-elections@pyfound.org so we can link your membership\n to your account. Please ensure you have an account linked to your \nmembership so that we can have the most up-to-date contact information \nfor you in the future. You can affirm your voting intention by following the steps in our video tutorial: Section 4.2 of the PSF Bylaws requires that “Members of any membership class with voting rights must affirm each year to the corporation in writing that such member intends to be a voting member for such year.” Our motivation is to ensure that our elections can meet quorum as required by Section 3.9 of our bylaws. As our membership has grown, we have seen that an increasing number of Contributing and Fellow members with indefinite membership do not engage with our annual election, making quorum difficult to reach. An election that does not reach quorum is invalid. This would cause the whole voting process to be re-held, resulting in fewer voters and an undue amount of effort on the part of PSF Staff. If you were formerly a Managing member, your membership has been updated to Contributing as of June 25th, 2025, per last year’s Bylaw change that merged Managing and Contributing memberships. Per another recent Bylaw change that allows for simplifying the voter affirmation process by treating past voting activity as intent to continue voting, if you voted last year, you will automatically be added to the 2025 voter roll. Please note: If you removed or changed your email on psfmember.org, you may not automatically be added to this year's voter roll. You’ll get an email from OpaVote with a ballot on or right before September 2nd, and then you can vote! Check out our PSF Membership page to learn more. If you have questions about membership, nominations, or this year’s Board election, please email psf-elections@pyfound.org or join the PSF Discord for the upcoming Board Office Hours on August 12th, 9 PM UTC. You are also welcome to join the discussion about the PSF Board election on our forum."
  },
  {
    "url": "http://planetpython.org/",
    "title": "Planet Python",
    "content": "Last update: August 04, 2025 07:42 PM UTC\n\n\n\n\n\nAugust 04, 2025\nReal Python\nSkip Ahead in Loops With Python's Continue Keyword\n\nPythonâs continue keyword functions as a statement that controls the flow of a loop. It allows you to skip code in a loop for the current iteration and jump immediately to the next one. Itâs used exclusively in for and while loops, letting you control the flow of execution, bypass specific conditions, and continue processing in a structured and predictable way.\nBy the end of this tutorial, youâll understand that:\n\nExecuting continue doesnât affect the else clause of a loop.\nUsing continue incorrectly may result in skipping necessary code.\nYou canât use continue in a function or class thatâs nested in a loop.\nOn a bytecode level, continue executes the same instructions as reaching the end of a loop.\n\nArmed with this knowledge, youâll be able to confidently write loops using continue and expand your skills as a Python programmer.\n\nGet Your Code: Click here to download the free sample code that shows you how to skip ahead in loops with Pythonâs continue keyword .\n\n\n Take the Quiz: Test your knowledge with our interactive âSkip Ahead in Loops With Python's Continue Keywordâ quiz. Youâll receive a score upon completion to help you track your learning progress:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInteractive Quiz\nSkip Ahead in Loops With Python's Continue Keyword\nTest your understanding of Python's continue keyword, which allows you to skip code in a loop for the current iteration and jump immediately to the next one.\n\n\n\nPythonâs continue Keyword\nLoops are control flow statements used to perform operations repeatedly a certain number of times. In a normal loop, the loop body runs from start to finish, with the number of iterations controlled by the type of loop:\n\nA for loop runs a specific number of times and is usually used to process a collection of data.\nA while loop runs as long as a specific condition evaluates to True. When the condition evaluates to False, the loop ends.\n\nIn both cases, you may find it useful to stop the execution of the loop body and move to the next iteration. The way to do that is with the continue keyword.\nIn any loop, continue stops the code currently executing, and jumps immediately back to the top of the loop, skipping to the next iteration.\nUnderstanding Its Behavior in for and while Loops\nIn a for loop, continue moves the iterator to the next item to be processed. If no other items are available, then the loop ends.\nAssume you have the following for loop that computes the sum of all numbers in a list:\n\n\nPython\n\n\n\n\ntotal = 0\n\nfor number in range(-10, 10):\n    total += number\n\nprint(total)\n\n\nCopied!\n\n\nThis works fine, but what if you want to add only the positive numbers, ignoring all the negative ones? You can modify this loop to add only positive numbers using continue:\n\n\nPython\n\n\n\n\ntotal = 0\n\nfor number in range(-10, 10):\n    if number < 0:\n        continue\n    total += number\n\nprint(total)\n\n\nCopied!\n\n\nIn this case, since Python executes continue only when the number is less than zero, it doesnât add those numbers to total.\nYouâve seen how the continue statement works in a for loopânow youâll see it working similarly in a while loop.\nIn a while loop, continue transfers control back to the condition at the top of the loop. If that condition is True, then the loop body will run again. If itâs False, then the loop ends.\nConsider the following while loop. It leverages Pythonâs walrus operator to get user input, casts it to an int, and adds the number to a running total. The loop stops when the user enters 0:\n\n\nPython\nsum_whole_numbers.py\n\n\n\n\nprint(\"Enter one whole number per input.\")\nprint(\"Type 0 to stop and display their sum:\")\n\ntotal = 0\n\nwhile (user_int := int(input(\"+ \"))) != 0:\n    total += user_int\n\nprint(f\"{total=}\")\n\n\nCopied!\n\n\nAgain, you only want to add the positive numbers that your users enter, so you modify the loop using continue:\n\n\nPython\nsum_whole_numbers.py\n\n\n\n\nprint(\"Enter one whole number per input.\")\nprint(\"Type 0 to stop and display their sum:\")\n\ntotal = 0\n\nwhile (user_int := int(input(\"+ \"))) != 0:\n    if user_int < 0:\n        continue\n    total += user_int\n\nprint(f\"{total=}\")\n\n\nCopied!\n\n\nYou can copy the code and try it out. When you run the script, Python keeps prompting you for input until you enter 0:\nRead the full article at https://realpython.com/python-continue/ Â»\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]\n\nAugust 04, 2025 02:00 PM UTC\n\nQuiz: First Steps With LangChain\n\nIn this quiz, you can test your knowledge on the fundamentals of LangChain, such as creating reusable instructions with prompt templates, LangChain chains, and LangChain’s debug mode.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]\n\nAugust 04, 2025 12:00 PM UTC\n\nQuiz: Build a Scalable Flask Web Project From Scratch\n\nAre you ready to revisit the essentials of building Flask applications? In this quiz, you’ll practice Flask concepts such as views, blueprints, application factory patterns, and template usage.\nCheck your understanding of Flask fundamentals by exploring concepts covered in the tutorial Build a Scalable Flask Web Project From Scratch.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]\n\nAugust 04, 2025 12:00 PM UTC\n\nQuiz: Intro to Object-Oriented Programming (OOP) in Python\n\nIn this quiz, you’ll revisit the fundamentals of object-oriented programming (OOP) in Python and how to work with classes, objects, and constructors.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]\n\nAugust 04, 2025 12:00 PM UTC\n\nQuiz: Introduction to Web Scraping With Python\n\nIn this quiz, you’ll practice core concepts from Introduction to Web Scraping With Python. You’ll revisit what web scraping is, when to use Beautiful Soup, and how to install and configure your environment.\nYou’ll also try out key syntax for creating BeautifulSoup objects, explore common HTML parsers, and check your understanding of tools like MechanicalSoup.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]\n\nAugust 04, 2025 12:00 PM UTC\n\nQuiz: Skip Ahead in Loops With Python's Continue Keyword\n\nIn this quiz, you’ll test your understanding of\nPython’s continue statement.\nThe continue statement allows you to skip code in a loop for the current iteration,\njumping immediately to the next iteration. It’s used exclusively in for and while loops,\nallowing you to control the flow of execution, bypass specific conditions,\nand continue processing in a structured and predictable manner.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]\n\nAugust 04, 2025 12:00 PM UTC\n\nQuiz: Working With Python's Built-in Exceptions\n\nIn this quiz, you’ll revisit Python’s built-in exceptions, exploring their hierarchy and how to handle them gracefully. You’ll practice distinguishing between errors and exceptions, using try...except blocks, and identifying specific exceptions like IndexError and GeneratorExit.\nBrush up your skills by reviewing the Working With Python’s Built-in Exceptions course before you start!\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]\n\nAugust 04, 2025 12:00 PM UTC\n\nQuiz: Using the \"or\" Boolean Operator in Python\n\nIn this quiz, you’ll test your understanding of the Python or Operator.\nYou’ll learn how to use it in both Boolean and non-Boolean contexts,\nand understand how it can be used to solve programming problems.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]\n\nAugust 04, 2025 12:00 PM UTC\n\nQuiz: Python Namespace Packages\n\nIn this quiz, you’ll practice your knowledge about Python’s namespace packages.\nWhat are they used for? How do you set up a namespace package? How could you create one before PEP 420? Complete this quick quiz to test your knowledge.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]\n\nAugust 04, 2025 12:00 PM UTC\n\nEuroPython Society\nEuroPython 2025 Code of Conduct Transparency Report\n\nThe 2025 version of the EuroPython conference took place both online and in person in July 2025. This was the third conference under our current Code of Conduct (CoC), and we had Code of Conduct working group members continuously available both online and in person.ReportsOver the course of the conference, the Code of Conduct team was made aware of the following issue:One person was uncomfortable with certain phrases being used in one of the poster sessions. The author was informed, and the phrases reported were removed by the author from their poster presentation promptly.Thank you the Code of Conduct team responded to the issue reported.\n\nAugust 04, 2025 07:00 AM UTC\n\nTryton News\nAnnouncing âCode to Careâ: A Hands-On Tryton Technical Workshop (Aug 15â17)\n\nCode to Care â A Hands-On Tryton Technical Workshop\nWe are excited to announce âCode to Careâ, a 3-day live hands-on workshop on Tryton ERP customization, with a special focus on GNUHealth.\n\nDates: August 15â17, 2025\nMode: Online (Live Interactive Sessions)\nFee: â¹20,000 per participant\nLanguage: English\nRegister Interest: Expression of Interest â Code to Care: Tryton x GNUHealth Customisation Workshop\n\n About the Trainer\nWith over 10 years of hands-on experience with Tryton, the trainer has successfully implemented Tryton at Indiaâs largest medical institute, managing key domains such as HR, Payroll, Procurement, and clinical modules.\nWhat Youâll Explore\n\nHow to customise the existing modules of Tryton for your systemâs needs\nHow to build new modules to support or enhance your workflows and functionalities\nDeployment and maintenance best practices\nContributing to the Tryton and GNUHealth ecosystems\n\nGiving Back\nA portion of the participation fee will be donated to the:\n\nTryton Foundation\nGNUHealth Foundation\nopenSUSE Project\n\nFurther details will be shared with the interested participants over registered email address. Register your interest at Expression of Interest â Code to Care: Tryton x GNUHealth Customisation Workshop\n1 post - 1 participant\nRead full topic\n\nAugust 04, 2025 06:00 AM UTC\n\nStÃ©phane Wirtel\nRelancer lâÃ©criture de mon livre *Introduction Ã  Python 3.13*\n\nâï¸ Ãcrire (et rÃ©Ã©crire) mon livre Introduction Ã  Python 3.13\nQuand jâai commencÃ© mon parcours en tant quâindÃ©pendant, mon objectif Ã©tait limpide : donner des formations sur Python. Expliquer comment lâutiliser, comment le comprendre, le structurer, le manipuler. Bref, transmettre avec passion tout ce que jâavais appris au fil des annÃ©es.\nÃ cette Ã©poque, Python 2 Ã©tait encore bien prÃ©sent, mais Python 3 commenÃ§ait Ã  faire doucement son chemin. En 2014, on utilisait la version 3.4, et dÃ¨s 2015, la 3.5 Ã©tait disponible.\n\nAugust 04, 2025 12:00 AM UTC\n\nArmin Ronacher\nIn Support Of Shitty Types\n\nYou probably know that I love Rust and TypeScript, and I’m a big proponent of\ngood typing systems.  One of the reasons I find them useful is that they enable\nautocomplete, which is generally a good feature.  Having a well-integrated type\nsystem that makes sense and gives you optimization potential for memory layouts\nis generally a good idea.\nFrom that, you’d naturally think this would also be great for agentic coding\ntools.  There’s clearly some benefit to it.  If you have an agent write\nTypeScript and the agent adds types, it performs well.  I don’t know if it\noutperforms raw JavaScript, but at the very least it doesn’t seem to do any\nharm.\nBut most agentic tools don’t have access to an LSP (language server protocol).\nMy experiments with agentic coding tools that do have LSP access (with type\ninformation available) haven’t meaningfully benefited from it.  The LSP\nprotocol slows things down and pollutes the context significantly.  Also, the\nmodels haven’t been trained sufficiently to understand how to work with this\ninformation.  Just getting a type check failure from the compiler in text\nform yields better results.\nWhat you end up with is an agent coding loop that, without type checks enabled,\nresults in the agent making forward progress by writing code and putting types\nsomewhere.  As long as this compiles to some version of JavaScript (if you use\nBun, much of it ends up type-erased), it creates working code.  And from there\nit continues.  But that’s bad progressâit’s the type of progress where it\nneeds to come back after and clean up the types.\nIt’s curious because types are obviously being written but they’re largely\nbeing ignored.  If you do put the type check into the loop, my tests actually\nshowed worse performance.  That’s because the agent manages to get the code\nrunning, and only after it’s done does it run the type check.  Only then, maybe\nat a much later point, does it realize it made type errors.  Then it starts\nfixing them, maybe goes in a loop, and wastes a ton of context.  If you make it\ndo the type checks after every single edit, you end up eating even more into the\ncontext.\nThis gets really bad when the types themselves are incredibly complicated and\nnon-obvious.  TypeScript has arcane expression functionality, and some\nlibraries go overboard with complex constructs (e.g., conditional\ntypes).\nLLMs have little clue how to read any of this.  For instance, if you give it\naccess to the .d.ts files from TanStack Router and the forward declaration\nstuff it uses for the router system to work properly, it doesn’t understand any\nof it.  It guesses, and sometimes guesses badly.  It’s utterly confused.  When\nit runs into type errors, it performs all kinds of manipulations, none of which\nare helpful.\nPython typing has an even worse problem, because there we have to work with a\nvery complicated ecosystem where different type checkers cannot even agree on\nhow type checking should work.  That means that the LLM, at least from my\ntesting, is not even fully capable of understanding how to resolve type check\nerrors from tools which are not from mypy.  It’s not universally bad, but if\nyou actually end up with a complex type checking error that you cannot resolve\nyourself, it is shocking how the LLM is also often not able to fully figure out\nwhat’s going on, or at least needs multiple attempts.\nAs a shining example of types adding a lot of value we have Go.  Go’s types are\nmuch less expressive and very structural.  Things conform to interfaces purely\nby having certain methods.  The LLM does not need to understand much to\ncomprehend that.  Also, the types that Go has are rather strictly enforced.  If\nthey are wrong, it won’t compile.  Because Go has a much simpler type system\nthat doesn’t support complicated constructs, it works much betterâboth for LLMs\nto understand the code they produce and for the LLM to understand real-world\nlibraries you might give to an LLM. \nI don’t really know what to do with this, but these behaviors suggest there’s\na lot more value in best-effort type systems or type hints like JSDoc.  Because\nat least as far as the LLM is concerned, it doesn’t need to fully understand\nthe types, it just needs to have a rough understanding of what type some object\nprobably is.  For the LLM it’s more important that the type name in the error\nmessage aligns with the type name in source.\nI think it’s an interesting question whether this behavior of LLMs today will\ninfluence future language design.  I don’t know if it will, but I think it\ngives a lot of credence to some of the decisions that led to languages like Go\nand Java.  As critical as I have been in the past about their rather simple\napproaches to problems and having a design that maybe doesn’t hold developers\nin a particularly high regard, I now think that they actually are measurably in\na very good spot.  There is more elegance to their design than I gave it\ncredit for.\n\nAugust 04, 2025 12:00 AM UTC\n\nAugust 03, 2025\nThe Python Coding Stack\nFlashy, Fancy Shortcuts Aren't Always Suitable [Python Shorts]\n\nIn the previous post, I talked about Python's or keyword and how it doesn't behave the way you may expect it to. Here's the link to that article if you missed it: Do You Really Know How `or` And `and` Work in Python?One place you may see the or expression used is when dealing with the infamous mutable default value problem in functions–see the second section in Python Quirks? Party Tricks? Peculiarities Revealed… if you're not familiar with this Python banana skin. It seems some LLM models are keen to suggest this option, too.To keep this post brief, I'll assume you're familiar with both how or works and the mutable default value issue.Let's see how the or keyword is used to solve the mutable default value problem:All code blocks are available in text format at the end of this article • #1 • The code images used in this article are created using Snappify. [Affiliate link]I'm using this function for demonstration purposes. Note that the function mutates the list and returns it.But let's look at the part that's more relevant for this post. This function uses an empty list if no value is passed to the shopping_list parameter. Since you can't use an empty list as the default value, you use None as the default value.The or expression then does all the hard work:If you don't pass a list to the shopping_list parameter when you call add_to_shopping_list(), the function uses the None default value for shopping_list. And since None is falsy, the or expression evaluates to its second operand, the empty list [].However, if you already have a list with items in it and you pass it to the shopping_list parameter when you call add_to_shopping_list(), then this list is the one used within the function.Let's try it out to confirm this is how the function works.First, try with an existing list:#2You create a food_groceries list containing a few items. You then pass it to add_to_shopping_list(). You display output and food_groceries—these are names referring to the same list. They're not different lists. You can refresh your memory about Python's pass-by-assignment in functions here: If You Haven't Got A Clue What \"Pass By Value\" or \"Pass By Reference\" mean, read on…This is what you expect. Great.How about using the default value now:#3There's no second argument when you call add_to_shopping_list() this time. Therefore, the function creates an empty list and appends \"Washing Up Liquid\" to it.Again, this is the behaviour you expect.So, using the or expression to deal with the mutable default value in functions is cool, right?Subscribe nowNow Consider This…Have a look at this scenario:#4This scenario seems similar to the first one earlier, the one with the food_groceries. You create a list called clothing_items and you then pass it to the add_to_shopping_list() function.But now, although output shows the expected result, the list clothing_items is still empty.Here's what's happening:The list clothing_items is an empty list.You pass it to add_to_shopping_list(), so shopping_list now refers to the same list as clothing_items within the function.It's now the or expression's turn within the function, shopping_list = shopping_list or []. But the identifier (name) shopping_list now refers to the same list that clothing_items refers to. This is an empty list. Therefore, it's falsy……and since the first operand of the or expression is falsy, the expression evaluates to the second operand, which is also an empty list.But—and this is the key point—the or expression creates a new empty list rather than using the existing empty list (the one that clothing_items refers to).So, you still have an empty list within your function, but it's not the same one you're expecting.That's why output and clothing_items are different now. They're different lists. This didn't happen in your first example when you used food_groceries. In that example, output and food_groceries both referred to the same list.Support The Python Coding StackThe standard way of solving the mutable default value problem doesn't face this issue:#5This textbook approach to the mutable default value issue is less fancy, perhaps, but it works without surprises. It's also more readable, and that's important in Python!Do you want to try video courses designed and delivered in the same style as these posts? You can get a free trial at The Python Coding Place, and you also get access to a members-only forum.Try Out The Python Coding PlacePhoto by Dan Cristian Pădureț: https://www.pexels.com/photo/photo-of-multicolored-abstract-painting-1193743/Code in this article uses Python 3.13The code images used in this article are created using Snappify. [Affiliate link]You can also support this publication by making a one-off contribution of any amount you wish.Support The Python Coding StackFor more Python resources, you can also visit Real Python—you may even stumble on one of my own articles or courses there!Also, are you interested in technical writing? You’d like to make your own writing more narrative, more engaging, more memorable? Have a look at Breaking the Rules.And you can find out more about me at stephengruppetta.comFurther reading related to this article’s topic:Do You Really Know How `or` And `and` Work in Python?Python Quirks? Party Tricks? Peculiarities RevealedIf You Haven't Got A Clue What \"Pass By Value\" or \"Pass By Reference\" mean, read onAppendix: Code BlocksCode Block #1def add_to_shopping_list(item, shopping_list=None):\n    shopping_list = shopping_list or []\n    shopping_list.append(item)\n    return shopping_list\nCode Block #2food_groceries = [\"Milk\", \"Eggs\", \"Bread\"]\noutput = add_to_shopping_list(\"Chocolate\", food_groceries)\n\noutput\n# ['Milk', 'Eggs', 'Bread', 'Chocolate']\nfood_groceries\n# ['Milk', 'Eggs', 'Bread', 'Chocolate']\nCode Block #3household_items = add_to_shopping_list(\"Washing Up Liquid\")\nhousehold_items\n# ['Washing Up Liquid']\nCode Block #4clothing_items = []\noutput = add_to_shopping_list(\"Shirt\", clothing_items)\n\noutput\n# ['Shirt']\nclothing_items\n# []\nCode Block #5def add_to_shopping_list(item, shopping_list=None):\n    if shopping_list is None:\n        shopping_list = []\n    shopping_list.append(item)\n    return shopping_list\n\nclothing_items = []\noutput = add_to_shopping_list(\"Shirt\", clothing_items)\n\noutput\n# ['Shirt']\nclothing_items\n# ['Shirt']\nFor more Python resources, you can also visit Real Python—you may even stumble on one of my own articles or courses there!Also, are you interested in technical writing? You’d like to make your own writing more narrative, more engaging, more memorable? Have a look at Breaking the Rules.And you can find out more about me at stephengruppetta.com\n\nAugust 03, 2025 07:54 PM UTC\n\nDjango Weblog\nDSF member of the month - Jake Howard\n\nFor July 2025, we welcome Jake Howard as our DSF member of the month! â­\nJake actively shares his knowledge through blog posts and community talks. He is part of the Security Team Working Group and he created the DEP 14. He has been a DSF member since June 2024. \nYou can learn more about Jake by visiting Jake's website and his GitHub Profile.\nLetâs spend some time getting to know Jake better!\nCan you tell us a little about yourself (hobbies, education, etc)\nIâm Jake. Iâm a Senior Systems Engineer at Torchbox, where Iâve been for a little over 4 years. âSystems Engineerâ is a fairly loaded title, and means different things to different people. I like to describe it as doing everything technical to do with Software Engineering which isnât Programming (Sysadmin, Devops, IT support, Security, Networking), but also doing a fair bit of Programming.\nMost of my hobbies revolve around technology. Iâm an avid self-hoster, running applications on servers both in âthe cloudâ and in my house. Thereâs been a server of some kind in my house for the last 10 years. Iâm generally quite a private person, so I like to know whatâs happening to my data. Since I started working remotely at the start of the 2020 pandemic, Iâve channeled some of this passion into posts on my website, with posts about all manner of things Iâve done from self-hosting to general software engineering.\nAway from my desk (sort of), Iâm a volunteer for Student Robotics, inspiring college students into STEM through competitive robotics (no, not quite like Robot Wars). In school, I was always the quiet one, but now I seem completely at home with public speaking, commentary and otherwise being in front of large crowds of people. I wish I knew the secret - Iâd make millions!\nMy GitHub is also pretty active, with contributions all over the place (OpenZFS, Nebula VPN, Gitea, Plausible Analytics, OpenCV, Ansibleâ¦).\nIâm curious, where your nickname âRealOrangeOneâ comes from?\nBecause a lot of life happens online (especially in the last 5 years), many people havenât even seen pictures of me, let alone met me in person. I am not in fact a talking piece of fruit. For a while, I tried to stay anonymous, avoiding photos or videos of me on the internet. But since I discovered I enjoy public speaking, Iâve sort of given up on that (for the most part).\nBy now, Iâm sure many people have speak. But, for those who donât know: I, like my father before me, am ginger ð¥ (the hair colour, not the plant).\nThe exact specifics of how being ginger lead to âTheOrangeOneâ are sadly lost to time. Iâve owned theorangeone.net for well over a decade at this point. Unfortunately, itâs not a particularly original nickname, and I have to be fast to claim it when signing up to new services. In some places (where I wasnât fast enough) Iâm forced to sub out âTheâ for âRealâ, which has lead to some confusions, but not too many. Canonically, I prefer âTheOrangeOneâ, but as we all know, naming things is hard.\nHow did you start using Django?\nIâve been using Django since around the 1.8 release. My job at the time was at a Django development agency, so it was the first real Python framework Iâd used. The first few weeks there was my first exposure to Django, pip, package management and collaborative software engineering - it was quite a lot to learn at once. I didnât realise it at the time, but I was working working as a junior alongside a couple fairly well-known names in the Django community like Tom Christie (DRF, Starlette, HTTPX) and Jamie Matthews (django-readers, django-zen-queries). We mostly built single-page apps with React, so I learned Django and Django Rest Framework at the same time, which means I now often have to look back at the docs to remember how forms and templates work.\nAs for contributing to Django, that came much later. My first commit to Django was in May 2024. Having used Django for a while, and written plenty of packages, Iâd never stopped to look at how upstream was developed. Around the time of DEP 14 kicking off, I needed to look a bit more at the inner workings of the Django project, to learn what was in store for me. When scrolling through Trac tickets, I found an interesting looking ticket, and got to work. At the time of writing, Iâve now closed 9 Trac tickets across 12 PRs, and some pretty cool features (simple block tags, better Accept header parsing, performance improvements to the URL router) now have my name on them (metaphorically speaking).\nI wouldnât call myself an âactiveâ contributor, but I try and keep an eye on the tickets and forum threads which interest me the most, and chime in when I can.\nWhat other framework do you know and if there is anything you would like to have in Django if you had magical powers?\nSince itâs the first framework I learned, and so far has done everything I need, Iâve mostly used Django. For a few smaller services, Iâve leaned more towards Starlette and AIOHTTP, but for anything even slightly large Iâve just used Django - since Iâd end up recreating much of Django using the smaller frameworks anyway. A better (likely official) path for single-file Django (ie without some of the magic module handling) might help draw a few more people in and fill a few more of these âmicro-serviceâ style use-cases.\nIâm a class-based views person - I like the encapsulation and easy extension of base views. As with any opinion on the internet, Iâm sure many people disagree with me, but to me itâs just personal preference. Iâm still surprised itâs a pattern not seen by many other Python frameworks.\nFollowing in the footsteps of Python, I often wonder if Django could also do with some dead battery removal (or at least extracting into separate packages). Django is a pretty big framework, and whilst the contrib apps are intended to be separate, they also require hooks and assumptions in other areas of the codebase. I might be wrong (it happens quite a lot), but I suspect some of those packages would be better suited externally, perhaps improving some developer momentum - and lightening the load for the Fellows. Djangoâs sitemap and syndication (RSS) frameworks are 2 places I wish would get some more love.\nOutside of Python, Iâm a big fan of Rust (as cliche as it may be). Whilst Rust is a popular language, there isnât really a âDjangoâ like (batteries included) framework - itâs all composing the pieces you need yourself. However, that doesnât stop people being very productive with it. As a result, most of the frameworks have very generic interfaces, letting developers pass state around as needed, rather than trying to do everything themselves. Outside of the obvious static typing debate (which Iâm in favour of), Iâd love to see Django embrace some dependencies, especially if they bring some performance improvements. It may end up being a bad idea, but it might also help those who want to use Djangoâs modules outside of Django.\nMany years ago, I tried to be a polyglot - switching between different programming languages (and frameworks) to find new ways of working and match the problem to the correct solution. Now, Iâve settled mostly on Python and Rust. They fit my needs well, Iâm very productive in them, and between the 2 thereâs not much they canât handle. Given my background, and the fact most sysadmin-y tools are written in it, Iâm really not a fan of Go.\nWhat projects are you working on now?\nOver time, Iâve slowly stepped back from having big side projects - being a new dad sure takes up time and energy. Large projects ended up feeling too much like work outside of work, and I end up either getting distracted or bored. After work, I want to do something fun, not that seems like yet another job. Iâm the kind of person who gets the sudden urge to research something interesting for an evening, dive in, then not think about it again for several weeks. Itâs not the most productive way of doing things, which is why my posts are all over the place, but it doesnât feel much like work for me - I lean heavily on what interests me at any time to drive what I want to do.\nWith that said, Iâm currently in the process of rebuilding my website. Of course, both the current and new versions are built on Django, but the new build should be easier to maintain, faster, and hopefully wonât need rewriting again in just a couple years. Most of my other projects have been small tools to make my home server that bit nicer.\nProfessionally, Iâm not really a developer anymore. As a sysadmin (ish), much of my day-to-day doesnât involve much programming. I spend much more of my time deploying, monitoring and administering Django applications than I do writing them. My main project at the moment is helping port a large Java / JS deployment over to Django and Wagtail, running on Kubernetes with some very high and interesting stability and scaling requirements. Since most of my professional live has been at software agencies, Iâve tended to bounce between different projects, rather than sitting on a single one. So Iâm also supporting on a few other smaller projects as and when Iâm needed.\nWhich Django libraries are your favorite (core or 3rd party)?\ndjango-tasks, of course!\nâ¦\nOh right, a serious answerâ¦\nI have to say, one of the most underrated modules in Django is django.utils. Itâs not as glamourous as the ORM, forms or cache, but itâs a treasure trove of useful methods. I personally always like looking at the internal helper functions large frameworks use - see the problems theyâve had to solve time and time again. Whilst thereâs not the same stability guarantees, Iâve definitely been helped out on a few occasions by some undocumented functions.\nIn that theme, Iâm a fan of libraries which do one thing and do it well. I quite like small libraries which aim to solve a problem. Thereâs definitely a line before that becomes a problem (anyone remember left-pad?), but libraries which scope creep are often harder to work with than the more narrow-scoped ones, whilst the smaller ones just keep on working and making my life easier. For example, django-environ makes reading and parsing environment variables into settings really easy and clean, and django-decorator-include helps including other urlpatterns whilst wrapping them in a decorator - particularly helpful for 3rd-party packageâs URLs.\nFinally, Iâve got a real soft-spot for whitenoise (and ServeStatic for ASGI users). Djangoâs documentation deters people pretty hard from serving media and static files using Django - and rightly so in performance-critical environments. However, for most people, having to additionally maintain (and secure) nginx is more maintenance than necessary. whitenoise serves static files using Django directly, without any extra configuration, whilst also pre-compressing files for a nice performance boost. To me, itâs such a universally-useful library, Iâd love to see it it included in Django itself someday.\nIâll throw a bonus shout out for granian, a new (ish) WSGI / ASGI server written in Rust. gunicorn has a near monopoly on running Python apps in production, especially in the WSGI space, so itâs nice to see a newcomer. granian isnât always faster, but doing the HTTP handling in Rust (and using popular libraries to do it) can improve stability and throughput, without holding the GIL. Iâve not run anything in production with it yet, but Iâve been using it on personal projects for almost a year without issue.\nWhat are the top three things in Django that you like?\nContrary to what Iâve already said, I actually like Djangoâs batteries. Sure, thereâs quite a few âdeadâ ones in need of some cleaning up and TLC, but having most of what I need already installed makes me far more productive. I donât need to think about how to render my form on the page, save the results as a model, or properly handle errors - everything âjust worksâ, and works together. Sure, batteries have their downsides - it makes swapping them out rather difficult, but Iâd rather ship my feature sooner than compare the trade-offs of different ORMs. The auto-reloading in django-tasks is only around 8 lines of code thanks to django.utils.autoreload being so easy to hook in to.\nSecondly: Forms, but not for the reasons you might think. Most forms are created to take submissions from the user, validate them, then probably save them to a model. However, theyâre great as general data validation. Iâve written plenty of views with complex querystring requirements, and leaning on forms to validate them saves a lot of boilerplate code. Sure, pydantic might be a bit faster and have more features, but given Iâm already productive with django.forms, and itâs already installed and well understood by other developers in my team, I donât feel the need to reach for something else.\nFinally, I wouldnât say itâs quite a âfavouriteâ, and itâs well-known as being far-from-perfect, but Iâve got a real soft-spot for the Django Admin. It lets me focus on building the core of an application, rather than the internal interface - particularly when there are no strong requirements for it, or itâs only going to be used by me and a few others. Since itâs a fair raw view of the database by default, Iâve definitely been bitten by some less-than-restrictive permissions, but thereâs generally all the hooks I need. I donât like building frontends, so only needing to build 1 rather than 2 makes me a lot happier, especially if it comes with authentication, permissions, read-only views and a dark mode ð!\nHow did you join the security team?\nIâd love to say itâs an interesting story, stroking my ego that I saved the day. But the reality is, as usual, far less glamorous.\nAs an engineer, Iâve tended towards 2 specialties: Security and Performance, which usually go hand-in-hand. In early 2023, I was invited to join the Wagtail CMS Security team after reporting and subsequently helping fix a memory exhaustion issue. I was already involved in all things security at Torchbox, especially our ISO-27001 certification, so I was already known when I submitted a vulnerability report.\nThibaud mentioned to me late last year that the project potentially looking for new members of the security team, to help with resourcing and some potential process improvements within the foundation. I naturally jumped at the opportunity - since the team is generally closed to new members and âfully-staffedâ. After a few gentle reminders (heâs a busy guy), I received a message from Sarah formally inviting me in March.\nSince then, Iâve tried to review every report which came through, and helped author a few patches. A few reports even had to be raised upstream with Pythonâs Security Response Team (PSRT). Itâs been an interesting experience, and Iâm looking forward to seeing how the team developers over the coming years.\nIâm aware that you have created DEP 14 on the Background Workers, how the work is going so far? Do you need support from the community on anything?\nDEP 14 (the proposal to add a native background workers API to Django) has been a really interesting journey. Iâm beyond humbled to see the community interest behind it. When I started down this road, Iâd only intended to start the conversations and help rally the community interest. Since then, and 6000 lines of code later, Iâm mostly single-handedly writing a database-backed production-grade task system.\nRight now, weâre at a bit of a cross-roads. Many of the foundational parts work, relatively well. The difficulty comes with the more complex features: Retries, dependencies, robust execution. Building a task system is easy - building a reliable one people want to actually use is incredibly difficult. If anyone out there is interested in getting involved, please do! Report issues, fix bugs, contribute to design discussions. Most of the APIs are based on what I think looks sensible. Software this large, pivotal and complex canât be built in isolation - so it needs a diverse audience to ensure we (I) make the right decisions, and design an API people actually want to use that will last and scale for years to come.\nThe next challenge on my list to tackle is timeouts - a highly requested feature. It sounds simple, but the reality is far from it. Many of those challenges sparked the topic of my upcoming PyCon UK talk later this year.\nDjango is celebrating its 20th anniversary this month. Any nice story to share?\nMy personal highlight was DjangoCon Europe 2024 - my first DjangoCon. I ended up bringing the stereotypically grey British weather with me, but I had a great week chatting Django with some interesting people, and putting faces to the names and handles Iâd seen online. After the talk announcing DEP 14 and background tasks, I was inundated with people voicing their support - many wondering how itâd taken this long.\nBut personally, Iâm more interested in whatâs to come. Of course, thereâs django-tasks, but the next sets of releases are shaping up to be pretty interesting. Over the last 3-4 years or so, Iâve personally noticed a bit of a resurgence in peopleâs appetites for change in Django. The 6.x Steering Council have a lot of interesting ideas, and clearly the community agree. People are happy with what Django can do now, but want to bring it a little more up-to-date - and are happy to put in the work to do it. Only a few weeks ago, django-csp was included in core, making it easier to make more secure applications. Iâm sure thatâs just the start. The fact people are still keen on working on a framework which just celebrated 20 years shows it must be doing something right!\nIs there anything else youâd like to say?\nIâd like to thank whoever nominated me to be a DSF member in the first place. To this date, I have no idea who you are.\nBeyond that, Iâm just looking forward to seeing what comes of Django, and Python in general over the next few years.\n\nThank you for doing the interview, Jake !\n\nAugust 03, 2025 01:20 PM UTC\n\nAugust 01, 2025\nReal Python\nThe Real Python Podcast â Episode #259: Design Patterns That Don't Translate to Python\n\nDo the design patterns learned in other programming languages translate to coding in Python? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]\n\nAugust 01, 2025 12:00 PM UTC\n\nZero to Mastery\n[July 2025] Python Monthly Newsletter ð\n\n68th issue of Andrei Neagoie's must-read monthly Python Newsletter: Useless Design Patterns, Django turns 20, 330Ã faster Python, and much more. Read the full newsletter to get up-to-date with everything you need to know from last month.\n\nAugust 01, 2025 10:00 AM UTC\n\nWingware\nWing Python IDE Version 11.0.3 - August 1, 2025\n\nWing Python IDE version 11.0.3 has been released.  It improves Python code analysis,\nfixes problems debugging Django templates, fixes refactoring when the target file\nis in a hidden directory, and makes a number of other minor improvements.\nDownloads\nBe sure to Check for Updates in Wing's Help menu after downloading, to make\nsure that you have the latest hot fixes.\nWing Pro 11.0.3\nWing Personal 11.0.3\nWing 101 11.0.3\nWing 10 and earlier versions are not affected by installation of Wing 11 and\nmay be installed and used independently. However, project files for Wing 10\nand earlier are converted when opened by Wing 11 and should be saved under a\nnew name, since Wing 11 projects cannot be opened by older versions of Wing.\n New in Wing 11Improved AI Assisted DevelopmentWing 11 improves the user interface for AI assisted development by introducing two separate\ntools AI Coder and AI Chat. AI Coder can be used to write, redesign, or extend code\nin the current editor. AI Chat can be used to ask about code or iterate in creating a\ndesign or new code without directly modifying the code in an editor.\nWing 11's AI assisted development features now support not just OpenAI but also Claude, Grok,\nGemini, Perplexity, Mistral, Deepseek, and any other OpenAI completions API compatible AI provider.\nThis release also improves setting up AI request context, so that both automatically and\nmanually selected and described context items may be paired with an AI request. AI request\ncontexts can now be stored, optionally so they are shared by all projects, and may be used\nindependently with different AI features.\nAI requests can now also be stored in the current project or shared with all projects, and Wing\ncomes preconfigured with a set of commonly used requests. In addition to changing code in the\ncurrent editor, stored requests may create a new untitled file or run instead in AI Chat. Wing\n11 also introduces options for changing code within an editor, including replacing code,\ncommenting out code, or starting a diff/merge session to either accept or reject changes.\nWing 11 also supports using AI to generate commit messages based on the changes being committed\nto a revision control system.\nYou can now also configure multiple AI providers for easier access to different models.\nFor details see AI Assisted Development under Wing Manual in Wing 11's Help menu.\nPackage Management with uv Wing Pro 11 adds support for the uv package manager in the New Project dialog and the\nPackages tool.\nFor details see Project Manager > Creating Projects > Creating Python Environments and Package\nManager > Package Management with uv under Wing Manual in Wing 11's Help menu.\nImproved Python Code AnalysisWing 11 makes substantial improvements to Python code analysis, with better support for\nliterals such as dicts and sets, parametrized type aliases, typing.Self, type of\nvariables on the def or class line that declares them, generic classes with\n[...], __all__ in *.pyi files, subscripts in typing.Type and similar, type\naliases, type hints in strings, type[...] and tuple[...],\n@functools.cached_property, base classes found also in .pyi files, and\ntyping.Literal[...].\nUpdated LocalizationsWing 11 updates the German, French, and Russian localizations, and introduces a new experimental\nAI-generated Spanish localization. The Spanish localization and the new AI-generated strings in the\nFrench and Russian localizations may be accessed with the new User Interface > Include AI\nTranslated Strings preference.\nImproved diff/mergeWing Pro 11 adds floating buttons directly between the editors to make navigating differences\nand merging easier, allows undoing previously merged changes, and does a better job managing\nscratch buffers, scroll locking, and sizing of merged ranges.\nFor details see Difference and Merge under Wing Manual in Wing 11's Help menu.\nOther Minor Features and ImprovementsWing 11 also improves the custom key binding assignment user interface, adds a Files >\nAuto-Save Files When Wing Loses Focus preference, warns immediately when opening a project with\nan invalid Python Executable configuration, allows clearing recent menus, expands the set of\navailable special environment variables for project configuration, and makes a number of other\nbug fixes and usability improvements.\nChanges and IncompatibilitiesSince Wing 11 replaced the AI tool with AI Coder and AI Chat, and AI\nconfiguration is completely different than in Wing 10, you will need to reconfigure your\nAI integration manually in Wing 11. This is done with Manage AI Providers in the\nAI menu. After adding the first provider configuration, Wing will set that provider as\nthe default. You can switch between providers with Switch to Provider in the AI menu.\nIf you have questions, please don't hesitate to contact us at support@wingware.com.\n\nAugust 01, 2025 01:00 AM UTC\n\nMatt Layman\nPython and AI workflow with LangGraph\n\nIn this stream, I worked on a personal AI workflow that I’m building using LangGraph. I discussed human-in-the-loop and how to bring a person into the workflow process.\n\nAugust 01, 2025 12:00 AM UTC\n\nHoloViz\nPlotting made easy with hvPlot: 0.12 release\n\n\n\nAugust 01, 2025 12:00 AM UTC\n\nmeejah.ca\nShWiM: peer-to-peer terminal sharing\n\nSHell WIth Me combines magic-wormhole and tty-share for e2ee, p2p terminal sharing\n\nAugust 01, 2025 12:00 AM UTC\n\nJuly 31, 2025\nPython Morsels\nNested functions in Python\n\nFunctions in Python can be defined within another function.\n\n\n\nTable of contents\n\nA function defined within a function\nA function returned from another function\nThe enclosing scope\nClosures with nested functions\nWhy nest functions within functions?\nDecorators involve nested functions\nNested functions are possible in Python\n\n\n\n\nA function defined within a function\nPython's functions can be defined pretty much anywhere.\nYou can even define a function inside a function:\ndef greet_me(name=\"friend\"):\n    def greet():\n        print(\"Hello\", name)\n    greet()\n\nWhen we call this greet_me function, it defines a greet a function and then calls that function:\n>>> greet_me()\nHello friend\n\nNote that the inner function is allowed to use the name from the outer function.\nA function returned from another function\nInstead of calling our inner â¦\n\nRead the full article: https://www.pythonmorsels.com/nested-functions/\n\nJuly 31, 2025 03:30 PM UTC\n\nDjango Weblog\nDjangonaut Space is looking for contributors to be mentors\n\nHello Django ð Universe!\nð°ï¸â This is Djangonaut Space phoning home about Session 5! We're recruiting technical mentors (Navigators) to join our next ðstellarð mission.\nð©âð We are looking for people who regularly contribute to Django or a Django related package, that want to mentor others. Our next session will be Oct-Nov.\nð Come join us and be a cosmic contributor! Express your interest to be a mentor here.\nð Want to learn more about what it means to be a Navigator:\n\nHere's a high-level overview of the role\nHere's the workbook each Navigator is provided\n\nð¤ Interested people will have to complete a 30 minute meet & greet type interview with organizers.\nâ If you're interested in applying to be a Djangonaut, applications will open and close in September (dates to be determined). The latest information will be posted on our site, djangonaut.space. Please follow our social media accounts or subscribe to our newsletter for announcements.\nâï¸ We'll see you around the cosmos!\nDjangonaut Space session organizers\n\nJuly 31, 2025 02:34 PM UTC\n\nPyCharm\n\n\n\nThe Bazel Plugin for IntelliJ IDEA Is Now Generally Available!\nAfter much anticipation, we are finally ready to announce the general availability (GA) of the new Bazel plugin for IntelliJ IDEA, PyCharm, and GoLand â now developed by JetBrains! After months of focused development and valuable feedback from our EAP users, we’re officially launching our revamped Bazel experience.\nWhile we’ve been shipping updates regularly, the leap to our 2025.2 GA release marks a major milestone. Even though our primary focus for this release was on creating the best experience we can for Java, Kotlin, and Scala developers, we also brought support for the Python and Go ecosystems, and we will continue to maintain and improve it in the coming releases.\nIf you’re migrating from the previous plugin originally released by Google, you’ll notice a more straightforward workflow that aligns with the standard JetBrains IDE experience you expect from other build tool integrations such as Maven and Gradle. Now, let’s dive into what’s new!\nKey features in 2025.2\n\nBazel Query in Action\n\nGo is a go. We’re officially rolling out support for Go. You can now import your Go targets in Bazel projects into both IntelliJ IDEA (with the Go plugin) and GoLand. This brings the full IDE experience you rely on: code highlighting, completion, navigation, and the ability to run, debug, and get coverage for your tests.\nBuilt-in Bazel Query tool window: Go beyond sync and build with Bazel queries integrated directly into your IDE via their own dedicated tool window. Craft your queries with syntax completion and a helpful UI for flags to explore your project’s dependency graph without ever leaving the editor.\nDramatically faster indexing: We’ve optimized indexing to get you to your code faster. You can now use the import_depth and import_ijars settings in your .bazelproject file to prevent the indexing of deep transitive dependencies and index only header jars instead of full jars. Whatâs more, only the files directly referenced in your .bazelproject view are fully indexed for code intelligence, which can slash indexing times and memory usage in large projects with many auxiliary files.\n\nNew plugin, new user experience\nBack in December, we publicly announced the EAP (Early Access Program) version of our new plugin and defined what it would take to release it into GA, with an overview of the main differences between the original plugin and the new one.\nHereâs a quick recap for those moving from the older plugin: We’ve smoothed out the rough edges to make Bazel feel like a natural part of the IDE.\n\nSimplified project import: The old import wizard is a thing of the past. Now, simply open a directory containing your MODULE.bazel or WORKSPACE file. For more control, you can open a specific .bazelproject view file. If you manage a large monorepo, you can provide a default template for your team by checking in a template at tools/intellij/.managed.bazelproject.\nRedesigned UI elements: The Bazel tool window is now your central hub for actions like resyncing your project (with a Build and Resync option for generating sources) and keeping track of targets in your working set. We’ve also added a widget listing all targets the currently opened file belongs to. It allows you to run actions on these targets (build / test / jump to BUILD file / copy target label)\nReworked target mapping for JVM projects: A core improvement is the new internal representation for JVM targets, which mirrors the actual Bazel graph. This fundamental change enables more accurate highlighting, more accurate completions and more reliable refactoring.\n\nImprovements since 2025.1\nWindows compatibility\nWe understand that development doesn’t just happen on one OS. Thatâs why we worked on making our plugin compatible with Microsoft Windows, bringing most of the feature set to our Windows-based users.\nEnhanced Bazel configuration support\nWe believe editing your build files should be as easy as editing your source code, which is why we’ve improved the user experience for all Bazel-related configuration files.\nStarlark (.bzl, BUILD)\n\nStarlark Quick Documentation\n\nQuick documentation for Starlark rules: Hover over a Starlark rule or function to see its documentation directly in the editor. You’ll also get documentation as you type, guiding you through available parameters.\nAutomatic formatting: If you have buildifier on your PATH, the plugin will now automatically format your Starlark files on save\n\nBazel module configuration file (MODULE.bazel)\n\nIntelligent editing: The MODULE.bazel editor now offers smart completions for arguments and displays documentation as you edit.\n\nBazel project view file (.bazelproject) \n\n.bazelproject view highlighting and completions\n\nGuided editing: Get completions for section names and known values. The editor will now highlight completely unsupported sections as errors and sections that are supported in the old plugin originally by Google (but not in the new one) as warnings.\nManage directories from the Project view file tree: You can now right-click a directory in the project tree to add or remove it from your .bazelproject file, thus loading or unloading that directory in IntelliJ.\n\nBazelisk configuration file (.bazelversion):\n\nStay up to date: The editor will now highlight outdated Bazel versions specified in your .bazelversion file and offer a quick-fix to update to the latest release.\n\nLanguage ecosystem enhancements\n\nJVM:\n\nThe underlying project model mapping has been further improved, resulting in better performance during sync and more reliable refactorings for targets where glob patterns match the whole directory.\n\n\nScala:\n\nThe Bazel plugin now respects the scalacopts parameter in your scala_* targets, which unlocks Scala 3 highlighting features with the -Xsource:3 flag. At the same time, we’ve updated the Scala plugin to provide native integration with the Bazel plugin out of the box.\n\n\nPython:\n\nRun from the gutter: py_test and py_binary targets now get the familiar green Run arrow in the editor gutter.\nImproved dependency resolution: Python dependencies are now resolved correctly, enabling code navigation and eliminating false error highlighting.\nInterpreter from MODULE.bazel: The plugin now sets the Python interpreter based on what is defined in MODULE.bazel. This includes support for hermetic toolchains downloaded by rules_python â meaning you don’t need to have Python installed locally on your machine.\nDebugging: You can now attach the debugger to py_test targets.\n\n\n\nWhat happens to the Bazel plugin by Google?\nThe Bazel for IntelliJ plugin (also known as IJwB) by Google is being deprecated. Google has transferred the code ownership and maintenance to JetBrains. We will keep providing compatibility updates for new IntelliJ versions and critical fixes only throughout the year of 2025, but will be fully deprecating it in 2026. All our development effort for IntelliJ IDEA, GoLand, and PyCharm is now focused on the new plugin.\nThe Bazel for CLion plugin (CLwB) has also been transferred to JetBrains, and will continue to be actively developed. Learn more in the post Enhancing Bazel Support for CLion on the CLion Blog.\nGot feedback? Weâre listening!\nWe’re committed to making this the best Bazel experience possible. Please report any issues, ideas, or improvements straight to our issue tracker.\nFixed the problem yourself? We accept PRs on our hirschgarten repository.\nYou’ll also find us on the Bazel Community Slack, in the #intellij channel.\nHappy building!\n\nJuly 31, 2025 01:40 PM UTC\n\nBazel Plugin Release: General Availability\n\n\n\nJuly 31, 2025 10:20 AM UTC Pythonâs continue keyword functions as a statement that controls the flow of a loop. It allows you to skip code in a loop for the current iteration and jump immediately to the next one. Itâs used exclusively in for and while loops, letting you control the flow of execution, bypass specific conditions, and continue processing in a structured and predictable way.\nBy the end of this tutorial, youâll understand that:\n\nExecuting continue doesnât affect the else clause of a loop.\nUsing continue incorrectly may result in skipping necessary code.\nYou canât use continue in a function or class thatâs nested in a loop.\nOn a bytecode level, continue executes the same instructions as reaching the end of a loop.\n\nArmed with this knowledge, youâll be able to confidently write loops using continue and expand your skills as a Python programmer.\n\nGet Your Code: Click here to download the free sample code that shows you how to skip ahead in loops with Pythonâs continue keyword .\n\n\n Take the Quiz: Test your knowledge with our interactive âSkip Ahead in Loops With Python's Continue Keywordâ quiz. Youâll receive a score upon completion to help you track your learning progress:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInteractive Quiz\nSkip Ahead in Loops With Python's Continue Keyword\nTest your understanding of Python's continue keyword, which allows you to skip code in a loop for the current iteration and jump immediately to the next one.\n\n\n\nPythonâs continue Keyword\nLoops are control flow statements used to perform operations repeatedly a certain number of times. In a normal loop, the loop body runs from start to finish, with the number of iterations controlled by the type of loop:\n\nA for loop runs a specific number of times and is usually used to process a collection of data.\nA while loop runs as long as a specific condition evaluates to True. When the condition evaluates to False, the loop ends.\n\nIn both cases, you may find it useful to stop the execution of the loop body and move to the next iteration. The way to do that is with the continue keyword.\nIn any loop, continue stops the code currently executing, and jumps immediately back to the top of the loop, skipping to the next iteration.\nUnderstanding Its Behavior in for and while Loops\nIn a for loop, continue moves the iterator to the next item to be processed. If no other items are available, then the loop ends.\nAssume you have the following for loop that computes the sum of all numbers in a list:\n\n\nPython\n\n\n\n\ntotal = 0\n\nfor number in range(-10, 10):\n    total += number\n\nprint(total)\n\n\nCopied!\n\n\nThis works fine, but what if you want to add only the positive numbers, ignoring all the negative ones? You can modify this loop to add only positive numbers using continue:\n\n\nPython\n\n\n\n\ntotal = 0\n\nfor number in range(-10, 10):\n    if number < 0:\n        continue\n    total += number\n\nprint(total)\n\n\nCopied!\n\n\nIn this case, since Python executes continue only when the number is less than zero, it doesnât add those numbers to total.\nYouâve seen how the continue statement works in a for loopânow youâll see it working similarly in a while loop.\nIn a while loop, continue transfers control back to the condition at the top of the loop. If that condition is True, then the loop body will run again. If itâs False, then the loop ends.\nConsider the following while loop. It leverages Pythonâs walrus operator to get user input, casts it to an int, and adds the number to a running total. The loop stops when the user enters 0:\n\n\nPython\nsum_whole_numbers.py\n\n\n\n\nprint(\"Enter one whole number per input.\")\nprint(\"Type 0 to stop and display their sum:\")\n\ntotal = 0\n\nwhile (user_int := int(input(\"+ \"))) != 0:\n    total += user_int\n\nprint(f\"{total=}\")\n\n\nCopied!\n\n\nAgain, you only want to add the positive numbers that your users enter, so you modify the loop using continue:\n\n\nPython\nsum_whole_numbers.py\n\n\n\n\nprint(\"Enter one whole number per input.\")\nprint(\"Type 0 to stop and display their sum:\")\n\ntotal = 0\n\nwhile (user_int := int(input(\"+ \"))) != 0:\n    if user_int < 0:\n        continue\n    total += user_int\n\nprint(f\"{total=}\")\n\n\nCopied!\n\n\nYou can copy the code and try it out. When you run the script, Python keeps prompting you for input until you enter 0:\nRead the full article at https://realpython.com/python-continue/ Â»\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] Pythonâs continue keyword functions as a statement that controls the flow of a loop. It allows you to skip code in a loop for the current iteration and jump immediately to the next one. Itâs used exclusively in for and while loops, letting you control the flow of execution, bypass specific conditions, and continue processing in a structured and predictable way. By the end of this tutorial, youâll understand that: Armed with this knowledge, youâll be able to confidently write loops using continue and expand your skills as a Python programmer. Get Your Code: Click here to download the free sample code that shows you how to skip ahead in loops with Pythonâs continue keyword . Take the Quiz: Test your knowledge with our interactive âSkip Ahead in Loops With Python's Continue Keywordâ quiz. Youâll receive a score upon completion to help you track your learning progress: Interactive Quiz Test your understanding of Python's continue keyword, which allows you to skip code in a loop for the current iteration and jump immediately to the next one. Loops are control flow statements used to perform operations repeatedly a certain number of times. In a normal loop, the loop body runs from start to finish, with the number of iterations controlled by the type of loop: In both cases, you may find it useful to stop the execution of the loop body and move to the next iteration. The way to do that is with the continue keyword. In any loop, continue stops the code currently executing, and jumps immediately back to the top of the loop, skipping to the next iteration. In a for loop, continue moves the iterator to the next item to be processed. If no other items are available, then the loop ends. Assume you have the following for loop that computes the sum of all numbers in a list: This works fine, but what if you want to add only the positive numbers, ignoring all the negative ones? You can modify this loop to add only positive numbers using continue: In this case, since Python executes continue only when the number is less than zero, it doesnât add those numbers to total. Youâve seen how the continue statement works in a for loopânow youâll see it working similarly in a while loop. In a while loop, continue transfers control back to the condition at the top of the loop. If that condition is True, then the loop body will run again. If itâs False, then the loop ends. Consider the following while loop. It leverages Pythonâs walrus operator to get user input, casts it to an int, and adds the number to a running total. The loop stops when the user enters 0: Again, you only want to add the positive numbers that your users enter, so you modify the loop using continue: You can copy the code and try it out. When you run the script, Python keeps prompting you for input until you enter 0: [ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] August 04, 2025 02:00 PM UTC In this quiz, you can test your knowledge on the fundamentals of LangChain, such as creating reusable instructions with prompt templates, LangChain chains, and LangChain’s debug mode.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] In this quiz, you can test your knowledge on the fundamentals of LangChain, such as creating reusable instructions with prompt templates, LangChain chains, and LangChain’s debug mode. [ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] August 04, 2025 12:00 PM UTC Are you ready to revisit the essentials of building Flask applications? In this quiz, you’ll practice Flask concepts such as views, blueprints, application factory patterns, and template usage.\nCheck your understanding of Flask fundamentals by exploring concepts covered in the tutorial Build a Scalable Flask Web Project From Scratch.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] Are you ready to revisit the essentials of building Flask applications? In this quiz, you’ll practice Flask concepts such as views, blueprints, application factory patterns, and template usage. Check your understanding of Flask fundamentals by exploring concepts covered in the tutorial Build a Scalable Flask Web Project From Scratch. [ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] August 04, 2025 12:00 PM UTC In this quiz, you’ll revisit the fundamentals of object-oriented programming (OOP) in Python and how to work with classes, objects, and constructors.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] In this quiz, you’ll revisit the fundamentals of object-oriented programming (OOP) in Python and how to work with classes, objects, and constructors. [ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] August 04, 2025 12:00 PM UTC In this quiz, you’ll practice core concepts from Introduction to Web Scraping With Python. You’ll revisit what web scraping is, when to use Beautiful Soup, and how to install and configure your environment.\nYou’ll also try out key syntax for creating BeautifulSoup objects, explore common HTML parsers, and check your understanding of tools like MechanicalSoup.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] In this quiz, you’ll practice core concepts from Introduction to Web Scraping With Python. You’ll revisit what web scraping is, when to use Beautiful Soup, and how to install and configure your environment. You’ll also try out key syntax for creating BeautifulSoup objects, explore common HTML parsers, and check your understanding of tools like MechanicalSoup. [ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] August 04, 2025 12:00 PM UTC In this quiz, you’ll test your understanding of\nPython’s continue statement.\nThe continue statement allows you to skip code in a loop for the current iteration,\njumping immediately to the next iteration. It’s used exclusively in for and while loops,\nallowing you to control the flow of execution, bypass specific conditions,\nand continue processing in a structured and predictable manner.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] In this quiz, you’ll test your understanding of\nPython’s continue statement. The continue statement allows you to skip code in a loop for the current iteration,\njumping immediately to the next iteration. It’s used exclusively in for and while loops,\nallowing you to control the flow of execution, bypass specific conditions,\nand continue processing in a structured and predictable manner. [ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] August 04, 2025 12:00 PM UTC In this quiz, you’ll revisit Python’s built-in exceptions, exploring their hierarchy and how to handle them gracefully. You’ll practice distinguishing between errors and exceptions, using try...except blocks, and identifying specific exceptions like IndexError and GeneratorExit.\nBrush up your skills by reviewing the Working With Python’s Built-in Exceptions course before you start!\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] In this quiz, you’ll revisit Python’s built-in exceptions, exploring their hierarchy and how to handle them gracefully. You’ll practice distinguishing between errors and exceptions, using try...except blocks, and identifying specific exceptions like IndexError and GeneratorExit. Brush up your skills by reviewing the Working With Python’s Built-in Exceptions course before you start! [ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] August 04, 2025 12:00 PM UTC In this quiz, you’ll test your understanding of the Python or Operator.\nYou’ll learn how to use it in both Boolean and non-Boolean contexts,\nand understand how it can be used to solve programming problems.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] In this quiz, you’ll test your understanding of the Python or Operator.\nYou’ll learn how to use it in both Boolean and non-Boolean contexts,\nand understand how it can be used to solve programming problems. [ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] August 04, 2025 12:00 PM UTC In this quiz, you’ll practice your knowledge about Python’s namespace packages.\nWhat are they used for? How do you set up a namespace package? How could you create one before PEP 420? Complete this quick quiz to test your knowledge.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] In this quiz, you’ll practice your knowledge about Python’s namespace packages. What are they used for? How do you set up a namespace package? How could you create one before PEP 420? Complete this quick quiz to test your knowledge. [ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] August 04, 2025 12:00 PM UTC The 2025 version of the EuroPython conference took place both online and in person in July 2025. This was the third conference under our current Code of Conduct (CoC), and we had Code of Conduct working group members continuously available both online and in person.ReportsOver the course of the conference, the Code of Conduct team was made aware of the following issue:One person was uncomfortable with certain phrases being used in one of the poster sessions. The author was informed, and the phrases reported were removed by the author from their poster presentation promptly.Thank you the Code of Conduct team responded to the issue reported. The 2025 version of the EuroPython conference took place both online and in person in July 2025. This was the third conference under our current Code of Conduct (CoC), and we had Code of Conduct working group members continuously available both online and in person. Over the course of the conference, the Code of Conduct team was made aware of the following issue: Thank you the Code of Conduct team responded to the issue reported. August 04, 2025 07:00 AM UTC Code to Care â A Hands-On Tryton Technical Workshop\nWe are excited to announce âCode to Careâ, a 3-day live hands-on workshop on Tryton ERP customization, with a special focus on GNUHealth.\n\nDates: August 15â17, 2025\nMode: Online (Live Interactive Sessions)\nFee: â¹20,000 per participant\nLanguage: English\nRegister Interest: Expression of Interest â Code to Care: Tryton x GNUHealth Customisation Workshop\n\n About the Trainer\nWith over 10 years of hands-on experience with Tryton, the trainer has successfully implemented Tryton at Indiaâs largest medical institute, managing key domains such as HR, Payroll, Procurement, and clinical modules.\nWhat Youâll Explore\n\nHow to customise the existing modules of Tryton for your systemâs needs\nHow to build new modules to support or enhance your workflows and functionalities\nDeployment and maintenance best practices\nContributing to the Tryton and GNUHealth ecosystems\n\nGiving Back\nA portion of the participation fee will be donated to the:\n\nTryton Foundation\nGNUHealth Foundation\nopenSUSE Project\n\nFurther details will be shared with the interested participants over registered email address. Register your interest at Expression of Interest â Code to Care: Tryton x GNUHealth Customisation Workshop\n1 post - 1 participant\nRead full topic We are excited to announce âCode to Careâ, a 3-day live hands-on workshop on Tryton ERP customization, with a special focus on GNUHealth. With over 10 years of hands-on experience with Tryton, the trainer has successfully implemented Tryton at Indiaâs largest medical institute, managing key domains such as HR, Payroll, Procurement, and clinical modules. A portion of the participation fee will be donated to the: Further details will be shared with the interested participants over registered email address. Register your interest at Expression of Interest â Code to Care: Tryton x GNUHealth Customisation Workshop 1 post - 1 participant Read full topic August 04, 2025 06:00 AM UTC âï¸ Ãcrire (et rÃ©Ã©crire) mon livre Introduction Ã  Python 3.13\nQuand jâai commencÃ© mon parcours en tant quâindÃ©pendant, mon objectif Ã©tait limpide : donner des formations sur Python. Expliquer comment lâutiliser, comment le comprendre, le structurer, le manipuler. Bref, transmettre avec passion tout ce que jâavais appris au fil des annÃ©es.\nÃ cette Ã©poque, Python 2 Ã©tait encore bien prÃ©sent, mais Python 3 commenÃ§ait Ã  faire doucement son chemin. En 2014, on utilisait la version 3.4, et dÃ¨s 2015, la 3.5 Ã©tait disponible. Quand jâai commencÃ© mon parcours en tant quâindÃ©pendant, mon objectif Ã©tait limpide : donner des formations sur Python. Expliquer comment lâutiliser, comment le comprendre, le structurer, le manipuler. Bref, transmettre avec passion tout ce que jâavais appris au fil des annÃ©es. Ã cette Ã©poque, Python 2 Ã©tait encore bien prÃ©sent, mais Python 3 commenÃ§ait Ã  faire doucement son chemin. En 2014, on utilisait la version 3.4, et dÃ¨s 2015, la 3.5 Ã©tait disponible. August 04, 2025 12:00 AM UTC You probably know that I love Rust and TypeScript, and I’m a big proponent of\ngood typing systems.  One of the reasons I find them useful is that they enable\nautocomplete, which is generally a good feature.  Having a well-integrated type\nsystem that makes sense and gives you optimization potential for memory layouts\nis generally a good idea.\nFrom that, you’d naturally think this would also be great for agentic coding\ntools.  There’s clearly some benefit to it.  If you have an agent write\nTypeScript and the agent adds types, it performs well.  I don’t know if it\noutperforms raw JavaScript, but at the very least it doesn’t seem to do any\nharm.\nBut most agentic tools don’t have access to an LSP (language server protocol).\nMy experiments with agentic coding tools that do have LSP access (with type\ninformation available) haven’t meaningfully benefited from it.  The LSP\nprotocol slows things down and pollutes the context significantly.  Also, the\nmodels haven’t been trained sufficiently to understand how to work with this\ninformation.  Just getting a type check failure from the compiler in text\nform yields better results.\nWhat you end up with is an agent coding loop that, without type checks enabled,\nresults in the agent making forward progress by writing code and putting types\nsomewhere.  As long as this compiles to some version of JavaScript (if you use\nBun, much of it ends up type-erased), it creates working code.  And from there\nit continues.  But that’s bad progressâit’s the type of progress where it\nneeds to come back after and clean up the types.\nIt’s curious because types are obviously being written but they’re largely\nbeing ignored.  If you do put the type check into the loop, my tests actually\nshowed worse performance.  That’s because the agent manages to get the code\nrunning, and only after it’s done does it run the type check.  Only then, maybe\nat a much later point, does it realize it made type errors.  Then it starts\nfixing them, maybe goes in a loop, and wastes a ton of context.  If you make it\ndo the type checks after every single edit, you end up eating even more into the\ncontext.\nThis gets really bad when the types themselves are incredibly complicated and\nnon-obvious.  TypeScript has arcane expression functionality, and some\nlibraries go overboard with complex constructs (e.g., conditional\ntypes).\nLLMs have little clue how to read any of this.  For instance, if you give it\naccess to the .d.ts files from TanStack Router and the forward declaration\nstuff it uses for the router system to work properly, it doesn’t understand any\nof it.  It guesses, and sometimes guesses badly.  It’s utterly confused.  When\nit runs into type errors, it performs all kinds of manipulations, none of which\nare helpful.\nPython typing has an even worse problem, because there we have to work with a\nvery complicated ecosystem where different type checkers cannot even agree on\nhow type checking should work.  That means that the LLM, at least from my\ntesting, is not even fully capable of understanding how to resolve type check\nerrors from tools which are not from mypy.  It’s not universally bad, but if\nyou actually end up with a complex type checking error that you cannot resolve\nyourself, it is shocking how the LLM is also often not able to fully figure out\nwhat’s going on, or at least needs multiple attempts.\nAs a shining example of types adding a lot of value we have Go.  Go’s types are\nmuch less expressive and very structural.  Things conform to interfaces purely\nby having certain methods.  The LLM does not need to understand much to\ncomprehend that.  Also, the types that Go has are rather strictly enforced.  If\nthey are wrong, it won’t compile.  Because Go has a much simpler type system\nthat doesn’t support complicated constructs, it works much betterâboth for LLMs\nto understand the code they produce and for the LLM to understand real-world\nlibraries you might give to an LLM. \nI don’t really know what to do with this, but these behaviors suggest there’s\na lot more value in best-effort type systems or type hints like JSDoc.  Because\nat least as far as the LLM is concerned, it doesn’t need to fully understand\nthe types, it just needs to have a rough understanding of what type some object\nprobably is.  For the LLM it’s more important that the type name in the error\nmessage aligns with the type name in source.\nI think it’s an interesting question whether this behavior of LLMs today will\ninfluence future language design.  I don’t know if it will, but I think it\ngives a lot of credence to some of the decisions that led to languages like Go\nand Java.  As critical as I have been in the past about their rather simple\napproaches to problems and having a design that maybe doesn’t hold developers\nin a particularly high regard, I now think that they actually are measurably in\na very good spot.  There is more elegance to their design than I gave it\ncredit for. You probably know that I love Rust and TypeScript, and I’m a big proponent of\ngood typing systems.  One of the reasons I find them useful is that they enable\nautocomplete, which is generally a good feature.  Having a well-integrated type\nsystem that makes sense and gives you optimization potential for memory layouts\nis generally a good idea. From that, you’d naturally think this would also be great for agentic coding\ntools.  There’s clearly some benefit to it.  If you have an agent write\nTypeScript and the agent adds types, it performs well.  I don’t know if it\noutperforms raw JavaScript, but at the very least it doesn’t seem to do any\nharm. But most agentic tools don’t have access to an LSP (language server protocol).\nMy experiments with agentic coding tools that do have LSP access (with type\ninformation available) haven’t meaningfully benefited from it.  The LSP\nprotocol slows things down and pollutes the context significantly.  Also, the\nmodels haven’t been trained sufficiently to understand how to work with this\ninformation.  Just getting a type check failure from the compiler in text\nform yields better results. What you end up with is an agent coding loop that, without type checks enabled,\nresults in the agent making forward progress by writing code and putting types\nsomewhere.  As long as this compiles to some version of JavaScript (if you use\nBun, much of it ends up type-erased), it creates working code.  And from there\nit continues.  But that’s bad progressâit’s the type of progress where it\nneeds to come back after and clean up the types. It’s curious because types are obviously being written but they’re largely\nbeing ignored.  If you do put the type check into the loop, my tests actually\nshowed worse performance.  That’s because the agent manages to get the code\nrunning, and only after it’s done does it run the type check.  Only then, maybe\nat a much later point, does it realize it made type errors.  Then it starts\nfixing them, maybe goes in a loop, and wastes a ton of context.  If you make it\ndo the type checks after every single edit, you end up eating even more into the\ncontext. This gets really bad when the types themselves are incredibly complicated and\nnon-obvious.  TypeScript has arcane expression functionality, and some\nlibraries go overboard with complex constructs (e.g., conditional\ntypes).\nLLMs have little clue how to read any of this.  For instance, if you give it\naccess to the .d.ts files from TanStack Router and the forward declaration\nstuff it uses for the router system to work properly, it doesn’t understand any\nof it.  It guesses, and sometimes guesses badly.  It’s utterly confused.  When\nit runs into type errors, it performs all kinds of manipulations, none of which\nare helpful. Python typing has an even worse problem, because there we have to work with a\nvery complicated ecosystem where different type checkers cannot even agree on\nhow type checking should work.  That means that the LLM, at least from my\ntesting, is not even fully capable of understanding how to resolve type check\nerrors from tools which are not from mypy.  It’s not universally bad, but if\nyou actually end up with a complex type checking error that you cannot resolve\nyourself, it is shocking how the LLM is also often not able to fully figure out\nwhat’s going on, or at least needs multiple attempts. As a shining example of types adding a lot of value we have Go.  Go’s types are\nmuch less expressive and very structural.  Things conform to interfaces purely\nby having certain methods.  The LLM does not need to understand much to\ncomprehend that.  Also, the types that Go has are rather strictly enforced.  If\nthey are wrong, it won’t compile.  Because Go has a much simpler type system\nthat doesn’t support complicated constructs, it works much betterâboth for LLMs\nto understand the code they produce and for the LLM to understand real-world\nlibraries you might give to an LLM. I don’t really know what to do with this, but these behaviors suggest there’s\na lot more value in best-effort type systems or type hints like JSDoc.  Because\nat least as far as the LLM is concerned, it doesn’t need to fully understand\nthe types, it just needs to have a rough understanding of what type some object\nprobably is.  For the LLM it’s more important that the type name in the error\nmessage aligns with the type name in source. I think it’s an interesting question whether this behavior of LLMs today will\ninfluence future language design.  I don’t know if it will, but I think it\ngives a lot of credence to some of the decisions that led to languages like Go\nand Java.  As critical as I have been in the past about their rather simple\napproaches to problems and having a design that maybe doesn’t hold developers\nin a particularly high regard, I now think that they actually are measurably in\na very good spot.  There is more elegance to their design than I gave it\ncredit for. August 04, 2025 12:00 AM UTC In the previous post, I talked about Python's or keyword and how it doesn't behave the way you may expect it to. Here's the link to that article if you missed it: Do You Really Know How `or` And `and` Work in Python?One place you may see the or expression used is when dealing with the infamous mutable default value problem in functions–see the second section in Python Quirks? Party Tricks? Peculiarities Revealed… if you're not familiar with this Python banana skin. It seems some LLM models are keen to suggest this option, too.To keep this post brief, I'll assume you're familiar with both how or works and the mutable default value issue.Let's see how the or keyword is used to solve the mutable default value problem:All code blocks are available in text format at the end of this article • #1 • The code images used in this article are created using Snappify. [Affiliate link]I'm using this function for demonstration purposes. Note that the function mutates the list and returns it.But let's look at the part that's more relevant for this post. This function uses an empty list if no value is passed to the shopping_list parameter. Since you can't use an empty list as the default value, you use None as the default value.The or expression then does all the hard work:If you don't pass a list to the shopping_list parameter when you call add_to_shopping_list(), the function uses the None default value for shopping_list. And since None is falsy, the or expression evaluates to its second operand, the empty list [].However, if you already have a list with items in it and you pass it to the shopping_list parameter when you call add_to_shopping_list(), then this list is the one used within the function.Let's try it out to confirm this is how the function works.First, try with an existing list:#2You create a food_groceries list containing a few items. You then pass it to add_to_shopping_list(). You display output and food_groceries—these are names referring to the same list. They're not different lists. You can refresh your memory about Python's pass-by-assignment in functions here: If You Haven't Got A Clue What \"Pass By Value\" or \"Pass By Reference\" mean, read on…This is what you expect. Great.How about using the default value now:#3There's no second argument when you call add_to_shopping_list() this time. Therefore, the function creates an empty list and appends \"Washing Up Liquid\" to it.Again, this is the behaviour you expect.So, using the or expression to deal with the mutable default value in functions is cool, right?Subscribe nowNow Consider This…Have a look at this scenario:#4This scenario seems similar to the first one earlier, the one with the food_groceries. You create a list called clothing_items and you then pass it to the add_to_shopping_list() function.But now, although output shows the expected result, the list clothing_items is still empty.Here's what's happening:The list clothing_items is an empty list.You pass it to add_to_shopping_list(), so shopping_list now refers to the same list as clothing_items within the function.It's now the or expression's turn within the function, shopping_list = shopping_list or []. But the identifier (name) shopping_list now refers to the same list that clothing_items refers to. This is an empty list. Therefore, it's falsy……and since the first operand of the or expression is falsy, the expression evaluates to the second operand, which is also an empty list.But—and this is the key point—the or expression creates a new empty list rather than using the existing empty list (the one that clothing_items refers to).So, you still have an empty list within your function, but it's not the same one you're expecting.That's why output and clothing_items are different now. They're different lists. This didn't happen in your first example when you used food_groceries. In that example, output and food_groceries both referred to the same list.Support The Python Coding StackThe standard way of solving the mutable default value problem doesn't face this issue:#5This textbook approach to the mutable default value issue is less fancy, perhaps, but it works without surprises. It's also more readable, and that's important in Python!Do you want to try video courses designed and delivered in the same style as these posts? You can get a free trial at The Python Coding Place, and you also get access to a members-only forum.Try Out The Python Coding PlacePhoto by Dan Cristian Pădureț: https://www.pexels.com/photo/photo-of-multicolored-abstract-painting-1193743/Code in this article uses Python 3.13The code images used in this article are created using Snappify. [Affiliate link]You can also support this publication by making a one-off contribution of any amount you wish.Support The Python Coding StackFor more Python resources, you can also visit Real Python—you may even stumble on one of my own articles or courses there!Also, are you interested in technical writing? You’d like to make your own writing more narrative, more engaging, more memorable? Have a look at Breaking the Rules.And you can find out more about me at stephengruppetta.comFurther reading related to this article’s topic:Do You Really Know How `or` And `and` Work in Python?Python Quirks? Party Tricks? Peculiarities RevealedIf You Haven't Got A Clue What \"Pass By Value\" or \"Pass By Reference\" mean, read onAppendix: Code BlocksCode Block #1def add_to_shopping_list(item, shopping_list=None):\n    shopping_list = shopping_list or []\n    shopping_list.append(item)\n    return shopping_list\nCode Block #2food_groceries = [\"Milk\", \"Eggs\", \"Bread\"]\noutput = add_to_shopping_list(\"Chocolate\", food_groceries)\n\noutput\n# ['Milk', 'Eggs', 'Bread', 'Chocolate']\nfood_groceries\n# ['Milk', 'Eggs', 'Bread', 'Chocolate']\nCode Block #3household_items = add_to_shopping_list(\"Washing Up Liquid\")\nhousehold_items\n# ['Washing Up Liquid']\nCode Block #4clothing_items = []\noutput = add_to_shopping_list(\"Shirt\", clothing_items)\n\noutput\n# ['Shirt']\nclothing_items\n# []\nCode Block #5def add_to_shopping_list(item, shopping_list=None):\n    if shopping_list is None:\n        shopping_list = []\n    shopping_list.append(item)\n    return shopping_list\n\nclothing_items = []\noutput = add_to_shopping_list(\"Shirt\", clothing_items)\n\noutput\n# ['Shirt']\nclothing_items\n# ['Shirt']\nFor more Python resources, you can also visit Real Python—you may even stumble on one of my own articles or courses there!Also, are you interested in technical writing? You’d like to make your own writing more narrative, more engaging, more memorable? Have a look at Breaking the Rules.And you can find out more about me at stephengruppetta.com In the previous post, I talked about Python's or keyword and how it doesn't behave the way you may expect it to. Here's the link to that article if you missed it: Do You Really Know How `or` And `and` Work in Python? One place you may see the or expression used is when dealing with the infamous mutable default value problem in functions–see the second section in Python Quirks? Party Tricks? Peculiarities Revealed… if you're not familiar with this Python banana skin. It seems some LLM models are keen to suggest this option, too. To keep this post brief, I'll assume you're familiar with both how or works and the mutable default value issue. Let's see how the or keyword is used to solve the mutable default value problem: I'm using this function for demonstration purposes. Note that the function mutates the list and returns it. But let's look at the part that's more relevant for this post. This function uses an empty list if no value is passed to the shopping_list parameter. Since you can't use an empty list as the default value, you use None as the default value. The or expression then does all the hard work: If you don't pass a list to the shopping_list parameter when you call add_to_shopping_list(), the function uses the None default value for shopping_list. And since None is falsy, the or expression evaluates to its second operand, the empty list []. However, if you already have a list with items in it and you pass it to the shopping_list parameter when you call add_to_shopping_list(), then this list is the one used within the function. Let's try it out to confirm this is how the function works. First, try with an existing list: You create a food_groceries list containing a few items. You then pass it to add_to_shopping_list(). You display output and food_groceries—these are names referring to the same list. They're not different lists. You can refresh your memory about Python's pass-by-assignment in functions here: If You Haven't Got A Clue What \"Pass By Value\" or \"Pass By Reference\" mean, read on… This is what you expect. Great. How about using the default value now: There's no second argument when you call add_to_shopping_list() this time. Therefore, the function creates an empty list and appends \"Washing Up Liquid\" to it. Again, this is the behaviour you expect. So, using the or expression to deal with the mutable default value in functions is cool, right? Subscribe now Have a look at this scenario: This scenario seems similar to the first one earlier, the one with the food_groceries. You create a list called clothing_items and you then pass it to the add_to_shopping_list() function. But now, although output shows the expected result, the list clothing_items is still empty. Here's what's happening: The list clothing_items is an empty list. You pass it to add_to_shopping_list(), so shopping_list now refers to the same list as clothing_items within the function. It's now the or expression's turn within the function, shopping_list = shopping_list or []. But the identifier (name) shopping_list now refers to the same list that clothing_items refers to. This is an empty list. Therefore, it's falsy… …and since the first operand of the or expression is falsy, the expression evaluates to the second operand, which is also an empty list. But—and this is the key point—the or expression creates a new empty list rather than using the existing empty list (the one that clothing_items refers to). So, you still have an empty list within your function, but it's not the same one you're expecting. That's why output and clothing_items are different now. They're different lists. This didn't happen in your first example when you used food_groceries. In that example, output and food_groceries both referred to the same list. Support The Python Coding Stack The standard way of solving the mutable default value problem doesn't face this issue: This textbook approach to the mutable default value issue is less fancy, perhaps, but it works without surprises. It's also more readable, and that's important in Python! Do you want to try video courses designed and delivered in the same style as these posts? You can get a free trial at The Python Coding Place, and you also get access to a members-only forum. Try Out The Python Coding Place Photo by Dan Cristian Pădureț: https://www.pexels.com/photo/photo-of-multicolored-abstract-painting-1193743/ Code in this article uses Python 3.13 The code images used in this article are created using Snappify. [Affiliate link] You can also support this publication by making a one-off contribution of any amount you wish. Support The Python Coding Stack For more Python resources, you can also visit Real Python—you may even stumble on one of my own articles or courses there! Also, are you interested in technical writing? You’d like to make your own writing more narrative, more engaging, more memorable? Have a look at Breaking the Rules. And you can find out more about me at stephengruppetta.com Further reading related to this article’s topic: Do You Really Know How `or` And `and` Work in Python? Python Quirks? Party Tricks? Peculiarities Revealed If You Haven't Got A Clue What \"Pass By Value\" or \"Pass By Reference\" mean, read on For more Python resources, you can also visit Real Python—you may even stumble on one of my own articles or courses there! Also, are you interested in technical writing? You’d like to make your own writing more narrative, more engaging, more memorable? Have a look at Breaking the Rules. And you can find out more about me at stephengruppetta.com August 03, 2025 07:54 PM UTC For July 2025, we welcome Jake Howard as our DSF member of the month! â­\nJake actively shares his knowledge through blog posts and community talks. He is part of the Security Team Working Group and he created the DEP 14. He has been a DSF member since June 2024. \nYou can learn more about Jake by visiting Jake's website and his GitHub Profile.\nLetâs spend some time getting to know Jake better!\nCan you tell us a little about yourself (hobbies, education, etc)\nIâm Jake. Iâm a Senior Systems Engineer at Torchbox, where Iâve been for a little over 4 years. âSystems Engineerâ is a fairly loaded title, and means different things to different people. I like to describe it as doing everything technical to do with Software Engineering which isnât Programming (Sysadmin, Devops, IT support, Security, Networking), but also doing a fair bit of Programming.\nMost of my hobbies revolve around technology. Iâm an avid self-hoster, running applications on servers both in âthe cloudâ and in my house. Thereâs been a server of some kind in my house for the last 10 years. Iâm generally quite a private person, so I like to know whatâs happening to my data. Since I started working remotely at the start of the 2020 pandemic, Iâve channeled some of this passion into posts on my website, with posts about all manner of things Iâve done from self-hosting to general software engineering.\nAway from my desk (sort of), Iâm a volunteer for Student Robotics, inspiring college students into STEM through competitive robotics (no, not quite like Robot Wars). In school, I was always the quiet one, but now I seem completely at home with public speaking, commentary and otherwise being in front of large crowds of people. I wish I knew the secret - Iâd make millions!\nMy GitHub is also pretty active, with contributions all over the place (OpenZFS, Nebula VPN, Gitea, Plausible Analytics, OpenCV, Ansibleâ¦).\nIâm curious, where your nickname âRealOrangeOneâ comes from?\nBecause a lot of life happens online (especially in the last 5 years), many people havenât even seen pictures of me, let alone met me in person. I am not in fact a talking piece of fruit. For a while, I tried to stay anonymous, avoiding photos or videos of me on the internet. But since I discovered I enjoy public speaking, Iâve sort of given up on that (for the most part).\nBy now, Iâm sure many people have speak. But, for those who donât know: I, like my father before me, am ginger ð¥ (the hair colour, not the plant).\nThe exact specifics of how being ginger lead to âTheOrangeOneâ are sadly lost to time. Iâve owned theorangeone.net for well over a decade at this point. Unfortunately, itâs not a particularly original nickname, and I have to be fast to claim it when signing up to new services. In some places (where I wasnât fast enough) Iâm forced to sub out âTheâ for âRealâ, which has lead to some confusions, but not too many. Canonically, I prefer âTheOrangeOneâ, but as we all know, naming things is hard.\nHow did you start using Django?\nIâve been using Django since around the 1.8 release. My job at the time was at a Django development agency, so it was the first real Python framework Iâd used. The first few weeks there was my first exposure to Django, pip, package management and collaborative software engineering - it was quite a lot to learn at once. I didnât realise it at the time, but I was working working as a junior alongside a couple fairly well-known names in the Django community like Tom Christie (DRF, Starlette, HTTPX) and Jamie Matthews (django-readers, django-zen-queries). We mostly built single-page apps with React, so I learned Django and Django Rest Framework at the same time, which means I now often have to look back at the docs to remember how forms and templates work.\nAs for contributing to Django, that came much later. My first commit to Django was in May 2024. Having used Django for a while, and written plenty of packages, Iâd never stopped to look at how upstream was developed. Around the time of DEP 14 kicking off, I needed to look a bit more at the inner workings of the Django project, to learn what was in store for me. When scrolling through Trac tickets, I found an interesting looking ticket, and got to work. At the time of writing, Iâve now closed 9 Trac tickets across 12 PRs, and some pretty cool features (simple block tags, better Accept header parsing, performance improvements to the URL router) now have my name on them (metaphorically speaking).\nI wouldnât call myself an âactiveâ contributor, but I try and keep an eye on the tickets and forum threads which interest me the most, and chime in when I can.\nWhat other framework do you know and if there is anything you would like to have in Django if you had magical powers?\nSince itâs the first framework I learned, and so far has done everything I need, Iâve mostly used Django. For a few smaller services, Iâve leaned more towards Starlette and AIOHTTP, but for anything even slightly large Iâve just used Django - since Iâd end up recreating much of Django using the smaller frameworks anyway. A better (likely official) path for single-file Django (ie without some of the magic module handling) might help draw a few more people in and fill a few more of these âmicro-serviceâ style use-cases.\nIâm a class-based views person - I like the encapsulation and easy extension of base views. As with any opinion on the internet, Iâm sure many people disagree with me, but to me itâs just personal preference. Iâm still surprised itâs a pattern not seen by many other Python frameworks.\nFollowing in the footsteps of Python, I often wonder if Django could also do with some dead battery removal (or at least extracting into separate packages). Django is a pretty big framework, and whilst the contrib apps are intended to be separate, they also require hooks and assumptions in other areas of the codebase. I might be wrong (it happens quite a lot), but I suspect some of those packages would be better suited externally, perhaps improving some developer momentum - and lightening the load for the Fellows. Djangoâs sitemap and syndication (RSS) frameworks are 2 places I wish would get some more love.\nOutside of Python, Iâm a big fan of Rust (as cliche as it may be). Whilst Rust is a popular language, there isnât really a âDjangoâ like (batteries included) framework - itâs all composing the pieces you need yourself. However, that doesnât stop people being very productive with it. As a result, most of the frameworks have very generic interfaces, letting developers pass state around as needed, rather than trying to do everything themselves. Outside of the obvious static typing debate (which Iâm in favour of), Iâd love to see Django embrace some dependencies, especially if they bring some performance improvements. It may end up being a bad idea, but it might also help those who want to use Djangoâs modules outside of Django.\nMany years ago, I tried to be a polyglot - switching between different programming languages (and frameworks) to find new ways of working and match the problem to the correct solution. Now, Iâve settled mostly on Python and Rust. They fit my needs well, Iâm very productive in them, and between the 2 thereâs not much they canât handle. Given my background, and the fact most sysadmin-y tools are written in it, Iâm really not a fan of Go.\nWhat projects are you working on now?\nOver time, Iâve slowly stepped back from having big side projects - being a new dad sure takes up time and energy. Large projects ended up feeling too much like work outside of work, and I end up either getting distracted or bored. After work, I want to do something fun, not that seems like yet another job. Iâm the kind of person who gets the sudden urge to research something interesting for an evening, dive in, then not think about it again for several weeks. Itâs not the most productive way of doing things, which is why my posts are all over the place, but it doesnât feel much like work for me - I lean heavily on what interests me at any time to drive what I want to do.\nWith that said, Iâm currently in the process of rebuilding my website. Of course, both the current and new versions are built on Django, but the new build should be easier to maintain, faster, and hopefully wonât need rewriting again in just a couple years. Most of my other projects have been small tools to make my home server that bit nicer.\nProfessionally, Iâm not really a developer anymore. As a sysadmin (ish), much of my day-to-day doesnât involve much programming. I spend much more of my time deploying, monitoring and administering Django applications than I do writing them. My main project at the moment is helping port a large Java / JS deployment over to Django and Wagtail, running on Kubernetes with some very high and interesting stability and scaling requirements. Since most of my professional live has been at software agencies, Iâve tended to bounce between different projects, rather than sitting on a single one. So Iâm also supporting on a few other smaller projects as and when Iâm needed.\nWhich Django libraries are your favorite (core or 3rd party)?\ndjango-tasks, of course!\nâ¦\nOh right, a serious answerâ¦\nI have to say, one of the most underrated modules in Django is django.utils. Itâs not as glamourous as the ORM, forms or cache, but itâs a treasure trove of useful methods. I personally always like looking at the internal helper functions large frameworks use - see the problems theyâve had to solve time and time again. Whilst thereâs not the same stability guarantees, Iâve definitely been helped out on a few occasions by some undocumented functions.\nIn that theme, Iâm a fan of libraries which do one thing and do it well. I quite like small libraries which aim to solve a problem. Thereâs definitely a line before that becomes a problem (anyone remember left-pad?), but libraries which scope creep are often harder to work with than the more narrow-scoped ones, whilst the smaller ones just keep on working and making my life easier. For example, django-environ makes reading and parsing environment variables into settings really easy and clean, and django-decorator-include helps including other urlpatterns whilst wrapping them in a decorator - particularly helpful for 3rd-party packageâs URLs.\nFinally, Iâve got a real soft-spot for whitenoise (and ServeStatic for ASGI users). Djangoâs documentation deters people pretty hard from serving media and static files using Django - and rightly so in performance-critical environments. However, for most people, having to additionally maintain (and secure) nginx is more maintenance than necessary. whitenoise serves static files using Django directly, without any extra configuration, whilst also pre-compressing files for a nice performance boost. To me, itâs such a universally-useful library, Iâd love to see it it included in Django itself someday.\nIâll throw a bonus shout out for granian, a new (ish) WSGI / ASGI server written in Rust. gunicorn has a near monopoly on running Python apps in production, especially in the WSGI space, so itâs nice to see a newcomer. granian isnât always faster, but doing the HTTP handling in Rust (and using popular libraries to do it) can improve stability and throughput, without holding the GIL. Iâve not run anything in production with it yet, but Iâve been using it on personal projects for almost a year without issue.\nWhat are the top three things in Django that you like?\nContrary to what Iâve already said, I actually like Djangoâs batteries. Sure, thereâs quite a few âdeadâ ones in need of some cleaning up and TLC, but having most of what I need already installed makes me far more productive. I donât need to think about how to render my form on the page, save the results as a model, or properly handle errors - everything âjust worksâ, and works together. Sure, batteries have their downsides - it makes swapping them out rather difficult, but Iâd rather ship my feature sooner than compare the trade-offs of different ORMs. The auto-reloading in django-tasks is only around 8 lines of code thanks to django.utils.autoreload being so easy to hook in to.\nSecondly: Forms, but not for the reasons you might think. Most forms are created to take submissions from the user, validate them, then probably save them to a model. However, theyâre great as general data validation. Iâve written plenty of views with complex querystring requirements, and leaning on forms to validate them saves a lot of boilerplate code. Sure, pydantic might be a bit faster and have more features, but given Iâm already productive with django.forms, and itâs already installed and well understood by other developers in my team, I donât feel the need to reach for something else.\nFinally, I wouldnât say itâs quite a âfavouriteâ, and itâs well-known as being far-from-perfect, but Iâve got a real soft-spot for the Django Admin. It lets me focus on building the core of an application, rather than the internal interface - particularly when there are no strong requirements for it, or itâs only going to be used by me and a few others. Since itâs a fair raw view of the database by default, Iâve definitely been bitten by some less-than-restrictive permissions, but thereâs generally all the hooks I need. I donât like building frontends, so only needing to build 1 rather than 2 makes me a lot happier, especially if it comes with authentication, permissions, read-only views and a dark mode ð!\nHow did you join the security team?\nIâd love to say itâs an interesting story, stroking my ego that I saved the day. But the reality is, as usual, far less glamorous.\nAs an engineer, Iâve tended towards 2 specialties: Security and Performance, which usually go hand-in-hand. In early 2023, I was invited to join the Wagtail CMS Security team after reporting and subsequently helping fix a memory exhaustion issue. I was already involved in all things security at Torchbox, especially our ISO-27001 certification, so I was already known when I submitted a vulnerability report.\nThibaud mentioned to me late last year that the project potentially looking for new members of the security team, to help with resourcing and some potential process improvements within the foundation. I naturally jumped at the opportunity - since the team is generally closed to new members and âfully-staffedâ. After a few gentle reminders (heâs a busy guy), I received a message from Sarah formally inviting me in March.\nSince then, Iâve tried to review every report which came through, and helped author a few patches. A few reports even had to be raised upstream with Pythonâs Security Response Team (PSRT). Itâs been an interesting experience, and Iâm looking forward to seeing how the team developers over the coming years.\nIâm aware that you have created DEP 14 on the Background Workers, how the work is going so far? Do you need support from the community on anything?\nDEP 14 (the proposal to add a native background workers API to Django) has been a really interesting journey. Iâm beyond humbled to see the community interest behind it. When I started down this road, Iâd only intended to start the conversations and help rally the community interest. Since then, and 6000 lines of code later, Iâm mostly single-handedly writing a database-backed production-grade task system.\nRight now, weâre at a bit of a cross-roads. Many of the foundational parts work, relatively well. The difficulty comes with the more complex features: Retries, dependencies, robust execution. Building a task system is easy - building a reliable one people want to actually use is incredibly difficult. If anyone out there is interested in getting involved, please do! Report issues, fix bugs, contribute to design discussions. Most of the APIs are based on what I think looks sensible. Software this large, pivotal and complex canât be built in isolation - so it needs a diverse audience to ensure we (I) make the right decisions, and design an API people actually want to use that will last and scale for years to come.\nThe next challenge on my list to tackle is timeouts - a highly requested feature. It sounds simple, but the reality is far from it. Many of those challenges sparked the topic of my upcoming PyCon UK talk later this year.\nDjango is celebrating its 20th anniversary this month. Any nice story to share?\nMy personal highlight was DjangoCon Europe 2024 - my first DjangoCon. I ended up bringing the stereotypically grey British weather with me, but I had a great week chatting Django with some interesting people, and putting faces to the names and handles Iâd seen online. After the talk announcing DEP 14 and background tasks, I was inundated with people voicing their support - many wondering how itâd taken this long.\nBut personally, Iâm more interested in whatâs to come. Of course, thereâs django-tasks, but the next sets of releases are shaping up to be pretty interesting. Over the last 3-4 years or so, Iâve personally noticed a bit of a resurgence in peopleâs appetites for change in Django. The 6.x Steering Council have a lot of interesting ideas, and clearly the community agree. People are happy with what Django can do now, but want to bring it a little more up-to-date - and are happy to put in the work to do it. Only a few weeks ago, django-csp was included in core, making it easier to make more secure applications. Iâm sure thatâs just the start. The fact people are still keen on working on a framework which just celebrated 20 years shows it must be doing something right!\nIs there anything else youâd like to say?\nIâd like to thank whoever nominated me to be a DSF member in the first place. To this date, I have no idea who you are.\nBeyond that, Iâm just looking forward to seeing what comes of Django, and Python in general over the next few years.\n\nThank you for doing the interview, Jake ! For July 2025, we welcome Jake Howard as our DSF member of the month! â­ Jake actively shares his knowledge through blog posts and community talks. He is part of the Security Team Working Group and he created the DEP 14. He has been a DSF member since June 2024. \nYou can learn more about Jake by visiting Jake's website and his GitHub Profile. Letâs spend some time getting to know Jake better! Iâm Jake. Iâm a Senior Systems Engineer at Torchbox, where Iâve been for a little over 4 years. âSystems Engineerâ is a fairly loaded title, and means different things to different people. I like to describe it as doing everything technical to do with Software Engineering which isnât Programming (Sysadmin, Devops, IT support, Security, Networking), but also doing a fair bit of Programming. Most of my hobbies revolve around technology. Iâm an avid self-hoster, running applications on servers both in âthe cloudâ and in my house. Thereâs been a server of some kind in my house for the last 10 years. Iâm generally quite a private person, so I like to know whatâs happening to my data. Since I started working remotely at the start of the 2020 pandemic, Iâve channeled some of this passion into posts on my website, with posts about all manner of things Iâve done from self-hosting to general software engineering. Away from my desk (sort of), Iâm a volunteer for Student Robotics, inspiring college students into STEM through competitive robotics (no, not quite like Robot Wars). In school, I was always the quiet one, but now I seem completely at home with public speaking, commentary and otherwise being in front of large crowds of people. I wish I knew the secret - Iâd make millions! My GitHub is also pretty active, with contributions all over the place (OpenZFS, Nebula VPN, Gitea, Plausible Analytics, OpenCV, Ansibleâ¦). Because a lot of life happens online (especially in the last 5 years), many people havenât even seen pictures of me, let alone met me in person. I am not in fact a talking piece of fruit. For a while, I tried to stay anonymous, avoiding photos or videos of me on the internet. But since I discovered I enjoy public speaking, Iâve sort of given up on that (for the most part). By now, Iâm sure many people have speak. But, for those who donât know: I, like my father before me, am ginger ð¥ (the hair colour, not the plant). The exact specifics of how being ginger lead to âTheOrangeOneâ are sadly lost to time. Iâve owned theorangeone.net for well over a decade at this point. Unfortunately, itâs not a particularly original nickname, and I have to be fast to claim it when signing up to new services. In some places (where I wasnât fast enough) Iâm forced to sub out âTheâ for âRealâ, which has lead to some confusions, but not too many. Canonically, I prefer âTheOrangeOneâ, but as we all know, naming things is hard. Iâve been using Django since around the 1.8 release. My job at the time was at a Django development agency, so it was the first real Python framework Iâd used. The first few weeks there was my first exposure to Django, pip, package management and collaborative software engineering - it was quite a lot to learn at once. I didnât realise it at the time, but I was working working as a junior alongside a couple fairly well-known names in the Django community like Tom Christie (DRF, Starlette, HTTPX) and Jamie Matthews (django-readers, django-zen-queries). We mostly built single-page apps with React, so I learned Django and Django Rest Framework at the same time, which means I now often have to look back at the docs to remember how forms and templates work. As for contributing to Django, that came much later. My first commit to Django was in May 2024. Having used Django for a while, and written plenty of packages, Iâd never stopped to look at how upstream was developed. Around the time of DEP 14 kicking off, I needed to look a bit more at the inner workings of the Django project, to learn what was in store for me. When scrolling through Trac tickets, I found an interesting looking ticket, and got to work. At the time of writing, Iâve now closed 9 Trac tickets across 12 PRs, and some pretty cool features (simple block tags, better Accept header parsing, performance improvements to the URL router) now have my name on them (metaphorically speaking). I wouldnât call myself an âactiveâ contributor, but I try and keep an eye on the tickets and forum threads which interest me the most, and chime in when I can. Since itâs the first framework I learned, and so far has done everything I need, Iâve mostly used Django. For a few smaller services, Iâve leaned more towards Starlette and AIOHTTP, but for anything even slightly large Iâve just used Django - since Iâd end up recreating much of Django using the smaller frameworks anyway. A better (likely official) path for single-file Django (ie without some of the magic module handling) might help draw a few more people in and fill a few more of these âmicro-serviceâ style use-cases. Iâm a class-based views person - I like the encapsulation and easy extension of base views. As with any opinion on the internet, Iâm sure many people disagree with me, but to me itâs just personal preference. Iâm still surprised itâs a pattern not seen by many other Python frameworks. Following in the footsteps of Python, I often wonder if Django could also do with some dead battery removal (or at least extracting into separate packages). Django is a pretty big framework, and whilst the contrib apps are intended to be separate, they also require hooks and assumptions in other areas of the codebase. I might be wrong (it happens quite a lot), but I suspect some of those packages would be better suited externally, perhaps improving some developer momentum - and lightening the load for the Fellows. Djangoâs sitemap and syndication (RSS) frameworks are 2 places I wish would get some more love. Outside of Python, Iâm a big fan of Rust (as cliche as it may be). Whilst Rust is a popular language, there isnât really a âDjangoâ like (batteries included) framework - itâs all composing the pieces you need yourself. However, that doesnât stop people being very productive with it. As a result, most of the frameworks have very generic interfaces, letting developers pass state around as needed, rather than trying to do everything themselves. Outside of the obvious static typing debate (which Iâm in favour of), Iâd love to see Django embrace some dependencies, especially if they bring some performance improvements. It may end up being a bad idea, but it might also help those who want to use Djangoâs modules outside of Django. Many years ago, I tried to be a polyglot - switching between different programming languages (and frameworks) to find new ways of working and match the problem to the correct solution. Now, Iâve settled mostly on Python and Rust. They fit my needs well, Iâm very productive in them, and between the 2 thereâs not much they canât handle. Given my background, and the fact most sysadmin-y tools are written in it, Iâm really not a fan of Go. Over time, Iâve slowly stepped back from having big side projects - being a new dad sure takes up time and energy. Large projects ended up feeling too much like work outside of work, and I end up either getting distracted or bored. After work, I want to do something fun, not that seems like yet another job. Iâm the kind of person who gets the sudden urge to research something interesting for an evening, dive in, then not think about it again for several weeks. Itâs not the most productive way of doing things, which is why my posts are all over the place, but it doesnât feel much like work for me - I lean heavily on what interests me at any time to drive what I want to do. With that said, Iâm currently in the process of rebuilding my website. Of course, both the current and new versions are built on Django, but the new build should be easier to maintain, faster, and hopefully wonât need rewriting again in just a couple years. Most of my other projects have been small tools to make my home server that bit nicer. Professionally, Iâm not really a developer anymore. As a sysadmin (ish), much of my day-to-day doesnât involve much programming. I spend much more of my time deploying, monitoring and administering Django applications than I do writing them. My main project at the moment is helping port a large Java / JS deployment over to Django and Wagtail, running on Kubernetes with some very high and interesting stability and scaling requirements. Since most of my professional live has been at software agencies, Iâve tended to bounce between different projects, rather than sitting on a single one. So Iâm also supporting on a few other smaller projects as and when Iâm needed. django-tasks, of course! â¦ Oh right, a serious answerâ¦ I have to say, one of the most underrated modules in Django is django.utils. Itâs not as glamourous as the ORM, forms or cache, but itâs a treasure trove of useful methods. I personally always like looking at the internal helper functions large frameworks use - see the problems theyâve had to solve time and time again. Whilst thereâs not the same stability guarantees, Iâve definitely been helped out on a few occasions by some undocumented functions. In that theme, Iâm a fan of libraries which do one thing and do it well. I quite like small libraries which aim to solve a problem. Thereâs definitely a line before that becomes a problem (anyone remember left-pad?), but libraries which scope creep are often harder to work with than the more narrow-scoped ones, whilst the smaller ones just keep on working and making my life easier. For example, django-environ makes reading and parsing environment variables into settings really easy and clean, and django-decorator-include helps including other urlpatterns whilst wrapping them in a decorator - particularly helpful for 3rd-party packageâs URLs. Finally, Iâve got a real soft-spot for whitenoise (and ServeStatic for ASGI users). Djangoâs documentation deters people pretty hard from serving media and static files using Django - and rightly so in performance-critical environments. However, for most people, having to additionally maintain (and secure) nginx is more maintenance than necessary. whitenoise serves static files using Django directly, without any extra configuration, whilst also pre-compressing files for a nice performance boost. To me, itâs such a universally-useful library, Iâd love to see it it included in Django itself someday. Iâll throw a bonus shout out for granian, a new (ish) WSGI / ASGI server written in Rust. gunicorn has a near monopoly on running Python apps in production, especially in the WSGI space, so itâs nice to see a newcomer. granian isnât always faster, but doing the HTTP handling in Rust (and using popular libraries to do it) can improve stability and throughput, without holding the GIL. Iâve not run anything in production with it yet, but Iâve been using it on personal projects for almost a year without issue. Contrary to what Iâve already said, I actually like Djangoâs batteries. Sure, thereâs quite a few âdeadâ ones in need of some cleaning up and TLC, but having most of what I need already installed makes me far more productive. I donât need to think about how to render my form on the page, save the results as a model, or properly handle errors - everything âjust worksâ, and works together. Sure, batteries have their downsides - it makes swapping them out rather difficult, but Iâd rather ship my feature sooner than compare the trade-offs of different ORMs. The auto-reloading in django-tasks is only around 8 lines of code thanks to django.utils.autoreload being so easy to hook in to. Secondly: Forms, but not for the reasons you might think. Most forms are created to take submissions from the user, validate them, then probably save them to a model. However, theyâre great as general data validation. Iâve written plenty of views with complex querystring requirements, and leaning on forms to validate them saves a lot of boilerplate code. Sure, pydantic might be a bit faster and have more features, but given Iâm already productive with django.forms, and itâs already installed and well understood by other developers in my team, I donât feel the need to reach for something else. Finally, I wouldnât say itâs quite a âfavouriteâ, and itâs well-known as being far-from-perfect, but Iâve got a real soft-spot for the Django Admin. It lets me focus on building the core of an application, rather than the internal interface - particularly when there are no strong requirements for it, or itâs only going to be used by me and a few others. Since itâs a fair raw view of the database by default, Iâve definitely been bitten by some less-than-restrictive permissions, but thereâs generally all the hooks I need. I donât like building frontends, so only needing to build 1 rather than 2 makes me a lot happier, especially if it comes with authentication, permissions, read-only views and a dark mode ð! Iâd love to say itâs an interesting story, stroking my ego that I saved the day. But the reality is, as usual, far less glamorous. As an engineer, Iâve tended towards 2 specialties: Security and Performance, which usually go hand-in-hand. In early 2023, I was invited to join the Wagtail CMS Security team after reporting and subsequently helping fix a memory exhaustion issue. I was already involved in all things security at Torchbox, especially our ISO-27001 certification, so I was already known when I submitted a vulnerability report. Thibaud mentioned to me late last year that the project potentially looking for new members of the security team, to help with resourcing and some potential process improvements within the foundation. I naturally jumped at the opportunity - since the team is generally closed to new members and âfully-staffedâ. After a few gentle reminders (heâs a busy guy), I received a message from Sarah formally inviting me in March. Since then, Iâve tried to review every report which came through, and helped author a few patches. A few reports even had to be raised upstream with Pythonâs Security Response Team (PSRT). Itâs been an interesting experience, and Iâm looking forward to seeing how the team developers over the coming years. DEP 14 (the proposal to add a native background workers API to Django) has been a really interesting journey. Iâm beyond humbled to see the community interest behind it. When I started down this road, Iâd only intended to start the conversations and help rally the community interest. Since then, and 6000 lines of code later, Iâm mostly single-handedly writing a database-backed production-grade task system. Right now, weâre at a bit of a cross-roads. Many of the foundational parts work, relatively well. The difficulty comes with the more complex features: Retries, dependencies, robust execution. Building a task system is easy - building a reliable one people want to actually use is incredibly difficult. If anyone out there is interested in getting involved, please do! Report issues, fix bugs, contribute to design discussions. Most of the APIs are based on what I think looks sensible. Software this large, pivotal and complex canât be built in isolation - so it needs a diverse audience to ensure we (I) make the right decisions, and design an API people actually want to use that will last and scale for years to come. The next challenge on my list to tackle is timeouts - a highly requested feature. It sounds simple, but the reality is far from it. Many of those challenges sparked the topic of my upcoming PyCon UK talk later this year. My personal highlight was DjangoCon Europe 2024 - my first DjangoCon. I ended up bringing the stereotypically grey British weather with me, but I had a great week chatting Django with some interesting people, and putting faces to the names and handles Iâd seen online. After the talk announcing DEP 14 and background tasks, I was inundated with people voicing their support - many wondering how itâd taken this long. But personally, Iâm more interested in whatâs to come. Of course, thereâs django-tasks, but the next sets of releases are shaping up to be pretty interesting. Over the last 3-4 years or so, Iâve personally noticed a bit of a resurgence in peopleâs appetites for change in Django. The 6.x Steering Council have a lot of interesting ideas, and clearly the community agree. People are happy with what Django can do now, but want to bring it a little more up-to-date - and are happy to put in the work to do it. Only a few weeks ago, django-csp was included in core, making it easier to make more secure applications. Iâm sure thatâs just the start. The fact people are still keen on working on a framework which just celebrated 20 years shows it must be doing something right! Iâd like to thank whoever nominated me to be a DSF member in the first place. To this date, I have no idea who you are. Beyond that, Iâm just looking forward to seeing what comes of Django, and Python in general over the next few years. Thank you for doing the interview, Jake ! August 03, 2025 01:20 PM UTC Do the design patterns learned in other programming languages translate to coding in Python? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.\n\n[ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] Do the design patterns learned in other programming languages translate to coding in Python? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects. [ Improve Your Python With ð Python Tricks ð â Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] August 01, 2025 12:00 PM UTC 68th issue of Andrei Neagoie's must-read monthly Python Newsletter: Useless Design Patterns, Django turns 20, 330Ã faster Python, and much more. Read the full newsletter to get up-to-date with everything you need to know from last month. August 01, 2025 10:00 AM UTC Wing Python IDE version 11.0.3 has been released.  It improves Python code analysis,\nfixes problems debugging Django templates, fixes refactoring when the target file\nis in a hidden directory, and makes a number of other minor improvements.\nDownloads\nBe sure to Check for Updates in Wing's Help menu after downloading, to make\nsure that you have the latest hot fixes.\nWing Pro 11.0.3\nWing Personal 11.0.3\nWing 101 11.0.3\nWing 10 and earlier versions are not affected by installation of Wing 11 and\nmay be installed and used independently. However, project files for Wing 10\nand earlier are converted when opened by Wing 11 and should be saved under a\nnew name, since Wing 11 projects cannot be opened by older versions of Wing.\n New in Wing 11Improved AI Assisted DevelopmentWing 11 improves the user interface for AI assisted development by introducing two separate\ntools AI Coder and AI Chat. AI Coder can be used to write, redesign, or extend code\nin the current editor. AI Chat can be used to ask about code or iterate in creating a\ndesign or new code without directly modifying the code in an editor.\nWing 11's AI assisted development features now support not just OpenAI but also Claude, Grok,\nGemini, Perplexity, Mistral, Deepseek, and any other OpenAI completions API compatible AI provider.\nThis release also improves setting up AI request context, so that both automatically and\nmanually selected and described context items may be paired with an AI request. AI request\ncontexts can now be stored, optionally so they are shared by all projects, and may be used\nindependently with different AI features.\nAI requests can now also be stored in the current project or shared with all projects, and Wing\ncomes preconfigured with a set of commonly used requests. In addition to changing code in the\ncurrent editor, stored requests may create a new untitled file or run instead in AI Chat. Wing\n11 also introduces options for changing code within an editor, including replacing code,\ncommenting out code, or starting a diff/merge session to either accept or reject changes.\nWing 11 also supports using AI to generate commit messages based on the changes being committed\nto a revision control system.\nYou can now also configure multiple AI providers for easier access to different models.\nFor details see AI Assisted Development under Wing Manual in Wing 11's Help menu.\nPackage Management with uv Wing Pro 11 adds support for the uv package manager in the New Project dialog and the\nPackages tool.\nFor details see Project Manager > Creating Projects > Creating Python Environments and Package\nManager > Package Management with uv under Wing Manual in Wing 11's Help menu.\nImproved Python Code AnalysisWing 11 makes substantial improvements to Python code analysis, with better support for\nliterals such as dicts and sets, parametrized type aliases, typing.Self, type of\nvariables on the def or class line that declares them, generic classes with\n[...], __all__ in *.pyi files, subscripts in typing.Type and similar, type\naliases, type hints in strings, type[...] and tuple[...],\n@functools.cached_property, base classes found also in .pyi files, and\ntyping.Literal[...].\nUpdated LocalizationsWing 11 updates the German, French, and Russian localizations, and introduces a new experimental\nAI-generated Spanish localization. The Spanish localization and the new AI-generated strings in the\nFrench and Russian localizations may be accessed with the new User Interface > Include AI\nTranslated Strings preference.\nImproved diff/mergeWing Pro 11 adds floating buttons directly between the editors to make navigating differences\nand merging easier, allows undoing previously merged changes, and does a better job managing\nscratch buffers, scroll locking, and sizing of merged ranges.\nFor details see Difference and Merge under Wing Manual in Wing 11's Help menu.\nOther Minor Features and ImprovementsWing 11 also improves the custom key binding assignment user interface, adds a Files >\nAuto-Save Files When Wing Loses Focus preference, warns immediately when opening a project with\nan invalid Python Executable configuration, allows clearing recent menus, expands the set of\navailable special environment variables for project configuration, and makes a number of other\nbug fixes and usability improvements.\nChanges and IncompatibilitiesSince Wing 11 replaced the AI tool with AI Coder and AI Chat, and AI\nconfiguration is completely different than in Wing 10, you will need to reconfigure your\nAI integration manually in Wing 11. This is done with Manage AI Providers in the\nAI menu. After adding the first provider configuration, Wing will set that provider as\nthe default. You can switch between providers with Switch to Provider in the AI menu.\nIf you have questions, please don't hesitate to contact us at support@wingware.com. Wing Python IDE version 11.0.3 has been released.  It improves Python code analysis,\nfixes problems debugging Django templates, fixes refactoring when the target file\nis in a hidden directory, and makes a number of other minor improvements. Wing Pro 11.0.3 Wing Personal 11.0.3 Wing 101 11.0.3 Wing 10 and earlier versions are not affected by installation of Wing 11 and\nmay be installed and used independently. However, project files for Wing 10\nand earlier are converted when opened by Wing 11 and should be saved under a\nnew name, since Wing 11 projects cannot be opened by older versions of Wing. Wing 11 improves the user interface for AI assisted development by introducing two separate\ntools AI Coder and AI Chat. AI Coder can be used to write, redesign, or extend code\nin the current editor. AI Chat can be used to ask about code or iterate in creating a\ndesign or new code without directly modifying the code in an editor. Wing 11's AI assisted development features now support not just OpenAI but also Claude, Grok,\nGemini, Perplexity, Mistral, Deepseek, and any other OpenAI completions API compatible AI provider. This release also improves setting up AI request context, so that both automatically and\nmanually selected and described context items may be paired with an AI request. AI request\ncontexts can now be stored, optionally so they are shared by all projects, and may be used\nindependently with different AI features. AI requests can now also be stored in the current project or shared with all projects, and Wing\ncomes preconfigured with a set of commonly used requests. In addition to changing code in the\ncurrent editor, stored requests may create a new untitled file or run instead in AI Chat. Wing\n11 also introduces options for changing code within an editor, including replacing code,\ncommenting out code, or starting a diff/merge session to either accept or reject changes. Wing 11 also supports using AI to generate commit messages based on the changes being committed\nto a revision control system. You can now also configure multiple AI providers for easier access to different models. For details see AI Assisted Development under Wing Manual in Wing 11's Help menu. Wing Pro 11 adds support for the uv package manager in the New Project dialog and the\nPackages tool. For details see Project Manager > Creating Projects > Creating Python Environments and Package\nManager > Package Management with uv under Wing Manual in Wing 11's Help menu. Wing 11 makes substantial improvements to Python code analysis, with better support for\nliterals such as dicts and sets, parametrized type aliases, typing.Self, type of\nvariables on the def or class line that declares them, generic classes with\n[...], __all__ in *.pyi files, subscripts in typing.Type and similar, type\naliases, type hints in strings, type[...] and tuple[...],\n@functools.cached_property, base classes found also in .pyi files, and\ntyping.Literal[...]. Wing 11 updates the German, French, and Russian localizations, and introduces a new experimental\nAI-generated Spanish localization. The Spanish localization and the new AI-generated strings in the\nFrench and Russian localizations may be accessed with the new User Interface > Include AI\nTranslated Strings preference. Wing Pro 11 adds floating buttons directly between the editors to make navigating differences\nand merging easier, allows undoing previously merged changes, and does a better job managing\nscratch buffers, scroll locking, and sizing of merged ranges. For details see Difference and Merge under Wing Manual in Wing 11's Help menu. Wing 11 also improves the custom key binding assignment user interface, adds a Files >\nAuto-Save Files When Wing Loses Focus preference, warns immediately when opening a project with\nan invalid Python Executable configuration, allows clearing recent menus, expands the set of\navailable special environment variables for project configuration, and makes a number of other\nbug fixes and usability improvements. Since Wing 11 replaced the AI tool with AI Coder and AI Chat, and AI\nconfiguration is completely different than in Wing 10, you will need to reconfigure your\nAI integration manually in Wing 11. This is done with Manage AI Providers in the\nAI menu. After adding the first provider configuration, Wing will set that provider as\nthe default. You can switch between providers with Switch to Provider in the AI menu. If you have questions, please don't hesitate to contact us at support@wingware.com. August 01, 2025 01:00 AM UTC In this stream, I worked on a personal AI workflow that I’m building using LangGraph. I discussed human-in-the-loop and how to bring a person into the workflow process. August 01, 2025 12:00 AM UTC August 01, 2025 12:00 AM UTC SHell WIth Me combines magic-wormhole and tty-share for e2ee, p2p terminal sharing August 01, 2025 12:00 AM UTC Functions in Python can be defined within another function.\n\n\n\nTable of contents\n\nA function defined within a function\nA function returned from another function\nThe enclosing scope\nClosures with nested functions\nWhy nest functions within functions?\nDecorators involve nested functions\nNested functions are possible in Python\n\n\n\n\nA function defined within a function\nPython's functions can be defined pretty much anywhere.\nYou can even define a function inside a function:\ndef greet_me(name=\"friend\"):\n    def greet():\n        print(\"Hello\", name)\n    greet()\n\nWhen we call this greet_me function, it defines a greet a function and then calls that function:\n>>> greet_me()\nHello friend\n\nNote that the inner function is allowed to use the name from the outer function.\nA function returned from another function\nInstead of calling our inner â¦\n\nRead the full article: https://www.pythonmorsels.com/nested-functions/ Functions in Python can be defined within another function. Table of contents\n\nA function defined within a function\nA function returned from another function\nThe enclosing scope\nClosures with nested functions\nWhy nest functions within functions?\nDecorators involve nested functions\nNested functions are possible in Python Python's functions can be defined pretty much anywhere. You can even define a function inside a function: When we call this greet_me function, it defines a greet a function and then calls that function: Note that the inner function is allowed to use the name from the outer function. Instead of calling our inner â¦ July 31, 2025 03:30 PM UTC Hello Django ð Universe!\nð°ï¸â This is Djangonaut Space phoning home about Session 5! We're recruiting technical mentors (Navigators) to join our next ðstellarð mission.\nð©âð We are looking for people who regularly contribute to Django or a Django related package, that want to mentor others. Our next session will be Oct-Nov.\nð Come join us and be a cosmic contributor! Express your interest to be a mentor here.\nð Want to learn more about what it means to be a Navigator:\n\nHere's a high-level overview of the role\nHere's the workbook each Navigator is provided\n\nð¤ Interested people will have to complete a 30 minute meet & greet type interview with organizers.\nâ If you're interested in applying to be a Djangonaut, applications will open and close in September (dates to be determined). The latest information will be posted on our site, djangonaut.space. Please follow our social media accounts or subscribe to our newsletter for announcements.\nâï¸ We'll see you around the cosmos!\nDjangonaut Space session organizers Hello Django ð Universe! ð°ï¸â This is Djangonaut Space phoning home about Session 5! We're recruiting technical mentors (Navigators) to join our next ðstellarð mission. ð©âð We are looking for people who regularly contribute to Django or a Django related package, that want to mentor others. Our next session will be Oct-Nov. ð Come join us and be a cosmic contributor! Express your interest to be a mentor here. ð Want to learn more about what it means to be a Navigator: ð¤ Interested people will have to complete a 30 minute meet & greet type interview with organizers. â If you're interested in applying to be a Djangonaut, applications will open and close in September (dates to be determined). The latest information will be posted on our site, djangonaut.space. Please follow our social media accounts or subscribe to our newsletter for announcements. âï¸ We'll see you around the cosmos! Djangonaut Space session organizers July 31, 2025 02:34 PM UTC The Bazel Plugin for IntelliJ IDEA Is Now Generally Available!\nAfter much anticipation, we are finally ready to announce the general availability (GA) of the new Bazel plugin for IntelliJ IDEA, PyCharm, and GoLand â now developed by JetBrains! After months of focused development and valuable feedback from our EAP users, we’re officially launching our revamped Bazel experience.\nWhile we’ve been shipping updates regularly, the leap to our 2025.2 GA release marks a major milestone. Even though our primary focus for this release was on creating the best experience we can for Java, Kotlin, and Scala developers, we also brought support for the Python and Go ecosystems, and we will continue to maintain and improve it in the coming releases.\nIf you’re migrating from the previous plugin originally released by Google, you’ll notice a more straightforward workflow that aligns with the standard JetBrains IDE experience you expect from other build tool integrations such as Maven and Gradle. Now, let’s dive into what’s new!\nKey features in 2025.2\n\nBazel Query in Action\n\nGo is a go. We’re officially rolling out support for Go. You can now import your Go targets in Bazel projects into both IntelliJ IDEA (with the Go plugin) and GoLand. This brings the full IDE experience you rely on: code highlighting, completion, navigation, and the ability to run, debug, and get coverage for your tests.\nBuilt-in Bazel Query tool window: Go beyond sync and build with Bazel queries integrated directly into your IDE via their own dedicated tool window. Craft your queries with syntax completion and a helpful UI for flags to explore your project’s dependency graph without ever leaving the editor.\nDramatically faster indexing: We’ve optimized indexing to get you to your code faster. You can now use the import_depth and import_ijars settings in your .bazelproject file to prevent the indexing of deep transitive dependencies and index only header jars instead of full jars. Whatâs more, only the files directly referenced in your .bazelproject view are fully indexed for code intelligence, which can slash indexing times and memory usage in large projects with many auxiliary files.\n\nNew plugin, new user experience\nBack in December, we publicly announced the EAP (Early Access Program) version of our new plugin and defined what it would take to release it into GA, with an overview of the main differences between the original plugin and the new one.\nHereâs a quick recap for those moving from the older plugin: We’ve smoothed out the rough edges to make Bazel feel like a natural part of the IDE.\n\nSimplified project import: The old import wizard is a thing of the past. Now, simply open a directory containing your MODULE.bazel or WORKSPACE file. For more control, you can open a specific .bazelproject view file. If you manage a large monorepo, you can provide a default template for your team by checking in a template at tools/intellij/.managed.bazelproject.\nRedesigned UI elements: The Bazel tool window is now your central hub for actions like resyncing your project (with a Build and Resync option for generating sources) and keeping track of targets in your working set. We’ve also added a widget listing all targets the currently opened file belongs to. It allows you to run actions on these targets (build / test / jump to BUILD file / copy target label)\nReworked target mapping for JVM projects: A core improvement is the new internal representation for JVM targets, which mirrors the actual Bazel graph. This fundamental change enables more accurate highlighting, more accurate completions and more reliable refactoring.\n\nImprovements since 2025.1\nWindows compatibility\nWe understand that development doesn’t just happen on one OS. Thatâs why we worked on making our plugin compatible with Microsoft Windows, bringing most of the feature set to our Windows-based users.\nEnhanced Bazel configuration support\nWe believe editing your build files should be as easy as editing your source code, which is why we’ve improved the user experience for all Bazel-related configuration files.\nStarlark (.bzl, BUILD)\n\nStarlark Quick Documentation\n\nQuick documentation for Starlark rules: Hover over a Starlark rule or function to see its documentation directly in the editor. You’ll also get documentation as you type, guiding you through available parameters.\nAutomatic formatting: If you have buildifier on your PATH, the plugin will now automatically format your Starlark files on save\n\nBazel module configuration file (MODULE.bazel)\n\nIntelligent editing: The MODULE.bazel editor now offers smart completions for arguments and displays documentation as you edit.\n\nBazel project view file (.bazelproject) \n\n.bazelproject view highlighting and completions\n\nGuided editing: Get completions for section names and known values. The editor will now highlight completely unsupported sections as errors and sections that are supported in the old plugin originally by Google (but not in the new one) as warnings.\nManage directories from the Project view file tree: You can now right-click a directory in the project tree to add or remove it from your .bazelproject file, thus loading or unloading that directory in IntelliJ.\n\nBazelisk configuration file (.bazelversion):\n\nStay up to date: The editor will now highlight outdated Bazel versions specified in your .bazelversion file and offer a quick-fix to update to the latest release.\n\nLanguage ecosystem enhancements\n\nJVM:\n\nThe underlying project model mapping has been further improved, resulting in better performance during sync and more reliable refactorings for targets where glob patterns match the whole directory.\n\n\nScala:\n\nThe Bazel plugin now respects the scalacopts parameter in your scala_* targets, which unlocks Scala 3 highlighting features with the -Xsource:3 flag. At the same time, we’ve updated the Scala plugin to provide native integration with the Bazel plugin out of the box.\n\n\nPython:\n\nRun from the gutter: py_test and py_binary targets now get the familiar green Run arrow in the editor gutter.\nImproved dependency resolution: Python dependencies are now resolved correctly, enabling code navigation and eliminating false error highlighting.\nInterpreter from MODULE.bazel: The plugin now sets the Python interpreter based on what is defined in MODULE.bazel. This includes support for hermetic toolchains downloaded by rules_python â meaning you don’t need to have Python installed locally on your machine.\nDebugging: You can now attach the debugger to py_test targets.\n\n\n\nWhat happens to the Bazel plugin by Google?\nThe Bazel for IntelliJ plugin (also known as IJwB) by Google is being deprecated. Google has transferred the code ownership and maintenance to JetBrains. We will keep providing compatibility updates for new IntelliJ versions and critical fixes only throughout the year of 2025, but will be fully deprecating it in 2026. All our development effort for IntelliJ IDEA, GoLand, and PyCharm is now focused on the new plugin.\nThe Bazel for CLion plugin (CLwB) has also been transferred to JetBrains, and will continue to be actively developed. Learn more in the post Enhancing Bazel Support for CLion on the CLion Blog.\nGot feedback? Weâre listening!\nWe’re committed to making this the best Bazel experience possible. Please report any issues, ideas, or improvements straight to our issue tracker.\nFixed the problem yourself? We accept PRs on our hirschgarten repository.\nYou’ll also find us on the Bazel Community Slack, in the #intellij channel.\nHappy building! After much anticipation, we are finally ready to announce the general availability (GA) of the new Bazel plugin for IntelliJ IDEA, PyCharm, and GoLand â now developed by JetBrains! After months of focused development and valuable feedback from our EAP users, we’re officially launching our revamped Bazel experience. While we’ve been shipping updates regularly, the leap to our 2025.2 GA release marks a major milestone. Even though our primary focus for this release was on creating the best experience we can for Java, Kotlin, and Scala developers, we also brought support for the Python and Go ecosystems, and we will continue to maintain and improve it in the coming releases. If you’re migrating from the previous plugin originally released by Google, you’ll notice a more straightforward workflow that aligns with the standard JetBrains IDE experience you expect from other build tool integrations such as Maven and Gradle. Now, let’s dive into what’s new! Key features in 2025.2 Bazel Query in Action Back in December, we publicly announced the EAP (Early Access Program) version of our new plugin and defined what it would take to release it into GA, with an overview of the main differences between the original plugin and the new one. Hereâs a quick recap for those moving from the older plugin: We’ve smoothed out the rough edges to make Bazel feel like a natural part of the IDE. We understand that development doesn’t just happen on one OS. Thatâs why we worked on making our plugin compatible with Microsoft Windows, bringing most of the feature set to our Windows-based users. We believe editing your build files should be as easy as editing your source code, which is why we’ve improved the user experience for all Bazel-related configuration files. Starlark Quick Documentation .bazelproject view highlighting and completions The Bazel for IntelliJ plugin (also known as IJwB) by Google is being deprecated. Google has transferred the code ownership and maintenance to JetBrains. We will keep providing compatibility updates for new IntelliJ versions and critical fixes only throughout the year of 2025, but will be fully deprecating it in 2026. All our development effort for IntelliJ IDEA, GoLand, and PyCharm is now focused on the new plugin. The Bazel for CLion plugin (CLwB) has also been transferred to JetBrains, and will continue to be actively developed. Learn more in the post Enhancing Bazel Support for CLion on the CLion Blog. We’re committed to making this the best Bazel experience possible. Please report any issues, ideas, or improvements straight to our issue tracker. Fixed the problem yourself? We accept PRs on our hirschgarten repository. You’ll also find us on the Bazel Community Slack, in the #intellij channel. Happy building! July 31, 2025 01:40 PM UTC July 31, 2025 10:20 AM UTC"
  },
  {
    "url": "https://www.python.org/events/",
    "title": "Our Events | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. 08 Aug.\n        \n            2025\n        \n\n            2025\n        \n\nBuea, Cameroon 11 Aug.\n        \n            2025\n        \n\n         –\n            15 Aug.\n        \n\n        \n            2025\n        \n\nArusha, Tanzania 13 Aug.\n        \n            2025\n        \n\n         –\n            14 Aug.\n        \n\n        \n            2025\n        \n\nMogadishu, Somalia 15 Aug.\n        \n            2025\n        \n\n         –\n            17 Aug.\n        \n\n        \n            2025\n        \n\nSeoul, South Korea 18 Aug.\n        \n            2025\n        \n\n         –\n            22 Aug.\n        \n\n        \n            2025\n        \n\nKraków, Poland 23 Aug.\n        \n            2025\n        \n\n         –\n            24 Aug.\n        \n\n        \n            2025\n        \n\nHaringhata Farm, West Bengal, India 23 Aug.\n        \n            2025\n        \n\n            2025\n        \n\nLomé, Togo 26 Aug.\n        \n            2025\n        \n\n            2025\n        \n\n        \n            4pm UTC\n                 – 7pm\n                    UTC\n                \n        \n    \nAmsterdam, The Netherlands and Online 28 Aug.\n        \n            2025\n        \n\n         –\n            30 Aug.\n        \n\n        \n            2025\n        \n\nNairobi, Kenya 28 Aug.\n        \n            2025\n        \n\n         –\n            31 Aug.\n        \n\n        \n            2025\n        \n\nGliwice, Poland 29 Aug.\n        \n            2025\n        \n\n         –\n            30 Aug.\n        \n\n        \n            2025\n        \n\nAthens, Greece 01 Sept.\n        \n            2025\n        \n\n            2025\n        \n\nLimbe, Cameroon 01 Sept.\n        \n            2025\n        \n\n         –\n            03 Sept.\n        \n\n        \n            2025\n        \n\nBerlin, Germany 01 Sept.\n        \n            2025\n        \n\n         –\n            05 Sept.\n        \n\n        \n            2025\n        \n\nAbraka, Nigeria 04 Sept.\n        \n            2025\n        \n\n            2025\n        \n\n        \n            6pm UTC\n                 – 8pm\n                    UTC\n                \n        \n    \nLeiden, The Netherlands 06 Sept.\n        \n            2025\n        \n\n         –\n            07 Sept.\n        \n\n        \n            2025\n        \n\nTaipei City, Taiwan 09 Sept.\n        \n            2025\n        \n\n            2025\n        \n\nCinema City, Israel 10 Sept.\n        \n            2025\n        \n\n            2025\n        \n\n        \n            4pm UTC\n                 – 7pm\n                    UTC\n                \n        \n    \nDüsseldorf, Germany 12 Sept.\n        \n            2025\n        \n\n         –\n            14 Sept.\n        \n\n        \n            2025\n        \n\nTřeštice, Czechia 12 Sept.\n        \n            2025\n        \n\n         –\n            16 Sept.\n        \n\n        \n            2025\n        \n\nMelbourne, Australia 12 Sept.\n        \n            2025\n        \n\n            2025\n        \n\nAbraka, Nigeria 12 Sept.\n        \n            2025\n        \n\n         –\n            15 Sept.\n        \n\n        \n            2025\n        \n\nBengaluru, India 13 Sept.\n        \n            2025\n        \n\n         –\n            15 Sept.\n        \n\n        \n            2025\n        \n\nDosso, Niger 19 Sept.\n        \n            2025\n        \n\n         –\n            22 Sept.\n        \n\n        \n            2025\n        \n\nManchester, United Kingdom 26 Sept.\n        \n            2025\n        \n\n         –\n            27 Sept.\n        \n\n        \n            2025\n        \n\nHiroshima, Japan 27 Sept.\n        \n            2025\n        \n\n            2025\n        \n\nKano, Nigeria 27 Sept.\n        \n            2025\n        \n\n            2025\n        \n\nSanta Monica, CA, USA 30 Sept.\n        \n            2025\n        \n\n         –\n            01 Oct.\n        \n\n        \n            2025\n        \n\nParis, France 01 Oct.\n        \n            2025\n        \n\n            2025\n        \n\nYaounde, Cameroon 02 Oct.\n        \n            2025\n        \n\n         –\n            04 Oct.\n        \n\n        \n            2025\n        \n\nLagos, Nigeria 02 Oct.\n        \n            2025\n        \n\n         –\n            03 Oct.\n        \n\n        \n            2025\n        \n\nTallinn, Estonia 04 Oct.\n        \n            2025\n        \n\n            2025\n        \n\nAba, Abia State, Nigeria 06 Oct.\n        \n            2025\n        \n\n         –\n            08 Oct.\n        \n\n        \n            2025\n        \n\nOnline 08 Oct.\n        \n            2025\n        \n\n         –\n            10 Oct.\n        \n\n        \n            2025\n        \n\nOnline 08 Oct.\n        \n            2025\n        \n\n         –\n            12 Oct.\n        \n\n        \n            2025\n        \n\nJohannesburg, South Africa 11 Oct.\n        \n            2025\n        \n\n         –\n            12 Oct.\n        \n\n        \n            2025\n        \n\nKowloon, Hong Kong 13 Oct.\n        \n            2025\n        \n\n         –\n            19 Oct.\n        \n\n        \n            2025\n        \n\nJyväskylä, Finland 14 Oct.\n        \n            2025\n        \n\n         –\n            16 Oct.\n        \n\n        \n            2025\n        \n\nBrighton, UK 16 Oct.\n        \n            2025\n        \n\n            2025\n        \n\nUtrecht, The Netherlands 16 Oct.\n        \n            2025\n        \n\n         –\n            17 Oct.\n        \n\n        \n            2025\n        \n\nRapperswil, Switzerland 17 Oct.\n        \n            2025\n        \n\n         –\n            18 Oct.\n        \n\n        \n            2025\n        \n\nBangkok, Thailand 17 Oct.\n        \n            2025\n        \n\n         –\n            19 Oct.\n        \n\n        \n            2025\n        \n\nSevilla, Spain 17 Oct.\n        \n            2025\n        \n\n            2025\n        \n\nJyväskylä, Finland 18 Oct.\n        \n            2025\n        \n\n         –\n            19 Oct.\n        \n\n        \n            2025\n        \n\nSan Francisco, CA, USA 21 Oct.\n        \n            2025\n        \n\n         –\n            27 Oct.\n        \n\n        \n            2025\n        \n\nSao Paulo, Brazil 22 Oct.\n        \n            2025\n        \n\n         –\n            23 Oct.\n        \n\n        \n            2025\n        \n\nSan Francisco, USA 30 Oct.\n        \n            2025\n        \n\n         –\n            02 Nov.\n        \n\n        \n            2025\n        \n\nLyon, France 30 Oct.\n        \n            2025\n        \n\n         –\n            31 Oct.\n        \n\n        \n            2025\n        \n\nClarion Hotel Skanstull, Stockholm, Sweden 03 Nov.\n        \n            2025\n        \n\n         –\n            05 Nov.\n        \n\n        \n            2025\n        \n\nSan Diego, USA 15 Nov.\n        \n            2025\n        \n\n         –\n            16 Nov.\n        \n\n        \n            2025\n        \n\nDublin, Ireland 19 Nov.\n        \n            2025\n        \n\n         –\n            20 Nov.\n        \n\n        \n            2025\n        \n\nAbraka, Nigeria 20 March\n        \n            2026\n        \n\n         –\n            21 March\n        \n\n        \n            2026\n        \n\nVancouver, British Columbia, Canada 27 May\n        \n            2026\n        \n\n         –\n            30 May\n        \n\n        \n            2026\n        \n\nBologna, Italy 26 July\n        \n            2025\n        \n\n         –\n            27 July\n        \n\n        \n            2025\n        \n\nCleveland, USA 25 July\n        \n            2025\n        \n\n         –\n            26 July\n        \n\n        \n            2025\n        \n\nMoscow, Russia For Python events near you, please have a look at the Python events map. The Python events calendars are maintained by the events calendar team. Please see the events calendar project page for details on how to submit events, subscribe to the calendars, get Twitter feeds or embed them. Thank you. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/events/python-events/",
    "title": "Our Events | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. More 11 Aug.\n        \n            2025\n        \n\n         –\n            15 Aug.\n        \n\n        \n            2025\n        \n\nArusha, Tanzania 13 Aug.\n        \n            2025\n        \n\n         –\n            14 Aug.\n        \n\n        \n            2025\n        \n\nMogadishu, Somalia 15 Aug.\n        \n            2025\n        \n\n         –\n            17 Aug.\n        \n\n        \n            2025\n        \n\nSeoul, South Korea 18 Aug.\n        \n            2025\n        \n\n         –\n            22 Aug.\n        \n\n        \n            2025\n        \n\nKraków, Poland 23 Aug.\n        \n            2025\n        \n\n            2025\n        \n\nLomé, Togo 23 Aug.\n        \n            2025\n        \n\n         –\n            24 Aug.\n        \n\n        \n            2025\n        \n\nHaringhata Farm, West Bengal, India Subscribe to Python Event Calendars: For Python events near you, please have a look at the Python events map. The Python events calendars are maintained by the events calendar team. Please see the events calendar project page for details on how to submit events, subscribe to the calendars, get Twitter feeds or embed them. Thank you. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/events/python-user-group/",
    "title": "Our Events | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. More 08 Aug.\n        \n            2025\n        \n\n            2025\n        \n\nBuea, Cameroon 26 Aug.\n        \n            2025\n        \n\n            2025\n        \n\n        \n            4pm UTC\n                 – 7pm\n                    UTC\n                \n        \n    \nAmsterdam, The Netherlands and Online 01 Sept.\n        \n            2025\n        \n\n            2025\n        \n\nLimbe, Cameroon 01 Sept.\n        \n            2025\n        \n\n         –\n            05 Sept.\n        \n\n        \n            2025\n        \n\nAbraka, Nigeria 04 Sept.\n        \n            2025\n        \n\n            2025\n        \n\n        \n            6pm UTC\n                 – 8pm\n                    UTC\n                \n        \n    \nLeiden, The Netherlands 10 Sept.\n        \n            2025\n        \n\n            2025\n        \n\n        \n            4pm UTC\n                 – 7pm\n                    UTC\n                \n        \n    \nDüsseldorf, Germany Subscribe to Python Event Calendars: For Python events near you, please have a look at the Python events map. The Python events calendars are maintained by the events calendar team. Please see the events calendar project page for details on how to submit events, subscribe to the calendars, get Twitter feeds or embed them. Thank you. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/events/python-events/past/",
    "title": "Our Events | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. More 26 July\n        \n            2025\n        \n\n         –\n            27 July\n        \n\n        \n            2025\n        \n\nCleveland, USA 25 July\n        \n            2025\n        \n\n         –\n            26 July\n        \n\n        \n            2025\n        \n\nMoscow, Russia 14 July\n        \n            2025\n        \n\n         –\n            17 July\n        \n\n        \n            2025\n        \n\nSeattle, USA 14 July\n        \n            2025\n        \n\n         –\n            20 July\n        \n\n        \n            2025\n        \n\nPrague, Czech Republic 07 July\n        \n            2025\n        \n\n         –\n            13 July\n        \n\n        \n            2025\n        \n\nTacoma, WA, USA 04 July\n        \n            2025\n        \n\n         –\n            06 July\n        \n\n        \n            2025\n        \n\nBelém, Pará, Brazil Subscribe to Python Event Calendars: For Python events near you, please have a look at the Python events map. The Python events calendars are maintained by the events calendar team. Please see the events calendar project page for details on how to submit events, subscribe to the calendars, get Twitter feeds or embed them. Thank you. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/events/python-user-group/past/",
    "title": "Our Events | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. More 22 July\n        \n            2025\n        \n\n         –\n            23 July\n        \n\n        \n            2025\n        \n\nIndianapolis, IN, USA and Online 15 July\n        \n            2025\n        \n\n            2025\n        \n\n        \n            4pm UTC\n                 – 7pm\n                    UTC\n                \n        \n    \nAmsterdam, The Netherlands, and Online 10 July\n        \n            2025\n        \n\n            2025\n        \n\n        \n            6pm UTC\n                 – 8pm\n                    UTC\n                \n        \n    \nLeiden, The Netherlands 03 July\n        \n            2025\n        \n\n            2025\n        \n\n        \n            2am UTC\n                 – 4am\n                    UTC\n                \n        \n    \nOnline 29 June\n        \n            2025\n        \n\n            2025\n        \n\nSerekunda, Gambia 28 June\n        \n            2025\n        \n\n         –\n            29 June\n        \n\n        \n            2025\n        \n\nLeipzig, Germany Subscribe to Python Event Calendars: For Python events near you, please have a look at the Python events map. The Python events calendars are maintained by the events calendar team. Please see the events calendar project page for details on how to submit events, subscribe to the calendars, get Twitter feeds or embed them. Thank you. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://wiki.python.org/moin/PythonEventsCalendar#Submitting_an_Event",
    "title": "PythonEventsCalendar - Python Wiki",
    "content": "Python Events Calendar\n\nIntroduction\nThe Python events calendar is a combination of Google calendars maintained by the Python Calendar Team and published on the following sites: http://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) https://twitter.com/PythonEvents (@PythonEvents) http://legacy.python.org/ (in the side bar on the left of all pages) As of January 2020, we have more then 520 events listed and the calendars are proving to be a really useful resource for the Python community. The events are also listed on a map mashup created by Luis Miguel Morillas: http://lmorillas.github.io/python_events/ Here's a snapshot showing all events from Jan 2012 - March 2016:   Contents\nPython Events Calendar\nIntroduction\nSubmitting an Event\nBulk Submission of Events\nAvailable Calendars\niCal Downloads\nRSS Feeds\nTwitter Feed\nEmbedding Calendars\nKnown sites embedding the calendars\nPython Calendar Team\nMailing List\nGuidelines for entries\nGeneral Requirements\nCalendar Choice\nNotes regarding calendar entries\nCalendar embedding code\nResources  \nSubmitting an Event\nIf you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Introduction\nThe Python events calendar is a combination of Google calendars maintained by the Python Calendar Team and published on the following sites: http://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) https://twitter.com/PythonEvents (@PythonEvents) http://legacy.python.org/ (in the side bar on the left of all pages) As of January 2020, we have more then 520 events listed and the calendars are proving to be a really useful resource for the Python community. The events are also listed on a map mashup created by Luis Miguel Morillas: http://lmorillas.github.io/python_events/ Here's a snapshot showing all events from Jan 2012 - March 2016:   Contents\nPython Events Calendar\nIntroduction\nSubmitting an Event\nBulk Submission of Events\nAvailable Calendars\niCal Downloads\nRSS Feeds\nTwitter Feed\nEmbedding Calendars\nKnown sites embedding the calendars\nPython Calendar Team\nMailing List\nGuidelines for entries\nGeneral Requirements\nCalendar Choice\nNotes regarding calendar entries\nCalendar embedding code\nResources  \nSubmitting an Event\nIf you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. The Python events calendar is a combination of Google calendars maintained by the Python Calendar Team and published on the following sites: http://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) https://twitter.com/PythonEvents (@PythonEvents) http://legacy.python.org/ (in the side bar on the left of all pages) As of January 2020, we have more then 520 events listed and the calendars are proving to be a really useful resource for the Python community. The events are also listed on a map mashup created by Luis Miguel Morillas: http://lmorillas.github.io/python_events/ Here's a snapshot showing all events from Jan 2012 - March 2016:   Contents\nPython Events Calendar\nIntroduction\nSubmitting an Event\nBulk Submission of Events\nAvailable Calendars\niCal Downloads\nRSS Feeds\nTwitter Feed\nEmbedding Calendars\nKnown sites embedding the calendars\nPython Calendar Team\nMailing List\nGuidelines for entries\nGeneral Requirements\nCalendar Choice\nNotes regarding calendar entries\nCalendar embedding code\nResources  \nSubmitting an Event\nIf you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. http://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) https://twitter.com/PythonEvents (@PythonEvents) http://legacy.python.org/ (in the side bar on the left of all pages) As of January 2020, we have more then 520 events listed and the calendars are proving to be a really useful resource for the Python community. The events are also listed on a map mashup created by Luis Miguel Morillas: http://lmorillas.github.io/python_events/ Here's a snapshot showing all events from Jan 2012 - March 2016:   Contents\nPython Events Calendar\nIntroduction\nSubmitting an Event\nBulk Submission of Events\nAvailable Calendars\niCal Downloads\nRSS Feeds\nTwitter Feed\nEmbedding Calendars\nKnown sites embedding the calendars\nPython Calendar Team\nMailing List\nGuidelines for entries\nGeneral Requirements\nCalendar Choice\nNotes regarding calendar entries\nCalendar embedding code\nResources  \nSubmitting an Event\nIf you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. The events are also listed on a map mashup created by Luis Miguel Morillas: http://lmorillas.github.io/python_events/ Here's a snapshot showing all events from Jan 2012 - March 2016:   Contents\nPython Events Calendar\nIntroduction\nSubmitting an Event\nBulk Submission of Events\nAvailable Calendars\niCal Downloads\nRSS Feeds\nTwitter Feed\nEmbedding Calendars\nKnown sites embedding the calendars\nPython Calendar Team\nMailing List\nGuidelines for entries\nGeneral Requirements\nCalendar Choice\nNotes regarding calendar entries\nCalendar embedding code\nResources  \nSubmitting an Event\nIf you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. http://lmorillas.github.io/python_events/ Here's a snapshot showing all events from Jan 2012 - March 2016:   Contents\nPython Events Calendar\nIntroduction\nSubmitting an Event\nBulk Submission of Events\nAvailable Calendars\niCal Downloads\nRSS Feeds\nTwitter Feed\nEmbedding Calendars\nKnown sites embedding the calendars\nPython Calendar Team\nMailing List\nGuidelines for entries\nGeneral Requirements\nCalendar Choice\nNotes regarding calendar entries\nCalendar embedding code\nResources  \nSubmitting an Event\nIf you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Contents\nPython Events Calendar\nIntroduction\nSubmitting an Event\nBulk Submission of Events\nAvailable Calendars\niCal Downloads\nRSS Feeds\nTwitter Feed\nEmbedding Calendars\nKnown sites embedding the calendars\nPython Calendar Team\nMailing List\nGuidelines for entries\nGeneral Requirements\nCalendar Choice\nNotes regarding calendar entries\nCalendar embedding code\nResources  \nSubmitting an Event\nIf you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Contents\nPython Events Calendar\nIntroduction\nSubmitting an Event\nBulk Submission of Events\nAvailable Calendars\niCal Downloads\nRSS Feeds\nTwitter Feed\nEmbedding Calendars\nKnown sites embedding the calendars\nPython Calendar Team\nMailing List\nGuidelines for entries\nGeneral Requirements\nCalendar Choice\nNotes regarding calendar entries\nCalendar embedding code\nResources  \nSubmitting an Event\nIf you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Contents\nPython Events Calendar\nIntroduction\nSubmitting an Event\nBulk Submission of Events\nAvailable Calendars\niCal Downloads\nRSS Feeds\nTwitter Feed\nEmbedding Calendars\nKnown sites embedding the calendars\nPython Calendar Team\nMailing List\nGuidelines for entries\nGeneral Requirements\nCalendar Choice\nNotes regarding calendar entries\nCalendar embedding code\nResources  \nSubmitting an Event\nIf you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Contents\nPython Events Calendar\nIntroduction\nSubmitting an Event\nBulk Submission of Events\nAvailable Calendars\niCal Downloads\nRSS Feeds\nTwitter Feed\nEmbedding Calendars\nKnown sites embedding the calendars\nPython Calendar Team\nMailing List\nGuidelines for entries\nGeneral Requirements\nCalendar Choice\nNotes regarding calendar entries\nCalendar embedding code\nResources  \nSubmitting an Event\nIf you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Contents\nPython Events Calendar\nIntroduction\nSubmitting an Event\nBulk Submission of Events\nAvailable Calendars\niCal Downloads\nRSS Feeds\nTwitter Feed\nEmbedding Calendars\nKnown sites embedding the calendars\nPython Calendar Team\nMailing List\nGuidelines for entries\nGeneral Requirements\nCalendar Choice\nNotes regarding calendar entries\nCalendar embedding code\nResources Submitting an Event\nIf you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Submitting an Event\nIf you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Submitting an Event\nIf you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. If you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Please add the following event:\n\n * name of the event: \n * type of event: \n * focus on Python: \n * approximate number of attendees: \n * location (incl. country): \n * dates/times/recurrence (incl. time zone): \n * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country) the dates/times (including the time zone) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. the location (venue address, including city and country) a link with more details for the event (using HTML format \"<a href=\"http://url/\">name of the event</a>\"); URL shorteners are not permitted. For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these.  Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. \nBulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. For training sessions, courses, webinars and similar type of events, please post your event on the PythonTraining page. We currently do not have a calendar for these. Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. Bulk Submission of Events\nIn some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. In some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org, including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Please attach the event data as iCal file events.ics using the following entry format: title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. title: name of the event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city, [state,] country description: <a href=\"http://url/\">name of the event</a> The same notes as above apply to bulk submissions. \nAvailable Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Available Calendars\nPython Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget \niCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Python Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget iCal Downloads\nPython Events Calendar Python User Group Calendar \nRSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Python Events Calendar Python User Group Calendar RSS Feeds\nNote: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Note: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar \nTwitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Python Events Calendar Python User Group Calendar Twitter Feed\n@PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. \nEmbedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. @PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT. Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. Embedding Calendars\nIf you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. If you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. You can find the embedding code further below on this page. \nKnown sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Known sites embedding the calendars\nhttps://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) \nPython Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. https://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) Python Calendar Team\nThe following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. The following people are team members with admin rights to the calendars: Marc-Andre Lemburg These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. These are our team members with editing rights: Helio Loureiro Abdur-Rahmaan Janhangeer Olivia Sauls If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. The following people are inactive team members: Mayank Pathak Giri Prasath Dinakaran Sergey Sokolov Anton Caceres Marcelo Elizeche Landó Richard Jones Mike Müller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz \nMailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Mailing List\nThe team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. The team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events  As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. https://mail.python.org/mailman/listinfo/python-events As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. \nGuidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Guidelines for entries\nIn order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. In order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: \nGeneral Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. General Requirements\nEvents have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. \nCalendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack, etc.) and for other events such as sprints. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online Event as location. For hybrid events (both in-person and virtual), mentioning and Online after the in-person location is possible as well. Calendar Choice\nPython Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. \nNotes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Python Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Notes regarding calendar entries\nSome notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Some notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a href=\"http://www.pycon.fr/2012/>PyCon FR 2012</a>. Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. \nCalendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Calendar embedding code\nThis iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. This iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\">\n  <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/>\n  <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a>\n</iframe>\nResources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Resources\nGoogle Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. Google Calendar API v2 Atom Reference. This describes the available RSS feed options available on the Google calendar feed links. PythonEventsCalendar  (last edited 2025-07-26 09:09:05 by MarcAndreLemburg) Unable to edit the page? See the FrontPage for instructions."
  },
  {
    "url": "http://legacy.python.org/Algorithms",
    "title": "Page Not Found",
    "content": "Add an event to this calendar. Times are shown in UTC/GMT. Add an event to this calendar. The URL you requested was not found on this server. Try our home page, or our search engines - or use one of\nthe other links on the left hand navigation."
  },
  {
    "url": "https://www.python.org/dev/",
    "title": "Python Developer's Guide | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Python's Developer Guide can be found at https://devguide.python.org/. The pieces of documentation hosted here are: The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://github.com/python/cpython/issues",
    "title": "GitHub · Where software is built",
    "content": "We read every piece of feedback, and take your input very seriously. To see all available qualifiers, see our documentation. There was an error while loading. Please reload this page. There was an error while loading. Please reload this page. There was an error while loading. Please reload this page. There was an error while loading. Please reload this page."
  },
  {
    "url": "https://mail.python.org/mailman/listinfo/python-dev",
    "title": "Mailman 3 \nInfo | python-dev@python.org - python.org",
    "content": "Python core developers The discussions around the core Python development have moved on to our Discourse forum server: Core Development category Do not post general Python questions to this list.  For help with Python please see the Python help page. On this list the key Python developers discuss the future of the language and its implementation.  Topics include Python design issues, release mechanics, and maintenance of existing releases. More information on Python's development process can be found in the Python Developer's Guide. This is a fairly high volume mailing list so even the digests can result in substantial amounts of email occasionally.  Consider using\nGmane. To contact the list owners, use the following email address: python-dev-owner@python.org Archives To subscribe or unsubscribe from this list, please sign in first.\n        If you have not previously signed in, you may need to set up an account\n        with the appropriate email address. Sign In Postorius Documentation\n                    •\n                    GNU Mailman\n                    •\n                    Postorius Version 1.3.13"
  },
  {
    "url": "https://www.python.org/dev/core-mentorship/",
    "title": "Python Core Mentorship | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. The Python Core Mentorship Program is predicated on\nthe idea that Python core, and Python as a whole would be served by\nfurther lowering the barrier to entry of contribution to Python core\n(original proposal) The mission of the Python Core Mentor Program is to provide an open\nand welcoming place to connect students, programmers â and\nanyone interested in contributing to the Python core\ndevelopment. This project is based on the idea that the best way to\nwelcome new people into any project is a venue which connects them to\na variety of mentors who can assist in guiding them through the\ncontribution process, including discussions on lists such as python-dev,\nand python-ideas, the bug tracker, Git questions, code reviews, etc. Additionally, mentors assist in something incredibly critical to\nmaintain contributor interest: getting patches through the process and actually\ncommitted. We all know â not everyone who is mentor will have all the\nanswers, so mentors also act as conduits to others who will have the\nanswer. The most important point to make is that everyone is welcome and no\none, no matter who they are, is turned away. Keep to the code of conduct, and\nhelp those around you. The following code of conduct is not meant as a means for punishment, action\nor censorship for the mailing list or project. Instead, it is meant to set the\ntone and expectations and comfort level for mentors and those wishing to be\nmentored on the list. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/dev/security/",
    "title": "Python Security | Python.org",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. See the security issue information for pypi.org\nhere. The Python Software Foundation and the Python developer community take\nsecurity vulnerabilities very seriously.  A Python Security Response Team (PSRT) has\nbeen formed that does triage on all reported vulnerabilities and works to resolve them.  To reach the response team, send email to\nsecurity at python dot org. Only the response team members will see your\nemail, and it will be treated confidentially. The PSRT mailing list is tightly controlled, so you can have confidence that\nyour security issue will only be read by a highly trusted cabal of Python\ndevelopers.  If for some reason you wish to further encrypt your message to this mailing list\n(for example, if your mail system does not use TLS),\nyou can use our shared OpenPGP key which is also available on the public\nkeyservers. The PSRT accepts security reports for the following projects: The PSRT does not accept reports for third-party redistributions of Python or pip.\nThose reports should be directed towards their corresponding distribution security contact. The following is an overview of the vulnerability handling process from reporting to disclosure: While we sincerely appreciate and encourage reports of suspected security problems in supported Python releases and the PSF web infrastructure, please note that the Python Software Foundation does not run any bug bounty programs. We are a nonprofit organization, depending on donation and support from the community. Security advisories are published to multiple public locations. Advisories are sent via email to the\nsecurity-announce@python.org mailing list. Subscribe to the mailing list if you'd like to be updated\non newly published security advisories. The mailing list has a public archive including all historical advisories sent to the list. There is also an advisory database published to GitHub using the Open Source Vulnerability (OSV) format which can be consumed\nusing automated tooling. If you need to contact the Python Software Foundation CNA directly, such as for updating or disputing a CVE record,\nyou can send an email to cna at python dot org. Be sure that the CVE record in question was\nissued by the PSF CNA and not a different CNA. Key fingerprint: Key data: The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://github.com/python/pythondotorg/issues",
    "title": "GitHub · Where software is built",
    "content": "We read every piece of feedback, and take your input very seriously. To see all available qualifiers, see our documentation. There was an error while loading. Please reload this page. There was an error while loading. Please reload this page."
  },
  {
    "url": "https://status.python.org/",
    "title": "Python Infrastructure Status",
    "content": "Resend OTP in:  seconds Didn't receive the OTP?\n                    Resend OTP Resend OTP in: 30 seconds Didn't receive the OTP?\n                      Resend OTP The URL we should send the webhooks to We'll send you email if your endpoint fails No incidents or maintenance related to this downtime. No incidents reported today. No incidents reported. No incidents reported. No incidents reported. No incidents reported. No incidents reported. No incidents reported. No incidents reported. No incidents reported. No incidents reported. No incidents reported. No incidents reported. No incidents reported. No incidents reported."
  },
  {
    "url": "https://www.python.org/psf-landing/",
    "title": "Python Software Foundation",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. In 2024, the PSF awarded $655,000 USD to 257 groups or individuals in 61 countries around the world. We support and maintain python.org,\r\n          The Python Package Index,\r\n          Python Documentation,\r\n          and many other services the Python Community relies on. We produce and underwrite the\r\n          PyCon US Conference,\r\n          the largest annual gathering for the Python community.\r\n         Support from sponsors, attendees, PyLadies, and CPython enabled us to award more than $384,000 USD in travel grants to 254 attendees for PyCon US 2025. Help the PSF promote, protect, and advance the Python programming language and community! Membership FAQ Assist the foundation's goals with a donation. The PSF is a recognized 501(c)(3) non-profit organization. How to Contribute Learn how you can help the PSF and the greater Python community! How to Volunteer Without our sponsors we wouldn't be able to help the Python community grow and prosper. Sponsorship Possibilities The Python Software Foundation welcomes grant proposals for projects related to the development of Python, Python-related technology, and educational resources. Proposal Guidelines, FAQ and Examples Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://www.python.org/about/legal/",
    "title": "Legal Statements | Python Software Foundation",
    "content": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Trademarks Python and PyCon are trademarks or registered trademarks of the\nPython Software Foundation. All other trademarks mentioned on this website are the property of their\nrespective owners. Copyright Except where otherwise specified, the contents of this website are\ncopyright Â© 1990-2014, Python Software Foundation,\n9450 SW Gemini Dr., ECM# 90772, Beaverton, OR 97008, USA.  All rights reserved. Licenses Python, its standard libraries, and Jython, are distributed under the\nPython License. The intellectual property rights behind\nPython and Jython are held and managed by the Python Software Foundation. The licenses, trademarks, and copyrights for other implementations of Python\n(such as IronPython, Stackless Python, and PyPy) may vary and are managed by\ntheir respective owners. Third-Party Content The Python Software Foundation (âPSFâ) does not claim ownership of any\nthird-party code or content (âthird party contentâ) placed on the web\nsite and has no obligation of any kind with respect to such third\nparty content. Any third party content provided in connection with\nthis web site is provided on a non-confidential basis. The PSF is free\nto use or disseminate such content on an unrestricted basis for any\npurpose, and third party content providers grant the PSF and all other\nusers of the web site an irrevocable, worldwide, royalty-free,\nnonexclusive license to reproduce, distribute, transmit, display,\nperform, and publish such content, including in digital form. Third party content providers represent and warrant that they have\nobtained the proper governmental authorizations for the export and\nreexport of any software or other content contributed to this web site\nby the third-party content provider, and further affirm that any\nUnited States-sourced cryptographic software is not intended for use\nby a foreign government end-user. Individuals and organizations are advised that the PyPI website is hosted in\nthe US, with mirrors in several countries outside the US (see\nhttp://www.pypi-mirrors.org/).  Any uploads of packages must comply\nwith United States export controls under the Export Administration\nRegulations. Legal Mailing List If you have any questions, please send them to the legal mailing list at:  legal@python.org. The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. Copyright ©2001-2025.\n                             Python Software Foundation\n                             Legal Statements\n                             Privacy Notice"
  },
  {
    "url": "https://policies.python.org/python.org/Privacy-Notice/",
    "title": "Privacy Notice - Python Software Foundation Policies",
    "content": "Last updated October 4, 2024 This privacy notice describes what personal information the Python Software Foundation (“PSF”)\ncollects from  users,\nwhen and how we share that information,\nand why.\nThis notice is an addendum to the PSF Privacy Notice,\nwhich also applies to  users. PSF may collect the following information from  users: The PSF uses some third party services to assist with operating online services supporting . Specifically, we use: Amazon Web Services (AWS) to host the PyCon US website. We store your registration information on AWS servers. Their use of this information is subject to the Data Processing Addendum between AWS and PSF and the AWS Privacy Notice (https://aws.amazon.com/privacy/).] Fastly to host the  website and services. Your information transits their servers. Their use of this information is subject to the Data Processing Terms between Fastly and PSF and the Fastly Privacy Policy. Sentry to aggregate error information from the  website and services. Some personal information may be stored on their servers. Their use of this information is subject to the Data Processing Addendum between Sentry and PSF and the Sentry Privacy Policy. Google Analytics to aggregate traffic analytics. Some personal information may be transited to their servers. Their use of this information is subject to the Google Ads Data Processing Terms between Google and PSF and the Google Privacy Policy. Plausible to aggregate traffic analytics. Some personal information may be stored on ther servers. Their use of this information is subject to the Plausible Analytics Data Processing Agreement between Plausible and PSF asnd the Plausible Privacy Policy. We use the information you provide in the following ways, in addition to the uses described in the PSF Privacy Notice:"
  },
  {
    "url": "http://legacy.python.org/Natural_language_processing",
    "title": "Page Not Found",
    "content": "Add an event to this calendar. Times are shown in UTC/GMT. Add an event to this calendar. The URL you requested was not found on this server. Try our home page, or our search engines - or use one of\nthe other links on the left hand navigation."
  },
  {
    "url": "https://developer.mozilla.org/en-US/",
    "title": "MDN Web Docs",
    "content": "Web technology reference for developers Structure of content on the web Code used to describe document style General-purpose scripting language Protocol for transmitting web resources Interfaces for building web applications Developing extensions for web browsers Build web projects usable for all Web technology reference for developers Learn web development Learn web development Learn to structure web content with HTML Learn to style content using CSS Learn to run scripts in the browser Learn to make the web accessible to all A customized MDN experience Get real-time assistance and support All browser compatibility updates at a glance Learn how to use MDN Plus Frequently asked questions about MDN Plus Write, test and share your code Scan a website for free Get real-time assistance and support Documenting web technologies, including CSS, HTML, and JavaScript, since 2005. A new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN. The CSS anchor positioning module defines features that allow you to tether elements together. Certain elements are defined as anchor elements; anchor-positioned elements can then have their size and position set based on the size and location of the anchor elements to which they are bound. This article explains the theory behind how the View Transition API works, how to create view transitions and customize the transition animations, and how to manipulate active view transitions. This covers view transitions for both DOM state updates in a single-page app (SPA), and navigating between documents in a multi-page app (MPA). The Temporal object enables date and time management in various scenarios, including built-in time zone and calendar representation, wall-clock time conversions, arithmetics, formatting, and more. It is designed as a full replacement for the Date object. MDN 2024 content projectsdeveloper.mozilla.org A new learning experience on MDNdeveloper.mozilla.org Introducing the new MDN Community pagedeveloper.mozilla.org [es] auto-fix content issuesmdn/translated-content [ru] sync translated contentmdn/translated-content 2025/07/10 æç¹ã®è±èªçã«åæmdn/translated-content Fix typo `Scx`->`scx` for short name of `Script_Extensions` propmdn/content 2025/07/10 æç¹ã®è±èªçã«åæmdn/translated-content 2025/07/29 æç¹ã®è±èªçã«åæmdn/translated-content the example comment is out of date, now Chrome give the same message with Firefox/Safarimdn/content Fix hyperlinkmdn/content Feat/property examplemdn/content <selectedcontent>: update to description and specificationmdn/content Your blueprint for a better internet. Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2025 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web",
    "title": "Web technology for developers | MDN",
    "content": "Web technology reference for developers Structure of content on the web Code used to describe document style General-purpose scripting language Protocol for transmitting web resources Interfaces for building web applications Developing extensions for web browsers Build web projects usable for all Web technology reference for developers Learn web development Learn web development Learn to structure web content with HTML Learn to style content using CSS Learn to run scripts in the browser Learn to make the web accessible to all A customized MDN experience Get real-time assistance and support All browser compatibility updates at a glance Learn how to use MDN Plus Frequently asked questions about MDN Plus Write, test and share your code Scan a website for free Get real-time assistance and support The open Web presents incredible opportunities for developers. To take full advantage of these technologies, you need to know how to use them. Below you'll find links to our Web technology documentation. The Web Developer Guides provide practical, how-to content to help you use Web technologies for your goals or needs. Tutorials to take you step-by-step through learning HTML, CSS, JavaScript, and Web APIs. Enabling as many people as possible to use websites, even when those people's abilities are limited in some way. Making content as available and interactive as possible, as soon as possible. Protecting users' personal data. Protecting users from data leaks and data theft, side-channel attacks, and attacks such as cross-site scripting, content injection, and click-jacking. Definitions of Web-related terms. JavaScript programming APIs you can use to build apps on the Web. HTML provides the fundamental building blocks for structuring Web documents and apps. Cascading Style Sheets are used to describe the appearance of Web documents and apps. JavaScript is the Web's native programming language. WebAssembly allows programs written in C, C++, Rust, Swift, C#, Go, and more to run on the Web. HTTP is the fundamental Internet protocol for fetching documents, stylesheets, scripts, images, videos, fonts, and other resources over the Web â and for sending data back to Web servers. Formats, codecs, protocols, APIs, and techniques for embedding and streaming video, audio, and image content in Web documents and apps. Scalable Vector Graphics lets you create images that scale smoothly to any size. MathML lets you display complex mathematical notation on the Web. Uniform Resource Identifiers are used by various technologies, including the browser itself via the address bar, to identify resources in various ways. WebDriver is a browser-automation mechanism for remotely controlling a browser by emulating the actions of a real person using the browser. It's widely used for cross-browser testing of Web apps. Web Extensions are a way for you to give users enhanced capabilities in their browsers â for doing things such as blocking ads and other content, customizing the appearance of pages, and more. Web App Manifests let you enable users to install Web apps to their device home screens, with aspects such as portrait/landscape screen orientation and display mode (e.g., full screen) pre-set. Progressive Web Apps provide a user experience similar to native mobile apps. OpenSearch allows a website to describe a search engine for itself, so that a browser or other client application can use that search engine. The Extensible Markup Language is a strict serialization of the Document Object Model. Extensible Stylesheet Language Transformations is an XML-based language used, in conjunction with specialized processing software, for the transformation of XML documents. XPath uses a non-XML syntax to provide a flexible way of addressing (pointing to) different parts of an XML document. It can also be used to test addressed nodes within a document to determine whether they match a pattern or not. EXSLT a set of extensions to XSLT. Documentation for the set of web-developer tools built into Firefox. Documentation for the set of web-developer tools built into Chrome. Documentation for the set of web-developer tools built into Safari. Documentation for the set of web-developer tools built into Edge. This page was last modified on Jul 29, 2025 by MDN contributors. Your blueprint for a better internet. Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2025 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/HTML",
    "title": "HTML: HyperText Markup Language | MDN",
    "content": "Web technology reference for developers Structure of content on the web Code used to describe document style General-purpose scripting language Protocol for transmitting web resources Interfaces for building web applications Developing extensions for web browsers Build web projects usable for all Web technology reference for developers Learn web development Learn web development Learn to structure web content with HTML Learn to style content using CSS Learn to run scripts in the browser Learn to make the web accessible to all A customized MDN experience Get real-time assistance and support All browser compatibility updates at a glance Learn how to use MDN Plus Frequently asked questions about MDN Plus Write, test and share your code Scan a website for free Get real-time assistance and support HTML (HyperText Markup Language) is the most basic building block of the Web. It defines the meaning and structure of web content. Other technologies besides HTML are generally used to describe a web page's appearance/presentation (CSS) or functionality/behavior (JavaScript). \"Hypertext\" refers to links that connect web pages to one another, either within a single website or between websites. Links are a fundamental aspect of the Web. By uploading content to the Internet and linking it to pages created by other people, you become an active participant in the World Wide Web. HTML uses \"markup\" to annotate text, images, and other content for display in a Web browser. HTML markup includes special \"elements\" such as <head>, <title>, <body>, <header>, <footer>, <article>, <section>, <p>, <div>, <span>, <img>, <aside>, <audio>, <canvas>, <datalist>, <details>, <embed>, <nav>, <search>, <output>, <progress>, <video>, <ul>, <ol>, <li> and many others. An HTML element is set off from other text in a document by \"tags\", which consist of the element name surrounded by < and >. The name of an element inside a tag is case-insensitive. That is, it can be written in uppercase, lowercase, or a mixture. For example, the <title> tag can be written as <Title>, <TITLE>, or in any other way. However, the convention and recommended practice is to write tags in lowercase. The articles below can help you learn more about HTML. This article provides a brief tour of what HTML is and how to use it, aimed at people who are completely new to web development. Our Learn web development section's HTML module teaches all the HTML fundamentals from the ground up. The HTML guides help you build with HTML on the web, covering topics such as forms, CORS, content preloading, and responsive images. Forms are a very important part of the Web â these provide much of the functionality you need for interacting with websites, e.g., registering and logging in, sending feedback, buying products, and more. This module gets you started with creating the client-side/front-end parts of forms. The crossorigin attribute, in combination with an appropriate CORS header, allows images defined by the <img> element to be loaded from foreign origins and used in a <canvas> element as if they were being loaded from the current origin. Some HTML elements that provide support for CORS, such as <img> or <video>, have a crossorigin attribute (crossOrigin property), which lets you configure the CORS requests for the element's fetched data. The preload value of the <link> element's rel attribute allows you to write declarative fetch requests in your HTML <head>, specifying resources that your pages will need very soon after loading, which you therefore want to start preloading early in the lifecycle of a page load, before the browser's main rendering machinery kicks in. This ensures that they are made available earlier and are less likely to block the page's first render, leading to performance improvements. This article provides a basic guide to how preload works. In this article, we'll learn about the concept of responsive images â images that work well on devices with widely differing screen sizes, resolutions, and other such features â and look at what tools HTML provides to help implement them. This helps to improve performance across different devices. HTML consists of elements, each of which may be modified by some number of attributes. HTML documents are connected to each other with links. Browse a list of all HTML elements. Elements in HTML have attributes. These are additional values that configure the elements or adjust their behavior in various ways. Global attributes may be specified on all HTML elements, even those not specified in the standard. This means that any non-standard elements must still permit these attributes, even though those elements make the document HTML5-noncompliant. HTML elements are usually \"inline-level\" or \"block-level\" elements. An inline-level element occupies only the space bounded by the tags that define it. A block-level element occupies the entire space of its parent element (container), thereby creating a \"block box\". HTML comments are used to add explanatory notes to the markup or to prevent the browser from interpreting specific parts of the document. The <audio> and <video> elements allow you to play audio and video media natively within your content without the need for external software support. HTML is comprised of several kinds of content, each of which is allowed to be used in certain contexts and is disallowed in others. Similarly, each context has a set of other content categories it can contain and elements that can or can't be used in them. This is a guide to these categories. Historical information on quirks mode and standards mode. This article covers most of the ways you use CSS to add color to HTML content, listing what parts of HTML documents can be colored and what CSS properties to use when doing so. This page was last modified on Jul 9, 2025 by MDN contributors. Your blueprint for a better internet. Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2025 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS",
    "title": "CSS: Cascading Style Sheets | MDN",
    "content": "Web technology reference for developers Structure of content on the web Code used to describe document style General-purpose scripting language Protocol for transmitting web resources Interfaces for building web applications Developing extensions for web browsers Build web projects usable for all Web technology reference for developers Learn web development Learn web development Learn to structure web content with HTML Learn to style content using CSS Learn to run scripts in the browser Learn to make the web accessible to all A customized MDN experience Get real-time assistance and support All browser compatibility updates at a glance Learn how to use MDN Plus Frequently asked questions about MDN Plus Write, test and share your code Scan a website for free Get real-time assistance and support Cascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG, MathML or XHTML). CSS describes how elements should be rendered on screen, on paper, in speech, or on other media. CSS is among the core languages of the open web and is standardized across Web browsers according to W3C specifications. Previously, the development of various parts of CSS specification was done synchronously, which allowed the versioning of the latest recommendations. You might have heard about CSS1, CSS2.1, or even CSS3. There will never be a CSS3 or a CSS4; rather, everything is now just \"CSS\" with individual CSS modules having version numbers. After CSS 2.1, the scope of the specification increased significantly and the progress on different CSS modules started to differ so much, that it became more effective to develop and release recommendations separately per module. Instead of versioning the CSS specification, W3C now periodically takes a snapshot of the latest stable state of the CSS specification and individual modules progress. CSS modules now have version numbers, or levels, such as CSS Color Module Level 5. This article provides a brief tour of what CSS is and how to use it, aimed at people who are completely new to web development. Our Learn web development section's CSS basics module teaches CSS fundamentals from the ground up. Here we look at fundamentals including setting font, boldness, italics, line and letter spacing, drop shadows, and other text features. We round off the module by looking at applying custom fonts to your page, and styling lists and links. Now it's time to look at how to correctly lay out your boxes in relation to one another, and the browser viewport. This module looks at floats, positioning, other modern layout tools, and building responsive designs that will adapt to different devices, screen sizes, and resolutions. The CSS reference is an exhaustive reference for seasoned Web developers, describing every property and concept of CSS, including: The CSS layout cookbook aims to bring together recipes for common layout patterns, things you might need to implement in your sites. In addition to providing code you can use as a starting point in your projects, these recipes highlight the different ways layout specifications can be used and the choices you can make as a developer. This page was last modified on Jul 14, 2025 by MDN contributors. Your blueprint for a better internet. Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2025 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
    "title": "JavaScript | MDN",
    "content": "Web technology reference for developers Structure of content on the web Code used to describe document style General-purpose scripting language Protocol for transmitting web resources Interfaces for building web applications Developing extensions for web browsers Build web projects usable for all Web technology reference for developers Learn web development Learn web development Learn to structure web content with HTML Learn to style content using CSS Learn to run scripts in the browser Learn to make the web accessible to all A customized MDN experience Get real-time assistance and support All browser compatibility updates at a glance Learn how to use MDN Plus Frequently asked questions about MDN Plus Write, test and share your code Scan a website for free Get real-time assistance and support JavaScript (JS) is a lightweight interpreted (or just-in-time compiled) programming language with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, Apache CouchDB and Adobe Acrobat. JavaScript is a prototype-based, garbage-collected, dynamic language, supporting multiple paradigms such as imperative, functional, and object-oriented. JavaScript's dynamic capabilities include runtime object construction, variable parameter lists, function variables, dynamic script creation (via eval), object introspection (via for...in and Object utilities), and source-code recovery (JavaScript functions store their source text and can be retrieved through toString()). This section is dedicated to the JavaScript language itself, and not the parts that are specific to Web pages or other host environments. For information about APIs that are specific to Web pages, please see Web APIs and DOM. The standards for JavaScript are the ECMAScript Language Specification (ECMA-262) and the ECMAScript Internationalization API specification (ECMA-402). As soon as one browser implements a feature, we try to document it. This means that cases where some proposals for new ECMAScript features have already been implemented in browsers, documentation and examples in MDN articles may use some of those new features. Most of the time, this happens between the stages 3 and 4, and is usually before the spec is officially published. Do not confuse JavaScript with the Java programming language â JavaScript is not \"Interpreted Java\". Both \"Java\" and \"JavaScript\" are trademarks or registered trademarks of Oracle in the U.S. and other countries. However, the two programming languages have very different syntax, semantics, and use. JavaScript documentation of core language features (pure ECMAScript, for the most part) includes the following: For more information about JavaScript specifications and related technologies, see JavaScript technologies overview. Learn how to program in JavaScript from the ground up with our beginner's tutorials. This article provides a brief tour of what JavaScript is and how to use it, aimed at people who are completely new to web development. Our Learn web development section's JavaScript module teaches all the JavaScript fundamentals from the ground up. JavaScript frameworks are an essential part of modern front-end web development, providing developers with tried and tested tools for building scalable, interactive web applications. Many modern companies use frameworks as a standard part of their tooling, so many front-end development jobs now require framework experience. In this set of articles, we aim to give you a comfortable starting point to help you begin learning frameworks. A much more detailed guide to the JavaScript language, aimed at those with previous programming experience either in JavaScript or another language. The object-oriented nature of JavaScript is important to understand if you want to go further with your knowledge of the language and write more efficient code, therefore we've provided this module to help you. In this module, we take a look at asynchronous JavaScript, why it is important, and how it can be used to effectively handle potential blocking operations, such as fetching resources from a server. Explores what APIs are, and how to use some of the most common APIs you'll come across often in your development work. An overview of the basic syntax and semantics of JavaScript for those coming from other programming languages to get up to speed. Overview of available data structures in JavaScript. JavaScript provides three different value comparison operations: strict equality using ===, loose equality using ==, and the Object.is() method. How different methods that visit a group of object properties one-by-one handle the enumerability and ownership of properties. A closure is the combination of a function and the lexical environment within which that function was declared. Explanation of the widely misunderstood and underestimated prototype-based inheritance. Memory life cycle and garbage collection in JavaScript. Browse the complete JavaScript reference documentation. Get to know standard built-in objects: Array, Boolean, Error, Function, JSON, Math, Number, Object, RegExp, String, Map, Set, WeakMap, WeakSet, and others. Learn more about the behavior of JavaScript's operators instanceof, typeof, new, this, the operator precedence, and more. Learn how do-while, for-in, for-of, try-catch, let, var, const, if-else, switch, and more JavaScript statements and keywords work. Learn how to work with JavaScript's functions to develop your applications. JavaScript classes are the most appropriate way to do object-oriented programming. This page was last modified on Jul 8, 2025 by MDN contributors. Your blueprint for a better internet. Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2025 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP",
    "title": "HTTP: Hypertext Transfer Protocol | MDN",
    "content": "Web technology reference for developers Structure of content on the web Code used to describe document style General-purpose scripting language Protocol for transmitting web resources Interfaces for building web applications Developing extensions for web browsers Build web projects usable for all Web technology reference for developers Learn web development Learn web development Learn to structure web content with HTML Learn to style content using CSS Learn to run scripts in the browser Learn to make the web accessible to all A customized MDN experience Get real-time assistance and support All browser compatibility updates at a glance Learn how to use MDN Plus Frequently asked questions about MDN Plus Write, test and share your code Scan a website for free Get real-time assistance and support HTTP is an application-layer protocol for transmitting hypermedia documents, such as HTML.\nIt was designed for communication between web browsers and web servers, but it can also be used for other purposes, such as machine-to-machine communication, programmatic access to APIs, and more. HTTP follows a classical client-server model, with a client opening a connection to make a request, then waiting until it receives a response from the server.\nHTTP is a stateless protocol, meaning that the server does not keep any session data between two requests, although the later addition of cookies adds state to some client-server interactions. The HTTP reference documentation contains detailed information about headers, request methods, status responses, and lists relevant specifications and standards documents. Message headers are used to send metadata about a resource or a HTTP message, and to describe the behavior of the client or the server. Request methods indicate the purpose of the request and what is expected if the request is successful.\nThe most common methods are GET and POST for retrieving and sending data to servers, respectively, but there are other methods which serve different purposes. Response status codes indicate the outcome of a specific HTTP request.\nResponses are grouped in five classes: informational, successful, redirections, client errors, and server errors. This page lists relevant resources about HTTP since it was first specified in the early 1990s. The following subsections are also notable: The Content-Security-Policy (CSP) response header allows website administrators to specify which resources the user agent is allowed to load for a given page.\nThis section lists directives that can be used in a CSP header, with individual documentation pages that describe how the directives work and how to use them. The Permissions-Policy response header provides a mechanism to allow or deny the use of browser features in a document or within any <iframe> element in the document.\nThis section lists directives that can be used in a Permissions-Policy header, with individual documentation pages that describe how the directives work and how to use them. HTTP is an extensible protocol that relies on concepts like resources and Uniform Resource Identifiers (URIs), a basic message structure, and client-server communication model.\nOn top of these concepts, numerous extensions have been developed over the years that add functionality and updated semantics, including additional HTTP methods and headers. The HTTP guides are listed in order from general overviews to specialized, use-case-driven topics.\nBeginners are encouraged to start with the foundational guides before exploring more focused articles. The basic features of HTTP, what it can do, its intended use in web architecture, and its position in the protocol stack. HTTP was created in the early 1990s and has been extended several times.\nThis article goes through its history and describes HTTP/0.9, HTTP/1.0, HTTP/1.1, through HTTP/2 and HTTP/3, as well as novelties introduced over the years. Describes the flow of an HTTP session, from establishing a connection, sending a request, to receiving a response. HTTP messages transmitted as requests and responses have a defined structure.\nThis article describes this general structure, its purpose, and the different types of messages. Since HTTP/1.0, different types of content can be transmitted.\nThis article explains how this is accomplished using the Content-Type header and the MIME standard.\nA shortlist of common types used by web developers can be found in Common MIME types. Browsers and servers compress their messages before sending them over the network to reduce the amount of data that needs to be transmitted, improving transfer speed and bandwidth utilization. Caching is a highly important mechanism for delivering fast experiences on the Web and for efficient use of resources.\nThis article describes different methods of caching and how to use HTTP headers to control them. Authentication is a way to verify the identity of a client when making requests to a server.\nIt ensures that only authorized users or systems can access certain resources. Although HTTP is a stateless protocol, a server can send a Set-Cookie header with the response.\nThe client then returns the cookie's value with every subsequent request to the server in the form of a Cookie request header.\nThis adds the ability to store and exchange a small amount of data which effectively adds state to some client-server interactions. URL redirection, also known as URL forwarding, is a technique to give more than one URL address to a page, a form, a whole website, or a web application.\nHTTP has a special kind of response, called a HTTP redirect, for this operation. In conditional requests, the outcome of a request depends on the value of a validator in the request.\nThis method is used heavily in caching and use cases such as resuming a download, preventing lost updates when modifying a document on the server, and more. A range request asks the server to send a specific part (or parts) of a resource back to a client instead of the full resource.\nRange requests are useful for cases when a client knows they need only part of a large file, or for cases where an application allows the user to pause and resume a download. HTTP defines a set of message headers, starting with Accept as a way for a browser to announce the format, language, or encoding it prefers.\nThis article explains how this advertisement happens, how the server is expected to react, and how it chooses the most adequate response to a request. HTTP/1.1 was the first version of HTTP to support persistent connections and pipelining.\nThis article explains both concepts, including the pros and cons of each. HTTP/1.1 provides a mechanism to upgrade an already-established connection to a different protocol using the Upgrade header.\nA client can upgrade a connection from HTTP/1.1 to HTTP/2, or an HTTP(S) connection to a WebSocket (ws / wss). A proxy can be on the user's local computer, or anywhere between the user's computer and a destination server on the Internet.\nThis page outlines some basics about proxies and introduces a few configuration options. Client Hints are a set of response headers that a server can use to proactively request information from a client about the device, network, user, and user-agent-specific preferences.\nThe server can then determine which resources to send, based on the information that the client chooses to provide. Network Error Logging is a mechanism that can be configured via the NEL HTTP response header.\nThis experimental header allows websites and applications to opt-in to receive reports about failed (or even successful) network fetches from supporting browsers. It's very rarely a good idea to use user agent sniffing to detect a browser, but there are edge cases that require it.\nThis document will guide you in doing this as correctly as possible when this is necessary, with an emphasis on considerations to make before embarking on this route. Permissions Policy provides mechanisms for web developers to explicitly declare what functionality can and cannot be used on a website.\nYou define a set of \"policies\" that restrict what APIs the site's code can access or modify the browser's default behavior for certain features. Cross-site HTTP requests are requests for resources from a different domain than that of the resource making the request.\nWeb pages today very commonly load cross-site resources, for example, a page 'Domain A' (http://domaina.example/) requests an image on 'Domain B' (http://domainb.foo/image.jpg) via the img element.\nCORS allows web developers to control how their site reacts to cross-site requests. CSP allows website administrators to use the Content-Security-Policy response header to control which resources the client is allowed to load for a given page.\nThe CSP guide describes the overall Content Security Policy mechanism which helps detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and data injection attacks. CORP lets websites and applications opt in to protection against specific requests from other origins (such as those issued with elements like <script> and <img>), to mitigate speculative side-channel attacks. A collection of tips to help operational teams with creating secure web applications. Uniform Resource Identifiers (URIs) are used to describe and locate resources on the web and are an essential component in HTTP requests. This guide covers a few server configuration changes that may be necessary for your web server to correctly serve Ogg media files.\nThis information may also be useful if you encounter other media types your server isn't already configured to recognize. Helpful tools and resources for understanding and debugging HTTP. Network monitor A project designed to help developers, system administrators, and security professionals configure their sites safely and securely. Tools to check your cache-related headers. An HTTP/2 client, server and proxy implementation written in C with load test and benchmarking tools and an HPACK encoder and decoder. A command-line tool for transferring data specified with URL syntax.\nSupports HTTP, HTTPS, WS, WSS, among many other protocols. A very comprehensive article on browser internals and request flow through HTTP protocol. This page was last modified on Jul 4, 2025 by MDN contributors. Your blueprint for a better internet. Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2025 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/API",
    "title": "Web APIs | MDN",
    "content": "Web technology reference for developers Structure of content on the web Code used to describe document style General-purpose scripting language Protocol for transmitting web resources Interfaces for building web applications Developing extensions for web browsers Build web projects usable for all Web technology reference for developers Learn web development Learn web development Learn to structure web content with HTML Learn to style content using CSS Learn to run scripts in the browser Learn to make the web accessible to all A customized MDN experience Get real-time assistance and support All browser compatibility updates at a glance Learn how to use MDN Plus Frequently asked questions about MDN Plus Write, test and share your code Scan a website for free Get real-time assistance and support When writing code for the Web, there are a large number of Web APIs available. Below is a list of all the APIs and interfaces (object types) that you may be able to use while developing your Web app or site. Web APIs are typically used with JavaScript, although this doesn't always have to be the case. This is a list of all the APIs that are available. This is a list of all the interfaces (that is, types of objects) that are available. This page was last modified on Jul 29, 2025 by MDN contributors. Your blueprint for a better internet. Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2025 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions",
    "title": "Browser extensions - Mozilla | MDN",
    "content": "Web technology reference for developers Structure of content on the web Code used to describe document style General-purpose scripting language Protocol for transmitting web resources Interfaces for building web applications Developing extensions for web browsers Build web projects usable for all Web technology reference for developers Learn web development Learn web development Learn to structure web content with HTML Learn to style content using CSS Learn to run scripts in the browser Learn to make the web accessible to all A customized MDN experience Get real-time assistance and support All browser compatibility updates at a glance Learn how to use MDN Plus Frequently asked questions about MDN Plus Write, test and share your code Scan a website for free Get real-time assistance and support Extensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology. The technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes. Whether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides. Get comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys. Discover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop. Note:\nIf you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix. Discover what extensions can do before building your first extension and your second extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox. Continue your learning by discovering a list of resources to follow. Get detailed information on the concepts that underpin extensions. Discover all the user interface components you can use in your extensions, with coding examples and tips. A range of tutorials to get you started on specific aspects of extension development. When you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on: Get comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API. Get full details about the manifest keys, including all their properties and settings. This page was last modified on Jul 17, 2025 by MDN contributors. Your blueprint for a better internet. Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2025 by individual mozilla.org contributors. Content available under a Creative Commons license."
  }
]